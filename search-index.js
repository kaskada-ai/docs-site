antoraSearch.initSearch(lunr, {"index":{"version":"2.3.9","fields":["title","name","text","component"],"fieldVectors":[["title/1-1",[0,24.665,1,20.473,2,31.045]],["name/1-1",[]],["text/1-1",[]],["component/1-1",[]],["title/1-2",[0,20.991,1,17.423,3,35.305,4,30.956]],["name/1-2",[]],["text/1-2",[]],["component/1-2",[]],["title/1-3",[0,18.269,1,15.164,5,25.684,6,26.942,7,22.994]],["name/1-3",[]],["text/1-3",[]],["component/1-3",[]],["title/1",[1,24.818,8,42.036]],["name/1",[8,0.627]],["text/1",[0,2.507,1,3.758,2,2.1,3,1.868,4,0.613,5,3.98,6,1.155,7,2.401,8,3.525,9,1.529,10,0.508,11,3.125,12,3.125,13,0.551,14,1.078,15,0.699,16,1.795,17,0.779,18,0.699,19,0.733,20,1.155,21,2.925,22,1.24,23,2.128,24,0.508,25,0.63,26,0.572,27,0.63,28,3.62,29,0.63,30,1.959,31,2.988,32,1.266,33,1.735,34,0.779,35,1.735,36,0.848,37,2.476,38,0.733,39,1.683,40,1.868,41,0.585,42,1.868,43,2.193,44,1.638,45,0.733,46,0.475,47,0.733,48,1.794,49,1.101,50,0.779,51,0.561,52,0.532,53,0.532,54,1.803,55,0.541,56,0.733,57,0.779,58,1.61,59,1.498,60,1.795,61,0.501,62,0.572,63,0.541,64,1.224,65,0.779,66,1.337,67,0.65,68,1.318,69,0.561,70,0.699,71,1.255,72,1.598,73,1.668,74,1.795,75,1.598,76,3.982,77,1.424,78,1.868,79,1.421,80,1.598,81,1.498,82,1.598,83,2.361,84,0.613,85,0.613,86,0.613,87,0.779,88,1.002,89,0.943,90,0.672,91,0.65,92,0.65,93,0.65,94,0.551,95,0.551,96,0.541,97,0.848,98,1.826,99,0.672,100,0.598,101,1.266,102,1.382,103,0.848,104,1.561,105,0.494,106,0.551,107,0.672,108,1.019,109,0.44,110,0.896,111,0.436,112,0.63,113,1.598,114,0.613,115,0.551,116,0.848,117,0.699,118,0.733,119,1.468,120,1.266,121,1.683,122,2.1,123,1.468,124,2.606,125,2.345,126,0.733,127,0.779,128,0.65,129,0.733,130,0.672,131,0.699,132,0.848,133,0.256,134,0.733,135,2.63,136,0.848,137,0.848,138,0.733,139,1.598,140,1.382,141,1.598,142,0.848,143,0.733,144,2.081,145,2.265,146,2.265,147,2.081,148,2.265,149,2.081,150,0.779,151,0.733,152,0.779,153,1.683,154,2.081,155,0.672,156,0.779,157,0.733,158,0.779,159,0.487,160,0.63,161,0.672,162,0.885,163,1.445,164,0.779,165,0.779,166,0.779,167,0.65,168,0.733,169,0.672,170,1.598,171,0.541,172,0.63,173,0.779,174,0.699,175,0.848,176,0.523,177,0.848,178,0.848,179,0.572,180,0.848,181,1.894,182,1.27,183,0.699,184,0.672,185,0.672,186,1.318,187,1.356,188,0.848,189,0.733,190,0.672,191,1.318,192,1.155,193,1.468,194,0.733,195,0.585,196,0.487,197,0.613,198,2.081,199,0.779,200,0.779]],["component/1",[1,0.233]],["title/2-1",[95,39.588,162,33.783]],["name/2-1",[]],["text/2-1",[]],["component/2-1",[]],["title/2-2",[66,22,73,18.269,100,26.28,162,20.642,201,10.419]],["name/2-2",[]],["text/2-2",[]],["component/2-2",[]],["title/2-3",[66,22,73,18.269,162,20.642,201,10.419,202,12.799]],["name/2-3",[]],["text/2-3",[]],["component/2-3",[]],["title/2-4",[162,33.783,203,48.334]],["name/2-4",[]],["text/2-4",[]],["component/2-4",[]],["title/2-5",[21,41.15,204,46.707]],["name/2-5",[]],["text/2-5",[]],["component/2-5",[]],["title/2-6",[204,38.53,205,39.873,206,46.208]],["name/2-6",[]],["text/2-6",[]],["component/2-6",[]],["title/2-7",[2,26.42,66,25.278,73,20.991,201,11.971]],["name/2-7",[]],["text/2-7",[]],["component/2-7",[]],["title/2-8",[7,26.42,66,25.278,73,20.991,201,11.971]],["name/2-8",[]],["text/2-8",[]],["component/2-8",[]],["title/2",[66,29.703,73,24.665,201,14.067]],["name/2",[66,0.28,73,0.233]],["text/2",[0,3.287,1,2.728,2,1.014,7,2.987,9,1.981,10,0.523,14,1.57,21,1.57,22,0.9,23,2.589,24,0.523,25,1.729,26,2.686,27,1.729,28,4.285,29,1.729,31,1.604,32,2.327,34,0.803,41,0.602,46,0.921,48,0.486,51,1.087,58,0.517,60,0.693,61,0.516,62,0.59,63,0.557,66,5.258,73,3.512,74,3.155,79,2.185,88,1.459,91,0.669,92,0.669,94,0.567,95,1.906,100,2.458,109,0.453,110,0.921,111,0.449,114,1.188,122,0.539,130,0.693,133,0.497,134,0.756,162,5.221,163,1.048,171,0.557,179,1.109,182,0.49,187,0.523,192,1.188,193,0.803,194,1.421,195,0.602,197,1.188,201,2.216,202,1.663,203,2.327,204,1.782,205,2.327,206,3.656,207,2.633,208,0.649,209,0.548,210,1.758,211,2.259,212,1.641,213,0.803,214,0.539,215,2.633,216,0.649,217,0.669,218,2.421,219,2.327,220,0.874,221,0.756,222,1.303,223,0.874,224,0.693,225,0.792,226,0.59,227,0.803,228,0.632,229,0.669,230,0.874,231,1.421,232,0.567,233,0.578,234,0.921,235,0.874,236,2.012,237,0.933,238,2.137,239,1.844,240,1.509,241,2.327,242,1.355,243,2.616,244,0.874,245,3.442,246,0.874,247,0.874,248,0.578,249,0.649,250,0.874,251,0.874,252,0.578,253,0.874,254,0.484,255,0.693,256,1.57,257,2.327,258,0.803,259,1.509,260,0.59,261,0.874,262,0.803,263,0.693,264,0.602,265,0.874,266,0.693,267,0.756,268,0.632,269,3.981,270,1.644,271,0.874,272,0.874,273,0.874,274,0.874,275,0.874,276,0.874,277,0.874,278,1.048,279,1.644,280,0.803,281,0.874,282,0.874,283,0.874,284,0.874,285,0.874,286,0.874,287,0.578,288,0.453,289,1.644,290,0.874,291,0.803,292,0.548,293,0.669,294,0.649,295,2.539,296,1.031,297,0.632,298,0.632,299,0.286,300,1.509,301,0.803,302,0.874]],["component/2",[1,0.233]],["title/3-1",[41,42.036,303,52.737]],["name/3-1",[]],["text/3-1",[]],["component/3-1",[]],["title/3-2",[304,55.972]],["name/3-2",[]],["text/3-2",[]],["component/3-2",[]],["title/3-3",[207,40.338,268,44.094]],["name/3-3",[]],["text/3-3",[]],["component/3-3",[]],["title/3-4",[122,37.633,305,38.892]],["name/3-4",[]],["text/3-4",[]],["component/3-4",[]],["title/3-5",[22,33.393,305,38.892]],["name/3-5",[]],["text/3-5",[]],["component/3-5",[]],["title/3-6",[9,41.15,305,38.892]],["name/3-6",[]],["text/3-6",[]],["component/3-6",[]],["title/3-7",[305,49.369]],["name/3-7",[]],["text/3-7",[]],["component/3-7",[]],["title/3-8",[305,38.892,306,41.15]],["name/3-8",[]],["text/3-8",[]],["component/3-8",[]],["title/3-9",[305,38.892,307,43.011]],["name/3-9",[]],["text/3-9",[]],["component/3-9",[]],["title/3",[305,49.369]],["name/3",[305,0.58]],["text/3",[0,2.763,1,2.293,2,2.685,7,1.594,9,4.153,10,0.853,13,0.925,14,1.743,22,1.414,23,3.232,24,0.853,25,3.232,26,4.462,27,3.232,28,5.301,29,3.232,41,0.982,48,1.49,54,0.755,58,1.115,63,0.909,73,2.763,84,1.03,89,2.569,98,1.647,100,1.005,104,0.982,108,0.909,110,0.799,111,0.732,133,1.315,138,1.232,159,1.485,172,1.059,182,0.799,187,0.853,196,0.819,201,0.722,207,2.878,216,1.059,219,1.13,224,1.13,225,1.244,232,0.925,243,0.841,252,0.943,254,0.789,267,2.234,278,1.647,296,0.894,303,3.063,304,1.868,305,6.302,306,1.743,307,3.555,308,1.919,309,2.921,310,1.309,311,0.866,312,1.425,313,0.841,314,1.425,315,0.962,316,1.309,317,1.175,318,1.309,319,1.092,320,1.232,321,1.232,322,2.583,323,2.583,324,1.425,325,1.425,326,2.439,327,3.996,328,1.425,329,3.254,330,2.373,331,2.373,332,3.254,333,3.254,334,1.425,335,1.425,336,1.425,337,1.425,338,1.425,339,1.03,340,0.83,341,1.175,342,0.894,343,1.03,344,1.309,345,1.232,346,1.781,347,1.175,348,0.982,349,1.092,350,1.005,351,2.373,352,1.13,353,1.005,354,1.03,355,1.677,356,0.943,357,1.03,358,0.909,359,1.309,360,1.309,361,1.309,362,1.13,363,1.232,364,0.789,365,1.175,366,1.005,367,1.425,368,1.425,369,1.232,370,0.962,371,0.894,372,1.425,373,1.005,374,1.13]],["component/3",[1,0.233]],["title/4-1",[48,14.871,375,32.083,376,46.208]],["name/4-1",[]],["text/4-1",[]],["component/4-1",[]],["title/4-2",[71,23.717,201,11.971,294,31.812,364,23.717]],["name/4-2",[]],["text/4-2",[]],["component/4-2",[]],["title/4-3",[377,43.011,378,31.974]],["name/4-3",[]],["text/4-3",[]],["component/4-3",[]],["title/4-4",[379,50.289,380,42.036]],["name/4-4",[]],["text/4-4",[]],["component/4-4",[]],["title/4-5",[237,28.553,381,32.658,382,29.301]],["name/4-5",[]],["text/4-5",[]],["component/4-5",[]],["title/4-6",[383,52.737,384,36.006]],["name/4-6",[]],["text/4-6",[]],["component/4-6",[]],["title/4-7",[79,38.242,176,37.633]],["name/4-7",[]],["text/4-7",[]],["component/4-7",[]],["title/4-8",[326,34.189,385,41.15]],["name/4-8",[]],["text/4-8",[]],["component/4-8",[]],["title/4-9",[225,24.237,386,50.313,387,37.381]],["name/4-9",[]],["text/4-9",[]],["component/4-9",[]],["title/4-10",[375,32.083,388,31.547,389,39.873]],["name/4-10",[]],["text/4-10",[]],["component/4-10",[]],["title/4-11",[14,33.946,48,14.871,390,31.547]],["name/4-11",[]],["text/4-11",[]],["component/4-11",[]],["title/4-12",[14,28.889,201,11.971,391,29.511,392,35.305]],["name/4-12",[]],["text/4-12",[]],["component/4-12",[]],["title/4-13",[2,37.633,48,18.027]],["name/4-13",[]],["text/4-13",[]],["component/4-13",[]],["title/4-14",[2,31.045,84,36.375,393,18.31]],["name/4-14",[]],["text/4-14",[]],["component/4-14",[]],["title/4-15",[48,18.027,64,46.707]],["name/4-15",[]],["text/4-15",[]],["component/4-15",[]],["title/4-16",[64,38.53,84,36.375,393,18.31]],["name/4-16",[]],["text/4-16",[]],["component/4-16",[]],["title/4-17",[71,33.783,201,17.052]],["name/4-17",[]],["text/4-17",[]],["component/4-17",[]],["title/4-18",[0,24.665,73,24.665,74,39.873]],["name/4-18",[]],["text/4-18",[]],["component/4-18",[]],["title/4-19",[0,24.665,58,15.838,81,33.276]],["name/4-19",[]],["text/4-19",[]],["component/4-19",[]],["title/4-20",[0,24.665,78,41.485,79,31.547]],["name/4-20",[]],["text/4-20",[]],["component/4-20",[]],["title/4",[48,22.883]],["name/4",[48,0.269]],["text/4",[0,1.924,1,0.558,2,0.184,7,0.36,9,0.579,10,1.495,13,0.194,14,0.926,15,0.246,20,0.216,22,0.32,24,2.157,26,0.201,28,4.435,31,0.591,35,0.228,39,0.222,46,0.327,48,1.45,49,0.206,51,0.386,52,1.012,53,0.187,54,1.322,55,0.875,58,1.981,59,0.386,60,0.236,61,0.506,62,0.201,63,2.297,64,0.228,66,0.506,67,0.228,68,0.481,69,0.386,71,0.894,73,1.122,74,1.28,78,1.132,79,2.043,81,1.513,88,0.187,89,0.345,91,0.228,92,0.228,96,0.372,98,0.714,104,2.366,105,1.207,106,0.557,107,0.463,108,2.401,109,1.869,110,1.399,111,1.386,114,0.216,117,0.246,121,0.637,122,0.184,133,0.338,159,0.493,162,0.62,163,0.19,171,0.19,176,0.184,179,0.394,181,0.197,182,0.481,192,1.498,196,0.493,201,0.517,209,0.187,210,0.822,211,0.487,212,0.21,214,0.529,217,0.858,225,2.036,226,0.579,233,0.567,234,0.167,237,1.64,243,2.127,249,0.222,252,1.912,254,0.76,264,0.206,287,0.197,288,0.838,292,0.187,295,0.969,296,0.187,297,0.422,298,0.216,299,0.28,311,0.521,313,0.506,317,0.246,326,1.036,340,1.207,342,0.187,347,0.246,348,0.206,349,0.228,352,0.463,353,0.412,354,0.422,355,0.727,356,0.908,357,0.422,358,0.372,364,0.62,366,0.412,370,0.394,373,2.038,375,0.547,377,0.412,378,1.974,379,0.246,380,0.206,382,0.174,384,0.81,385,0.579,388,0.187,389,0.463,390,1.565,391,2.246,394,0.258,395,0.298,396,0.236,397,0.605,398,0.847,399,0.968,400,0.671,401,0.236,402,0.463,403,0.584,404,0.228,405,0.298,406,0.298,407,0.298,408,0.298,409,0.258,410,0.274,411,0.246,412,0.258,413,0.298,414,0.246,415,0.201,416,0.298,417,1.372,418,0.201,419,0.216,420,0.274,421,0.891,422,0.222,423,0.298,424,0.298,425,0.236,426,0.536,427,0.992,428,0.481,429,1.051,430,0.236,431,0.707,432,0.447,433,0.926,434,0.298,435,0.536,436,0.298,437,0.258,438,0.298,439,0.644,440,0.434,441,0.412,442,0.298,443,0.298,444,1.088,445,0.258,446,0.547,447,0.246,448,0.184,449,0.298,450,0.298,451,0.274,452,0.298,453,0.707,454,0.584,455,0.447,456,0.181,457,0.274,458,0.788,459,0.274,460,0.236,461,0.402,462,0.258,463,0.246,464,0.481,465,0.222,466,0.584,467,0.591,468,0.567,469,0.298,470,0.298,471,0.298,472,0.298,473,0.194,474,0.222,475,0.274,476,0.536,477,0.222,478,0.236,479,0.246,480,0.236,481,0.21,482,0.505,483,0.298,484,0.298,485,0.584,486,0.298,487,0.298,488,0.298,489,0.298,490,0.298,491,0.246,492,0.274,493,0.258,494,0.222,495,0.274,496,0.246,497,0.236,498,0.246,499,0.591,500,0.298,501,0.298,502,0.274,503,0.258,504,0.386,505,0.228,506,0.274,507,0.21,508,0.858,509,0.298,510,0.274,511,0.298,512,0.412,513,0.412,514,0.584,515,0.216,516,0.298,517,0.567,518,0.434,519,0.246,520,0.298,521,0.274,522,0.246,523,0.222,524,1.029,525,0.536,526,0.274,527,0.274,528,0.194,529,0.184,530,0.298,531,0.258,532,0.236,533,0.298,534,0.298,535,0.298,536,0.246,537,0.298,538,0.505,539,0.228,540,0.274,541,0.298,542,0.298,543,0.298,544,0.246,545,0.236,546,0.274,547,0.222,548,0.481,549,0.536,550,0.258,551,0.274,552,0.274,553,0.246,554,0.181,555,0.236,556,0.21,557,0.222,558,0.246,559,0.236,560,0.274,561,0.274,562,0.184,563,0.68,564,0.258,565,0.236,566,1.02,567,0.274,568,0.298,569,0.298,570,0.298,571,0.236,572,0.246,573,0.246,574,0.206,575,0.236,576,0.236,577,0.222,578,0.584,579,0.584,580,0.584,581,0.584,582,0.584,583,1.029,584,1.029,585,0.584,586,0.888,587,0.79,588,1.029,589,0.888,590,1.654,591,0.788,592,5.538,593,5.909,594,6.169,595,3.604,596,4.014,597,2.968,598,0.788,599,3.237,600,3.458,601,0.788,602,1.28,603,0.788,604,0.788,605,1.331,606,0.788,607,1.187,608,1.396,609,0.788,610,1.396,611,0.788,612,1.792,613,0.788,614,2.101,615,0.788,616,1.331,617,0.788,618,0.194,619,0.584,620,0.584,621,0.584,622,0.584,623,0.584,624,0.584,625,1.029,626,0.481,627,0.584,628,1.372,629,1.372,630,0.858,631,0.788,632,0.858,633,0.505,634,0.858,635,1.483,636,0.505,637,0.858,638,0.584,639,0.584,640,0.584,641,0.584,642,0.584,643,0.298,644,0.222,645,0.298,646,0.298,647,0.201,648,0.505,649,0.584,650,0.298,651,0.258,652,0.298,653,0.298,654,0.481,655,0.924,656,0.298,657,0.258,658,0.246,659,0.246,660,0.258]],["component/4",[1,0.233]],["title/5-1",[111,21.998,234,24.002,364,23.717,661,39.324]],["name/5-1",[]],["text/5-1",[]],["component/5-1",[]],["title/5-2",[111,16.948,234,18.492,293,25.263,364,18.272,661,30.297,662,25.263]],["name/5-2",[]],["text/5-2",[]],["component/5-2",[]],["title/5-3",[174,63.836]],["name/5-3",[]],["text/5-3",[]],["component/5-3",[]],["title/5-4",[3,41.485,4,36.375,43,38.53]],["name/5-4",[]],["text/5-4",[]],["component/5-4",[]],["title/5-5",[2,47.771]],["name/5-5",[]],["text/5-5",[]],["component/5-5",[]],["title/5-6",[111,25.849,234,28.204,364,27.869]],["name/5-6",[]],["text/5-6",[]],["component/5-6",[]],["title/5-7",[111,19.146,234,20.89,293,28.538,364,20.642,662,28.538]],["name/5-7",[]],["text/5-7",[]],["component/5-7",[]],["title/5",[663,66.943]],["name/5",[663,0.786]],["text/5",[0,0.932,1,1.818,2,0.63,22,2.447,23,1.412,25,0.758,26,3.015,27,0.758,28,4.491,29,0.758,31,1.31,35,0.782,41,1.31,46,1.872,48,1.321,51,3.556,54,0.541,58,1.407,73,3.162,79,1.672,88,2.094,90,0.809,96,0.651,105,1.553,110,1.065,111,4.586,122,0.63,133,1.35,153,0.758,160,0.758,174,0.842,176,0.63,182,1.065,187,0.611,189,2.306,201,1.101,210,0.611,211,1.513,215,0.675,225,1.285,226,3.628,234,4.336,237,0.579,239,0.809,248,0.675,249,0.758,260,0.689,278,1.701,296,0.64,299,0.621,315,1.282,326,0.572,345,0.883,352,1.506,353,1.34,354,1.374,355,1.731,356,1.257,357,1.374,358,1.212,362,0.809,364,4.163,366,1.34,370,0.689,371,2.802,379,0.842,381,0.663,390,2.094,421,0.663,422,0.758,427,1.928,448,0.63,460,0.809,473,1.731,482,0.883,512,0.72,554,0.62,565,0.809,567,0.937,571,0.809,662,2.042,663,7.331,664,0.883,665,0.842,666,0.842,667,1.567,668,1.746,669,1.021,670,0.937,671,0.883,672,0.937,673,1.021,674,1.021,675,1.746,676,0.937,677,1.021,678,0.842,679,0.937,680,0.842,681,0.842,682,0.883,683,0.842,684,0.883,685,3.937,686,1.021,687,0.809,688,0.689,689,0.651,690,0.937,691,0.809,692,1.021,693,0.738,694,3.34,695,3.34,696,2.667,697,3.34,698,3.34,699,2.667,700,1.643,701,2.667,702,1.021,703,0.937,704,0.842,705,2.199,706,2.888,707,0.883,708,1.021,709,2.449,710,0.842,711,0.842,712,0.883,713,0.842,714,1.021,715,0.703,716,1.021,717,1.021,718,1.901,719,1.021,720,0.72,721,1.021,722,0.842,723,1.901,724,0.937,725,1.901,726,1.901,727,1.021,728,0.937,729,0.809,730,1.021]],["component/5",[1,0.233]],["title/6-1",[122,37.633,201,17.052]],["name/6-1",[]],["text/6-1",[]],["component/6-1",[]],["title/6-2",[22,33.393,201,17.052]],["name/6-2",[]],["text/6-2",[]],["component/6-2",[]],["title/6-3",[9,41.15,201,17.052]],["name/6-3",[]],["text/6-3",[]],["component/6-3",[]],["title/6-4",[201,21.645]],["name/6-4",[]],["text/6-4",[]],["component/6-4",[]],["title/6-5",[201,17.052,306,41.15]],["name/6-5",[]],["text/6-5",[]],["component/6-5",[]],["title/6-6",[201,17.052,307,43.011]],["name/6-6",[]],["text/6-6",[]],["component/6-6",[]],["title/6-7",[7,22.994,122,22.994,162,20.642,201,10.419,731,25.143]],["name/6-7",[]],["text/6-7",[]],["component/6-7",[]],["title/6-8",[7,22.994,22,20.403,201,10.419,306,25.143,307,26.28]],["name/6-8",[]],["text/6-8",[]],["component/6-8",[]],["title/6-9",[95,27.792,162,23.717,201,11.971,731,28.889]],["name/6-9",[]],["text/6-9",[]],["component/6-9",[]],["title/6-10",[162,20.642,201,10.419,296,23.366,731,25.143,732,26.942]],["name/6-10",[]],["text/6-10",[]],["component/6-10",[]],["title/6-11",[1,13.423,162,18.272,294,24.509,306,22.257,731,22.257,733,26.143]],["name/6-11",[]],["text/6-11",[]],["component/6-11",[]],["title/6",[201,21.645]],["name/6",[201,0.254]],["text/6",[0,2.31,1,2.807,2,1.099,5,0.656,7,3.29,9,2.129,10,0.295,13,0.896,14,0.333,21,0.643,22,2.58,23,1.603,24,0.295,25,1.603,26,2.517,27,1.603,28,4.928,29,1.603,31,0.952,46,0.774,49,0.34,51,0.326,58,0.435,59,0.326,61,0.291,62,0.333,63,0.315,66,0.815,70,0.785,71,0.765,73,2.082,79,1.978,81,0.326,84,0.689,86,0.357,88,0.309,89,2.91,94,0.32,95,0.32,96,0.315,98,0.607,108,0.607,109,1.475,110,2.641,111,2.532,115,1.845,122,0.588,124,0.378,133,0.538,140,0.427,162,3.157,163,0.315,171,1.136,176,0.304,179,1.918,181,0.326,182,0.277,183,2.344,184,3.734,185,0.391,187,0.295,191,0.407,192,0.689,195,0.34,196,0.547,201,2.57,203,0.755,204,0.729,207,1.427,208,0.366,209,0.309,210,1.067,211,0.541,212,0.672,214,0.304,215,2.642,218,0.785,219,0.391,221,0.427,222,0.755,225,1.662,228,0.357,231,1.194,232,1.156,233,0.326,234,2.091,237,2.674,242,0.407,243,2.359,248,0.326,252,0.326,254,0.273,255,0.391,256,1.202,260,1.202,268,0.357,278,0.607,287,0.326,288,0.717,292,0.309,296,0.866,299,0.161,305,0.315,306,1.202,307,3.323,313,2.037,326,0.277,340,1.256,346,1.959,350,0.348,362,0.391,363,0.427,364,0.273,366,0.672,369,0.824,370,0.643,371,0.597,373,0.348,377,0.974,385,0.333,393,1.034,396,0.391,398,0.588,399,0.348,419,0.689,440,0.708,448,2.768,467,0.34,473,2.593,481,0.672,499,0.34,507,1.77,528,0.32,536,0.407,556,0.348,558,0.785,586,0.755,587,0.672,589,0.391,659,0.407,687,0.755,688,0.333,689,0.315,711,0.407,713,0.407,715,0.34,724,0.875,729,1.71,731,3.325,732,1.56,734,0.755,735,0.295,736,0.391,737,0.785,738,0.378,739,0.427,740,0.391,741,0.407,742,0.391,743,0.427,744,0.493,745,0.407,746,0.378,747,0.427,748,1.194,749,1.353,750,0.407,751,0.407,752,0.427,753,0.357,754,0.493,755,0.493,756,0.952,757,0.493,758,0.493,759,0.493,760,0.427,761,0.427,762,0.427,763,0.824,764,0.952,765,0.493,766,0.427,767,0.407,768,0.453,769,0.875,770,0.453,771,0.824,772,0.453,773,1.981,774,0.952,775,1.981,776,2.157,777,1.981,778,0.952,779,0.875,780,2.157,781,1.381,782,0.366,783,0.391,784,0.407,785,0.366,786,0.391,787,0.391,788,0.427,789,0.875,790,0.378,791,0.453,792,0.493,793,0.427,794,0.453,795,0.407,796,0.407,797,0.407,798,0.755,799,1.194,800,0.824,801,1.636,802,3.426,803,1.541,804,2.305,805,1.268,806,1.268,807,0.824,808,0.378,809,2.51]],["component/6",[1,0.233]],["title/7-1",[71,33.783,122,37.633]],["name/7-1",[]],["text/7-1",[]],["component/7-1",[]],["title/7-2",[22,33.393,71,33.783]],["name/7-2",[]],["text/7-2",[]],["component/7-2",[]],["title/7-3",[9,41.15,71,33.783]],["name/7-3",[]],["text/7-3",[]],["component/7-3",[]],["title/7-4",[71,42.883]],["name/7-4",[]],["text/7-4",[]],["component/7-4",[]],["title/7-5",[71,33.783,306,41.15]],["name/7-5",[]],["text/7-5",[]],["component/7-5",[]],["title/7-6",[71,33.783,307,43.011]],["name/7-6",[]],["text/7-6",[]],["component/7-6",[]],["title/7-7",[7,22.994,71,20.642,122,22.994,162,20.642,731,25.143]],["name/7-7",[]],["text/7-7",[]],["component/7-7",[]],["title/7-8",[7,22.994,22,20.403,71,20.642,306,25.143,307,26.28]],["name/7-8",[]],["text/7-8",[]],["component/7-8",[]],["title/7-9",[71,23.717,95,27.792,162,23.717,731,28.889]],["name/7-9",[]],["text/7-9",[]],["component/7-9",[]],["title/7-10",[71,20.642,162,20.642,296,23.366,731,25.143,732,26.942]],["name/7-10",[]],["text/7-10",[]],["component/7-10",[]],["title/7-11",[1,13.423,162,18.272,294,24.509,306,22.257,731,22.257,733,26.143]],["name/7-11",[]],["text/7-11",[]],["component/7-11",[]],["title/7",[71,42.883]],["name/7",[71,0.504]],["text/7",[0,3.511,1,2.843,2,1.811,5,0.928,7,4.074,9,2.809,10,0.424,13,0.459,21,0.477,22,2.971,23,2.181,24,0.424,25,2.181,26,3.265,27,2.181,28,4.517,29,2.181,31,1.69,33,0.542,40,1.587,42,0.583,43,0.542,48,0.999,54,1.299,58,0.424,59,0.89,61,0.418,62,0.477,63,0.451,71,5.542,83,1.587,84,0.512,85,0.512,86,0.512,88,0.444,89,3.36,90,0.561,108,0.451,109,0.367,110,0.397,111,0.989,112,0.526,114,0.973,122,1.188,124,0.542,133,0.407,140,0.612,155,0.561,159,0.407,161,0.561,162,3.42,171,1.228,179,0.477,181,0.468,182,0.755,183,3.122,184,2.677,187,0.424,191,0.583,196,0.407,201,0.686,210,0.424,211,0.402,212,1.73,216,1,225,1.181,232,1.25,234,0.397,239,0.561,243,0.418,252,0.468,256,0.477,268,0.512,278,0.858,287,0.468,292,0.444,294,0.526,296,1.207,306,1.655,307,2.67,313,2.458,315,0.477,326,3.585,327,3.103,339,0.512,340,1.428,341,0.583,342,0.444,343,0.973,344,0.65,345,0.612,346,0.928,347,1.11,348,0.928,349,0.542,350,0.499,351,1.768,352,1.526,353,1.358,354,1.392,355,2.193,356,1.273,357,1.392,358,1.228,362,0.561,363,0.612,364,0.392,365,0.583,366,0.499,369,1.164,370,1.98,371,0.444,373,0.499,374,1.067,377,1.358,384,0.418,394,0.612,398,0.831,419,0.973,453,1.11,456,0.43,473,3.141,474,0.526,481,0.499,499,0.488,528,0.459,536,0.583,550,1.665,558,1.11,575,1.067,576,0.561,577,0.526,660,0.612,720,0.499,731,3.84,732,2.122,746,0.542,749,0.444,750,0.583,751,0.583,766,0.612,767,0.583,768,0.65,769,1.236,770,0.65,771,1.164,772,0.65,782,0.526,783,0.561,784,0.583,785,0.526,786,0.561,787,0.561,788,0.612,789,1.236,790,0.542,791,0.65,793,0.612,794,0.65,796,0.583,797,0.583,798,1.067,799,1.164,800,1.164,808,0.542,810,3.786,811,0.708,812,0.65,813,0.526,814,0.526,815,1.236,816,2.696,817,0.708,818,0.65,819,0.708,820,0.65,821,0.708,822,0.708,823,0.708,824,0.708,825,0.708,826,0.65,827,1.346,828,1.346,829,1.925,830,0.708,831,0.708,832,0.708,833,0.708,834,0.708]],["component/7",[1,0.233]],["title/8-1",[378,31.974,835,60.99]],["name/8-1",[]],["text/8-1",[]],["component/8-1",[]],["title/8-2",[378,31.974,382,35.519]],["name/8-2",[]],["text/8-2",[]],["component/8-2",[]],["title/8-3",[378,31.974,836,52.737]],["name/8-3",[]],["text/8-3",[]],["component/8-3",[]],["title/8-4",[378,31.974,836,52.737]],["name/8-4",[]],["text/8-4",[]],["component/8-4",[]],["title/8-5",[133,18.429,382,35.519]],["name/8-5",[]],["text/8-5",[]],["component/8-5",[]],["title/8-6",[92,46.707,378,31.974]],["name/8-6",[]],["text/8-6",[]],["component/8-6",[]],["title/8",[378,31.974,382,35.519]],["name/8",[378,0.249,382,0.277]],["text/8",[0,1.316,24,1.607,26,0.694,28,4.321,46,0.576,51,1.265,54,0.545,58,1.058,61,1.129,62,0.694,73,0.938,77,1.633,81,2.618,98,2.524,105,3.581,109,3.36,110,3.028,111,1.379,133,0.578,161,0.815,176,2.073,182,1.072,209,0.645,210,1.146,224,0.815,225,3.633,226,0.694,228,1.383,237,2.821,243,1.584,248,1.265,252,2.222,254,0.569,299,2.215,311,0.625,340,1.114,342,1.683,355,3.226,373,3.168,378,4.069,382,3.771,390,2.482,393,0.374,400,0.616,418,1.291,427,3.248,428,0.848,429,0.787,446,0.656,448,2.442,468,0.68,473,1.242,474,1.421,480,0.815,504,1.265,513,0.725,528,0.667,529,0.634,562,0.634,590,2.862,592,0.848,593,6.399,602,2.127,605,2.213,608,0.889,612,2.905,616,2.213,618,0.667,626,2.213,633,2.905,636,0.889,644,1.421,647,0.694,662,0.787,681,0.848,707,1.654,813,0.764,836,0.889,837,0.944,838,1.028,839,3.958,840,1.383,841,0.743,842,1.028,843,3.168,844,4.125,845,2.213,846,3.086,847,3.086,848,2.465,849,0.889,850,1.913,851,0.944,852,1.654,853,0.944,854,1.516,855,1.994,856,1.028,857,2.465,858,2.683,859,1.028,860,0.848,861,1.028,862,3.36,863,0.709,864,0.889,865,1.028,866,1.516,867,0.848,868,1.757,869,1.028,870,1.028,871,0.889,872,1.028,873,1.028,874,0.848,875,1.028,876,0.944,877,0.889,878,0.944,879,1.913,880,1.028,881,1.028,882,1.028,883,1.028,884,0.815,885,1.028,886,1.028,887,0.944,888,1.578,889,1.028,890,0.889,891,1.028,892,0.944]],["component/8",[1,0.233]],["title/9-1",[288,40.175]],["name/9-1",[]],["text/9-1",[]],["component/9-1",[]],["title/9-2",[288,31.649,893,56.014]],["name/9-2",[]],["text/9-2",[]],["component/9-2",[]],["title/9-3",[384,45.705]],["name/9-3",[]],["text/9-3",[]],["component/9-3",[]],["title/9-4",[288,31.649,378,31.974]],["name/9-4",[]],["text/9-4",[]],["component/9-4",[]],["title/9-5",[288,31.649,894,50.289]],["name/9-5",[]],["text/9-5",[]],["component/9-5",[]],["title/9-6",[288,31.649,440,45.313]],["name/9-6",[]],["text/9-6",[]],["component/9-6",[]],["title/9-7",[288,31.649,348,42.036]],["name/9-7",[]],["text/9-7",[]],["component/9-7",[]],["title/9-8",[288,31.649,895,56.014]],["name/9-8",[]],["text/9-8",[]],["component/9-8",[]],["title/9-9",[288,31.649,896,56.014]],["name/9-9",[]],["text/9-9",[]],["component/9-9",[]],["title/9-10",[288,31.649,439,35.055]],["name/9-10",[]],["text/9-10",[]],["component/9-10",[]],["title/9-11",[187,36.519,288,31.649]],["name/9-11",[]],["text/9-11",[]],["component/9-11",[]],["title/9-12",[288,31.649,493,52.737]],["name/9-12",[]],["text/9-12",[]],["component/9-12",[]],["title/9-13",[225,29.38,288,31.649]],["name/9-13",[]],["text/9-13",[]],["component/9-13",[]],["title/9-14",[288,31.649,382,35.519]],["name/9-14",[]],["text/9-14",[]],["component/9-14",[]],["title/9-15",[288,31.649,293,46.707]],["name/9-15",[]],["text/9-15",[]],["component/9-15",[]],["title/9-16",[86,55.972]],["name/9-16",[]],["text/9-16",[]],["component/9-16",[]],["title/9-17",[393,28.175]],["name/9-17",[]],["text/9-17",[]],["component/9-17",[]],["title/9-18",[58,24.371]],["name/9-18",[]],["text/9-18",[]],["component/9-18",[]],["title/9-19",[133,18.429,662,46.707]],["name/9-19",[]],["text/9-19",[]],["component/9-19",[]],["title/9-20",[48,22.883]],["name/9-20",[]],["text/9-20",[]],["component/9-20",[]],["title/9-21",[201,17.052,299,19.938]],["name/9-21",[]],["text/9-21",[]],["component/9-21",[]],["title/9-22",[77,20.034,202,20.948]],["name/9-22",[]],["text/9-22",[]],["component/9-22",[]],["title/9-23",[897,71.103]],["name/9-23",[]],["text/9-23",[]],["component/9-23",[]],["title/9-24",[393,28.175]],["name/9-24",[]],["text/9-24",[]],["component/9-24",[]],["title/9-25",[58,24.371]],["name/9-25",[]],["text/9-25",[]],["component/9-25",[]],["title/9-26",[133,11.261,315,25.143,446,23.763,529,22.994,898,34.225]],["name/9-26",[]],["text/9-26",[]],["component/9-26",[]],["title/9-27",[48,22.883]],["name/9-27",[]],["text/9-27",[]],["component/9-27",[]],["title/9-28",[201,17.052,299,19.938]],["name/9-28",[]],["text/9-28",[]],["component/9-28",[]],["title/9-29",[77,20.034,202,20.948]],["name/9-29",[]],["text/9-29",[]],["component/9-29",[]],["title/9-30",[899,66.943]],["name/9-30",[]],["text/9-30",[]],["component/9-30",[]],["title/9-31",[393,28.175]],["name/9-31",[]],["text/9-31",[]],["component/9-31",[]],["title/9-32",[58,24.371]],["name/9-32",[]],["text/9-32",[]],["component/9-32",[]],["title/9-33",[133,18.429,899,52.737]],["name/9-33",[]],["text/9-33",[]],["component/9-33",[]],["title/9-34",[48,22.883]],["name/9-34",[]],["text/9-34",[]],["component/9-34",[]],["title/9-35",[201,17.052,299,19.938]],["name/9-35",[]],["text/9-35",[]],["component/9-35",[]],["title/9-36",[77,20.034,202,20.948]],["name/9-36",[]],["text/9-36",[]],["component/9-36",[]],["title/9-37",[900,63.836]],["name/9-37",[]],["text/9-37",[]],["component/9-37",[]],["title/9-38",[393,28.175]],["name/9-38",[]],["text/9-38",[]],["component/9-38",[]],["title/9-39",[58,24.371]],["name/9-39",[]],["text/9-39",[]],["component/9-39",[]],["title/9-40",[133,12.938,356,28.318,358,27.304,900,35.305]],["name/9-40",[]],["text/9-40",[]],["component/9-40",[]],["title/9-41",[48,22.883]],["name/9-41",[]],["text/9-41",[]],["component/9-41",[]],["title/9-42",[201,17.052,299,19.938]],["name/9-42",[]],["text/9-42",[]],["component/9-42",[]],["title/9-43",[77,20.034,202,20.948]],["name/9-43",[]],["text/9-43",[]],["component/9-43",[]],["title/9-44",[133,15.203,358,32.083,900,41.485]],["name/9-44",[]],["text/9-44",[]],["component/9-44",[]],["title/9-45",[48,22.883]],["name/9-45",[]],["text/9-45",[]],["component/9-45",[]],["title/9-46",[201,17.052,299,19.938]],["name/9-46",[]],["text/9-46",[]],["component/9-46",[]],["title/9-47",[77,20.034,202,20.948]],["name/9-47",[]],["text/9-47",[]],["component/9-47",[]],["title/9-48",[901,71.103]],["name/9-48",[]],["text/9-48",[]],["component/9-48",[]],["title/9-49",[393,28.175]],["name/9-49",[]],["text/9-49",[]],["component/9-49",[]],["title/9-50",[58,24.371]],["name/9-50",[]],["text/9-50",[]],["component/9-50",[]],["title/9-51",[133,23.394]],["name/9-51",[]],["text/9-51",[]],["component/9-51",[]],["title/9-52",[48,22.883]],["name/9-52",[]],["text/9-52",[]],["component/9-52",[]],["title/9-53",[201,17.052,299,19.938]],["name/9-53",[]],["text/9-53",[]],["component/9-53",[]],["title/9-54",[77,20.034,202,20.948]],["name/9-54",[]],["text/9-54",[]],["component/9-54",[]],["title/9-55",[456,47.043]],["name/9-55",[]],["text/9-55",[]],["component/9-55",[]],["title/9-56",[393,28.175]],["name/9-56",[]],["text/9-56",[]],["component/9-56",[]],["title/9-57",[58,24.371]],["name/9-57",[]],["text/9-57",[]],["component/9-57",[]],["title/9-58",[133,18.429,456,37.06]],["name/9-58",[]],["text/9-58",[]],["component/9-58",[]],["title/9-59",[48,22.883]],["name/9-59",[]],["text/9-59",[]],["component/9-59",[]],["title/9-60",[201,17.052,299,19.938]],["name/9-60",[]],["text/9-60",[]],["component/9-60",[]],["title/9-61",[77,20.034,202,20.948]],["name/9-61",[]],["text/9-61",[]],["component/9-61",[]],["title/9-62",[902,71.103]],["name/9-62",[]],["text/9-62",[]],["component/9-62",[]],["title/9-63",[393,28.175]],["name/9-63",[]],["text/9-63",[]],["component/9-63",[]],["title/9-64",[58,24.371]],["name/9-64",[]],["text/9-64",[]],["component/9-64",[]],["title/9-65",[133,18.429,456,37.06]],["name/9-65",[]],["text/9-65",[]],["component/9-65",[]],["title/9-66",[48,22.883]],["name/9-66",[]],["text/9-66",[]],["component/9-66",[]],["title/9-67",[201,17.052,299,19.938]],["name/9-67",[]],["text/9-67",[]],["component/9-67",[]],["title/9-68",[77,20.034,202,20.948]],["name/9-68",[]],["text/9-68",[]],["component/9-68",[]],["title/9-69",[494,57.52]],["name/9-69",[]],["text/9-69",[]],["component/9-69",[]],["title/9-70",[58,24.371]],["name/9-70",[]],["text/9-70",[]],["component/9-70",[]],["title/9-71",[133,12.938,378,22.447,382,24.936,494,31.812]],["name/9-71",[]],["text/9-71",[]],["component/9-71",[]],["title/9-72",[48,22.883]],["name/9-72",[]],["text/9-72",[]],["component/9-72",[]],["title/9-73",[201,17.052,299,19.938]],["name/9-73",[]],["text/9-73",[]],["component/9-73",[]],["title/9-74",[77,20.034,202,20.948]],["name/9-74",[]],["text/9-74",[]],["component/9-74",[]],["title/9-75",[133,15.203,364,27.869,494,37.381]],["name/9-75",[]],["text/9-75",[]],["component/9-75",[]],["title/9-76",[48,22.883]],["name/9-76",[]],["text/9-76",[]],["component/9-76",[]],["title/9-77",[201,17.052,299,19.938]],["name/9-77",[]],["text/9-77",[]],["component/9-77",[]],["title/9-78",[77,20.034,202,20.948]],["name/9-78",[]],["text/9-78",[]],["component/9-78",[]],["title/9-79",[903,71.103]],["name/9-79",[]],["text/9-79",[]],["component/9-79",[]],["title/9-80",[393,28.175]],["name/9-80",[]],["text/9-80",[]],["component/9-80",[]],["title/9-81",[58,24.371]],["name/9-81",[]],["text/9-81",[]],["component/9-81",[]],["title/9-82",[133,15.203,529,31.045,904,36.375]],["name/9-82",[]],["text/9-82",[]],["component/9-82",[]],["title/9-83",[48,22.883]],["name/9-83",[]],["text/9-83",[]],["component/9-83",[]],["title/9-84",[201,17.052,299,19.938]],["name/9-84",[]],["text/9-84",[]],["component/9-84",[]],["title/9-85",[77,20.034,202,20.948]],["name/9-85",[]],["text/9-85",[]],["component/9-85",[]],["title/9-86",[905,71.103]],["name/9-86",[]],["text/9-86",[]],["component/9-86",[]],["title/9-87",[393,28.175]],["name/9-87",[]],["text/9-87",[]],["component/9-87",[]],["title/9-88",[58,24.371]],["name/9-88",[]],["text/9-88",[]],["component/9-88",[]],["title/9-89",[133,11.261,381,24.189,529,22.994,904,26.942,906,28.538]],["name/9-89",[]],["text/9-89",[]],["component/9-89",[]],["title/9-90",[48,22.883]],["name/9-90",[]],["text/9-90",[]],["component/9-90",[]],["title/9-91",[201,17.052,299,19.938]],["name/9-91",[]],["text/9-91",[]],["component/9-91",[]],["title/9-92",[77,20.034,202,20.948]],["name/9-92",[]],["text/9-92",[]],["component/9-92",[]],["title/9-93",[907,71.103]],["name/9-93",[]],["text/9-93",[]],["component/9-93",[]],["title/9-94",[393,28.175]],["name/9-94",[]],["text/9-94",[]],["component/9-94",[]],["title/9-95",[58,24.371]],["name/9-95",[]],["text/9-95",[]],["component/9-95",[]],["title/9-96",[133,15.203,418,33.946,529,31.045]],["name/9-96",[]],["text/9-96",[]],["component/9-96",[]],["title/9-97",[48,22.883]],["name/9-97",[]],["text/9-97",[]],["component/9-97",[]],["title/9-98",[201,17.052,299,19.938]],["name/9-98",[]],["text/9-98",[]],["component/9-98",[]],["title/9-99",[77,20.034,202,20.948]],["name/9-99",[]],["text/9-99",[]],["component/9-99",[]],["title/9-100",[908,71.103]],["name/9-100",[]],["text/9-100",[]],["component/9-100",[]],["title/9-101",[393,28.175]],["name/9-101",[]],["text/9-101",[]],["component/9-101",[]],["title/9-102",[58,24.371]],["name/9-102",[]],["text/9-102",[]],["component/9-102",[]],["title/9-103",[133,11.261,381,24.189,418,25.143,529,22.994,906,28.538]],["name/9-103",[]],["text/9-103",[]],["component/9-103",[]],["title/9-104",[48,22.883]],["name/9-104",[]],["text/9-104",[]],["component/9-104",[]],["title/9-105",[201,17.052,299,19.938]],["name/9-105",[]],["text/9-105",[]],["component/9-105",[]],["title/9-106",[77,20.034,202,20.948]],["name/9-106",[]],["text/9-106",[]],["component/9-106",[]],["title/9-107",[529,47.771]],["name/9-107",[]],["text/9-107",[]],["component/9-107",[]],["title/9-108",[393,28.175]],["name/9-108",[]],["text/9-108",[]],["component/9-108",[]],["title/9-109",[58,24.371]],["name/9-109",[]],["text/9-109",[]],["component/9-109",[]],["title/9-110",[114,26.942,133,11.261,315,25.143,446,23.763,529,22.994]],["name/9-110",[]],["text/9-110",[]],["component/9-110",[]],["title/9-111",[48,22.883]],["name/9-111",[]],["text/9-111",[]],["component/9-111",[]],["title/9-112",[201,17.052,299,19.938]],["name/9-112",[]],["text/9-112",[]],["component/9-112",[]],["title/9-113",[77,20.034,202,20.948]],["name/9-113",[]],["text/9-113",[]],["component/9-113",[]],["title/9-114",[909,71.103]],["name/9-114",[]],["text/9-114",[]],["component/9-114",[]],["title/9-115",[393,28.175]],["name/9-115",[]],["text/9-115",[]],["component/9-115",[]],["title/9-116",[58,24.371]],["name/9-116",[]],["text/9-116",[]],["component/9-116",[]],["title/9-117",[133,15.203,529,31.045,554,30.572]],["name/9-117",[]],["text/9-117",[]],["component/9-117",[]],["title/9-118",[48,22.883]],["name/9-118",[]],["text/9-118",[]],["component/9-118",[]],["title/9-119",[201,17.052,299,19.938]],["name/9-119",[]],["text/9-119",[]],["component/9-119",[]],["title/9-120",[77,20.034,202,20.948]],["name/9-120",[]],["text/9-120",[]],["component/9-120",[]],["title/9-121",[910,71.103]],["name/9-121",[]],["text/9-121",[]],["component/9-121",[]],["title/9-122",[393,28.175]],["name/9-122",[]],["text/9-122",[]],["component/9-122",[]],["title/9-123",[58,24.371]],["name/9-123",[]],["text/9-123",[]],["component/9-123",[]],["title/9-124",[133,18.429,911,56.014]],["name/9-124",[]],["text/9-124",[]],["component/9-124",[]],["title/9-125",[48,22.883]],["name/9-125",[]],["text/9-125",[]],["component/9-125",[]],["title/9-126",[201,17.052,299,19.938]],["name/9-126",[]],["text/9-126",[]],["component/9-126",[]],["title/9-127",[77,20.034,202,20.948]],["name/9-127",[]],["text/9-127",[]],["component/9-127",[]],["title/9-128",[]],["name/9-128",[]],["text/9-128",[]],["component/9-128",[]],["title/9-129",[393,28.175]],["name/9-129",[]],["text/9-129",[]],["component/9-129",[]],["title/9-130",[58,24.371]],["name/9-130",[]],["text/9-130",[]],["component/9-130",[]],["title/9-131",[109,19.338,133,11.261,553,30.727,554,22.644,562,22.994]],["name/9-131",[]],["text/9-131",[]],["component/9-131",[]],["title/9-132",[48,22.883]],["name/9-132",[]],["text/9-132",[]],["component/9-132",[]],["title/9-133",[201,17.052,299,19.938]],["name/9-133",[]],["text/9-133",[]],["component/9-133",[]],["title/9-134",[77,20.034,202,20.948]],["name/9-134",[]],["text/9-134",[]],["component/9-134",[]],["title/9-135",[46,24.002,98,27.304,109,22.219,133,12.938]],["name/9-135",[]],["text/9-135",[]],["component/9-135",[]],["title/9-136",[48,22.883]],["name/9-136",[]],["text/9-136",[]],["component/9-136",[]],["title/9-137",[201,17.052,299,19.938]],["name/9-137",[]],["text/9-137",[]],["component/9-137",[]],["title/9-138",[77,20.034,202,20.948]],["name/9-138",[]],["text/9-138",[]],["component/9-138",[]],["title/9-139",[912,66.943]],["name/9-139",[]],["text/9-139",[]],["component/9-139",[]],["title/9-140",[393,28.175]],["name/9-140",[]],["text/9-140",[]],["component/9-140",[]],["title/9-141",[58,24.371]],["name/9-141",[]],["text/9-141",[]],["component/9-141",[]],["title/9-142",[133,18.429,913,45.313]],["name/9-142",[]],["text/9-142",[]],["component/9-142",[]],["title/9-143",[48,22.883]],["name/9-143",[]],["text/9-143",[]],["component/9-143",[]],["title/9-144",[201,17.052,299,19.938]],["name/9-144",[]],["text/9-144",[]],["component/9-144",[]],["title/9-145",[77,20.034,202,20.948]],["name/9-145",[]],["text/9-145",[]],["component/9-145",[]],["title/9-146",[914,71.103]],["name/9-146",[]],["text/9-146",[]],["component/9-146",[]],["title/9-147",[393,28.175]],["name/9-147",[]],["text/9-147",[]],["component/9-147",[]],["title/9-148",[58,24.371]],["name/9-148",[]],["text/9-148",[]],["component/9-148",[]],["title/9-149",[133,18.429,915,56.014]],["name/9-149",[]],["text/9-149",[]],["component/9-149",[]],["title/9-150",[48,22.883]],["name/9-150",[]],["text/9-150",[]],["component/9-150",[]],["title/9-151",[201,17.052,299,19.938]],["name/9-151",[]],["text/9-151",[]],["component/9-151",[]],["title/9-152",[77,20.034,202,20.948]],["name/9-152",[]],["text/9-152",[]],["component/9-152",[]],["title/9-153",[557,57.52]],["name/9-153",[]],["text/9-153",[]],["component/9-153",[]],["title/9-154",[393,28.175]],["name/9-154",[]],["text/9-154",[]],["component/9-154",[]],["title/9-155",[58,24.371]],["name/9-155",[]],["text/9-155",[]],["component/9-155",[]],["title/9-156",[43,38.53,133,15.203,439,28.918]],["name/9-156",[]],["text/9-156",[]],["component/9-156",[]],["title/9-157",[48,22.883]],["name/9-157",[]],["text/9-157",[]],["component/9-157",[]],["title/9-158",[201,17.052,299,19.938]],["name/9-158",[]],["text/9-158",[]],["component/9-158",[]],["title/9-159",[77,20.034,202,20.948]],["name/9-159",[]],["text/9-159",[]],["component/9-159",[]],["title/9-160",[61,45.705]],["name/9-160",[]],["text/9-160",[]],["component/9-160",[]],["title/9-161",[393,28.175]],["name/9-161",[]],["text/9-161",[]],["component/9-161",[]],["title/9-162",[58,24.371]],["name/9-162",[]],["text/9-162",[]],["component/9-162",[]],["title/9-163",[61,36.006,133,18.429]],["name/9-163",[]],["text/9-163",[]],["component/9-163",[]],["title/9-164",[48,22.883]],["name/9-164",[]],["text/9-164",[]],["component/9-164",[]],["title/9-165",[201,17.052,299,19.938]],["name/9-165",[]],["text/9-165",[]],["component/9-165",[]],["title/9-166",[77,20.034,202,20.948]],["name/9-166",[]],["text/9-166",[]],["component/9-166",[]],["title/9-167",[916,66.943]],["name/9-167",[]],["text/9-167",[]],["component/9-167",[]],["title/9-168",[393,28.175]],["name/9-168",[]],["text/9-168",[]],["component/9-168",[]],["title/9-169",[58,24.371]],["name/9-169",[]],["text/9-169",[]],["component/9-169",[]],["title/9-170",[133,18.429,916,52.737]],["name/9-170",[]],["text/9-170",[]],["component/9-170",[]],["title/9-171",[48,22.883]],["name/9-171",[]],["text/9-171",[]],["component/9-171",[]],["title/9-172",[201,17.052,299,19.938]],["name/9-172",[]],["text/9-172",[]],["component/9-172",[]],["title/9-173",[77,20.034,202,20.948]],["name/9-173",[]],["text/9-173",[]],["component/9-173",[]],["title/9-174",[917,71.103]],["name/9-174",[]],["text/9-174",[]],["component/9-174",[]],["title/9-175",[393,28.175]],["name/9-175",[]],["text/9-175",[]],["component/9-175",[]],["title/9-176",[58,24.371]],["name/9-176",[]],["text/9-176",[]],["component/9-176",[]],["title/9-177",[133,18.429,430,48.334]],["name/9-177",[]],["text/9-177",[]],["component/9-177",[]],["title/9-178",[48,22.883]],["name/9-178",[]],["text/9-178",[]],["component/9-178",[]],["title/9-179",[201,17.052,299,19.938]],["name/9-179",[]],["text/9-179",[]],["component/9-179",[]],["title/9-180",[77,20.034,202,20.948]],["name/9-180",[]],["text/9-180",[]],["component/9-180",[]],["title/9-181",[918,71.103]],["name/9-181",[]],["text/9-181",[]],["component/9-181",[]],["title/9-182",[393,28.175]],["name/9-182",[]],["text/9-182",[]],["component/9-182",[]],["title/9-183",[58,24.371]],["name/9-183",[]],["text/9-183",[]],["component/9-183",[]],["title/9-184",[133,15.203,430,39.873,913,37.381]],["name/9-184",[]],["text/9-184",[]],["component/9-184",[]],["title/9-185",[48,22.883]],["name/9-185",[]],["text/9-185",[]],["component/9-185",[]],["title/9-186",[201,17.052,299,19.938]],["name/9-186",[]],["text/9-186",[]],["component/9-186",[]],["title/9-187",[77,20.034,202,20.948]],["name/9-187",[]],["text/9-187",[]],["component/9-187",[]],["title/9-188",[919,63.836]],["name/9-188",[]],["text/9-188",[]],["component/9-188",[]],["title/9-189",[393,28.175]],["name/9-189",[]],["text/9-189",[]],["component/9-189",[]],["title/9-190",[58,24.371]],["name/9-190",[]],["text/9-190",[]],["component/9-190",[]],["title/9-191",[133,15.203,187,30.126,919,41.485]],["name/9-191",[]],["text/9-191",[]],["component/9-191",[]],["title/9-192",[48,22.883]],["name/9-192",[]],["text/9-192",[]],["component/9-192",[]],["title/9-193",[201,17.052,299,19.938]],["name/9-193",[]],["text/9-193",[]],["component/9-193",[]],["title/9-194",[77,20.034,202,20.948]],["name/9-194",[]],["text/9-194",[]],["component/9-194",[]],["title/9-195",[133,15.203,229,38.53,919,41.485]],["name/9-195",[]],["text/9-195",[]],["component/9-195",[]],["title/9-196",[48,22.883]],["name/9-196",[]],["text/9-196",[]],["component/9-196",[]],["title/9-197",[201,17.052,299,19.938]],["name/9-197",[]],["text/9-197",[]],["component/9-197",[]],["title/9-198",[77,20.034,202,20.948]],["name/9-198",[]],["text/9-198",[]],["component/9-198",[]],["title/9-199",[547,57.52]],["name/9-199",[]],["text/9-199",[]],["component/9-199",[]],["title/9-200",[58,24.371]],["name/9-200",[]],["text/9-200",[]],["component/9-200",[]],["title/9-201",[133,12.938,378,22.447,382,24.936,547,31.812]],["name/9-201",[]],["text/9-201",[]],["component/9-201",[]],["title/9-202",[48,22.883]],["name/9-202",[]],["text/9-202",[]],["component/9-202",[]],["title/9-203",[201,17.052,299,19.938]],["name/9-203",[]],["text/9-203",[]],["component/9-203",[]],["title/9-204",[77,20.034,202,20.948]],["name/9-204",[]],["text/9-204",[]],["component/9-204",[]],["title/9-205",[133,15.203,364,27.869,547,37.381]],["name/9-205",[]],["text/9-205",[]],["component/9-205",[]],["title/9-206",[48,22.883]],["name/9-206",[]],["text/9-206",[]],["component/9-206",[]],["title/9-207",[201,17.052,299,19.938]],["name/9-207",[]],["text/9-207",[]],["component/9-207",[]],["title/9-208",[77,20.034,202,20.948]],["name/9-208",[]],["text/9-208",[]],["component/9-208",[]],["title/9-209",[]],["name/9-209",[]],["text/9-209",[]],["component/9-209",[]],["title/9-210",[393,28.175]],["name/9-210",[]],["text/9-210",[]],["component/9-210",[]],["title/9-211",[58,24.371]],["name/9-211",[]],["text/9-211",[]],["component/9-211",[]],["title/9-212",[133,23.394]],["name/9-212",[]],["text/9-212",[]],["component/9-212",[]],["title/9-213",[48,22.883]],["name/9-213",[]],["text/9-213",[]],["component/9-213",[]],["title/9-214",[201,17.052,299,19.938]],["name/9-214",[]],["text/9-214",[]],["component/9-214",[]],["title/9-215",[77,20.034,202,20.948]],["name/9-215",[]],["text/9-215",[]],["component/9-215",[]],["title/9-216",[920,71.103]],["name/9-216",[]],["text/9-216",[]],["component/9-216",[]],["title/9-217",[393,28.175]],["name/9-217",[]],["text/9-217",[]],["component/9-217",[]],["title/9-218",[58,24.371]],["name/9-218",[]],["text/9-218",[]],["component/9-218",[]],["title/9-219",[133,18.429,813,45.313]],["name/9-219",[]],["text/9-219",[]],["component/9-219",[]],["title/9-220",[48,22.883]],["name/9-220",[]],["text/9-220",[]],["component/9-220",[]],["title/9-221",[201,17.052,299,19.938]],["name/9-221",[]],["text/9-221",[]],["component/9-221",[]],["title/9-222",[77,20.034,202,20.948]],["name/9-222",[]],["text/9-222",[]],["component/9-222",[]],["title/9-223",[99,61.355]],["name/9-223",[]],["text/9-223",[]],["component/9-223",[]],["title/9-224",[393,28.175]],["name/9-224",[]],["text/9-224",[]],["component/9-224",[]],["title/9-225",[58,24.371]],["name/9-225",[]],["text/9-225",[]],["component/9-225",[]],["title/9-226",[99,33.932,133,12.938,239,33.932,749,26.847]],["name/9-226",[]],["text/9-226",[]],["component/9-226",[]],["title/9-227",[48,22.883]],["name/9-227",[]],["text/9-227",[]],["component/9-227",[]],["title/9-228",[201,17.052,299,19.938]],["name/9-228",[]],["text/9-228",[]],["component/9-228",[]],["title/9-229",[77,20.034,202,20.948]],["name/9-229",[]],["text/9-229",[]],["component/9-229",[]],["title/9-230",[921,63.836]],["name/9-230",[]],["text/9-230",[]],["component/9-230",[]],["title/9-231",[393,28.175]],["name/9-231",[]],["text/9-231",[]],["component/9-231",[]],["title/9-232",[58,24.371]],["name/9-232",[]],["text/9-232",[]],["component/9-232",[]],["title/9-233",[109,22.219,133,12.938,693,30.956,921,35.305]],["name/9-233",[]],["text/9-233",[]],["component/9-233",[]],["title/9-234",[48,22.883]],["name/9-234",[]],["text/9-234",[]],["component/9-234",[]],["title/9-235",[201,17.052,299,19.938]],["name/9-235",[]],["text/9-235",[]],["component/9-235",[]],["title/9-236",[77,20.034,202,20.948]],["name/9-236",[]],["text/9-236",[]],["component/9-236",[]],["title/9-237",[133,12.938,313,25.278,513,30.195,921,35.305]],["name/9-237",[]],["text/9-237",[]],["component/9-237",[]],["title/9-238",[48,22.883]],["name/9-238",[]],["text/9-238",[]],["component/9-238",[]],["title/9-239",[201,17.052,299,19.938]],["name/9-239",[]],["text/9-239",[]],["component/9-239",[]],["title/9-240",[77,20.034,202,20.948]],["name/9-240",[]],["text/9-240",[]],["component/9-240",[]],["title/9-241",[922,54.597]],["name/9-241",[]],["text/9-241",[]],["component/9-241",[]],["title/9-242",[393,28.175]],["name/9-242",[]],["text/9-242",[]],["component/9-242",[]],["title/9-243",[58,24.371]],["name/9-243",[]],["text/9-243",[]],["component/9-243",[]],["title/9-244",[133,18.429,922,43.011]],["name/9-244",[]],["text/9-244",[]],["component/9-244",[]],["title/9-245",[48,22.883]],["name/9-245",[]],["text/9-245",[]],["component/9-245",[]],["title/9-246",[201,17.052,299,19.938]],["name/9-246",[]],["text/9-246",[]],["component/9-246",[]],["title/9-247",[77,20.034,202,20.948]],["name/9-247",[]],["text/9-247",[]],["component/9-247",[]],["title/9-248",[923,71.103]],["name/9-248",[]],["text/9-248",[]],["component/9-248",[]],["title/9-249",[393,28.175]],["name/9-249",[]],["text/9-249",[]],["component/9-249",[]],["title/9-250",[58,24.371]],["name/9-250",[]],["text/9-250",[]],["component/9-250",[]],["title/9-251",[133,15.203,187,30.126,924,46.208]],["name/9-251",[]],["text/9-251",[]],["component/9-251",[]],["title/9-252",[48,22.883]],["name/9-252",[]],["text/9-252",[]],["component/9-252",[]],["title/9-253",[201,17.052,299,19.938]],["name/9-253",[]],["text/9-253",[]],["component/9-253",[]],["title/9-254",[77,20.034,202,20.948]],["name/9-254",[]],["text/9-254",[]],["component/9-254",[]],["title/9-255",[925,71.103]],["name/9-255",[]],["text/9-255",[]],["component/9-255",[]],["title/9-256",[393,28.175]],["name/9-256",[]],["text/9-256",[]],["component/9-256",[]],["title/9-257",[58,24.371]],["name/9-257",[]],["text/9-257",[]],["component/9-257",[]],["title/9-258",[133,18.429,348,42.036]],["name/9-258",[]],["text/9-258",[]],["component/9-258",[]],["title/9-259",[48,22.883]],["name/9-259",[]],["text/9-259",[]],["component/9-259",[]],["title/9-260",[201,17.052,299,19.938]],["name/9-260",[]],["text/9-260",[]],["component/9-260",[]],["title/9-261",[77,20.034,202,20.948]],["name/9-261",[]],["text/9-261",[]],["component/9-261",[]],["title/9-262",[926,71.103]],["name/9-262",[]],["text/9-262",[]],["component/9-262",[]],["title/9-263",[393,28.175]],["name/9-263",[]],["text/9-263",[]],["component/9-263",[]],["title/9-264",[58,24.371]],["name/9-264",[]],["text/9-264",[]],["component/9-264",[]],["title/9-265",[133,18.429,348,42.036]],["name/9-265",[]],["text/9-265",[]],["component/9-265",[]],["title/9-266",[48,22.883]],["name/9-266",[]],["text/9-266",[]],["component/9-266",[]],["title/9-267",[201,17.052,299,19.938]],["name/9-267",[]],["text/9-267",[]],["component/9-267",[]],["title/9-268",[77,20.034,202,20.948]],["name/9-268",[]],["text/9-268",[]],["component/9-268",[]],["title/9-269",[512,54.597]],["name/9-269",[]],["text/9-269",[]],["component/9-269",[]],["title/9-270",[393,28.175]],["name/9-270",[]],["text/9-270",[]],["component/9-270",[]],["title/9-271",[58,24.371]],["name/9-271",[]],["text/9-271",[]],["component/9-271",[]],["title/9-272",[133,18.429,512,43.011]],["name/9-272",[]],["text/9-272",[]],["component/9-272",[]],["title/9-273",[48,22.883]],["name/9-273",[]],["text/9-273",[]],["component/9-273",[]],["title/9-274",[201,17.052,927,56.014]],["name/9-274",[]],["text/9-274",[]],["component/9-274",[]],["title/9-275",[201,17.052,928,56.014]],["name/9-275",[]],["text/9-275",[]],["component/9-275",[]],["title/9-276",[77,20.034,202,20.948]],["name/9-276",[]],["text/9-276",[]],["component/9-276",[]],["title/9-277",[929,63.836]],["name/9-277",[]],["text/9-277",[]],["component/9-277",[]],["title/9-278",[393,28.175]],["name/9-278",[]],["text/9-278",[]],["component/9-278",[]],["title/9-279",[58,24.371]],["name/9-279",[]],["text/9-279",[]],["component/9-279",[]],["title/9-280",[133,15.203,342,31.547,929,41.485]],["name/9-280",[]],["text/9-280",[]],["component/9-280",[]],["title/9-281",[48,22.883]],["name/9-281",[]],["text/9-281",[]],["component/9-281",[]],["title/9-282",[201,17.052,299,19.938]],["name/9-282",[]],["text/9-282",[]],["component/9-282",[]],["title/9-283",[77,20.034,202,20.948]],["name/9-283",[]],["text/9-283",[]],["component/9-283",[]],["title/9-284",[930,71.103]],["name/9-284",[]],["text/9-284",[]],["component/9-284",[]],["title/9-285",[393,28.175]],["name/9-285",[]],["text/9-285",[]],["component/9-285",[]],["title/9-286",[58,24.371]],["name/9-286",[]],["text/9-286",[]],["component/9-286",[]],["title/9-287",[133,18.429,931,48.334]],["name/9-287",[]],["text/9-287",[]],["component/9-287",[]],["title/9-288",[48,22.883]],["name/9-288",[]],["text/9-288",[]],["component/9-288",[]],["title/9-289",[201,17.052,299,19.938]],["name/9-289",[]],["text/9-289",[]],["component/9-289",[]],["title/9-290",[77,20.034,202,20.948]],["name/9-290",[]],["text/9-290",[]],["component/9-290",[]],["title/9-291",[932,71.103]],["name/9-291",[]],["text/9-291",[]],["component/9-291",[]],["title/9-292",[393,28.175]],["name/9-292",[]],["text/9-292",[]],["component/9-292",[]],["title/9-293",[58,24.371]],["name/9-293",[]],["text/9-293",[]],["component/9-293",[]],["title/9-294",[133,15.203,913,37.381,931,39.873]],["name/9-294",[]],["text/9-294",[]],["component/9-294",[]],["title/9-295",[48,22.883]],["name/9-295",[]],["text/9-295",[]],["component/9-295",[]],["title/9-296",[201,17.052,299,19.938]],["name/9-296",[]],["text/9-296",[]],["component/9-296",[]],["title/9-297",[77,20.034,202,20.948]],["name/9-297",[]],["text/9-297",[]],["component/9-297",[]],["title/9-298",[356,51.204]],["name/9-298",[]],["text/9-298",[]],["component/9-298",[]],["title/9-299",[393,28.175]],["name/9-299",[]],["text/9-299",[]],["component/9-299",[]],["title/9-300",[58,24.371]],["name/9-300",[]],["text/9-300",[]],["component/9-300",[]],["title/9-301",[133,18.429,445,52.737]],["name/9-301",[]],["text/9-301",[]],["component/9-301",[]],["title/9-302",[48,22.883]],["name/9-302",[]],["text/9-302",[]],["component/9-302",[]],["title/9-303",[201,17.052,299,19.938]],["name/9-303",[]],["text/9-303",[]],["component/9-303",[]],["title/9-304",[77,20.034,202,20.948]],["name/9-304",[]],["text/9-304",[]],["component/9-304",[]],["title/9-305",[504,51.204]],["name/9-305",[]],["text/9-305",[]],["component/9-305",[]],["title/9-306",[393,28.175]],["name/9-306",[]],["text/9-306",[]],["component/9-306",[]],["title/9-307",[58,24.371]],["name/9-307",[]],["text/9-307",[]],["component/9-307",[]],["title/9-308",[133,18.429,504,40.338]],["name/9-308",[]],["text/9-308",[]],["component/9-308",[]],["title/9-309",[48,22.883]],["name/9-309",[]],["text/9-309",[]],["component/9-309",[]],["title/9-310",[201,17.052,299,19.938]],["name/9-310",[]],["text/9-310",[]],["component/9-310",[]],["title/9-311",[77,20.034,202,20.948]],["name/9-311",[]],["text/9-311",[]],["component/9-311",[]],["title/9-312",[358,49.369]],["name/9-312",[]],["text/9-312",[]],["component/9-312",[]],["title/9-313",[393,28.175]],["name/9-313",[]],["text/9-313",[]],["component/9-313",[]],["title/9-314",[58,24.371]],["name/9-314",[]],["text/9-314",[]],["component/9-314",[]],["title/9-315",[133,18.429,657,52.737]],["name/9-315",[]],["text/9-315",[]],["component/9-315",[]],["title/9-316",[48,22.883]],["name/9-316",[]],["text/9-316",[]],["component/9-316",[]],["title/9-317",[201,17.052,299,19.938]],["name/9-317",[]],["text/9-317",[]],["component/9-317",[]],["title/9-318",[77,20.034,202,20.948]],["name/9-318",[]],["text/9-318",[]],["component/9-318",[]],["title/9-319",[933,57.52]],["name/9-319",[]],["text/9-319",[]],["component/9-319",[]],["title/9-320",[58,24.371]],["name/9-320",[]],["text/9-320",[]],["component/9-320",[]],["title/9-321",[133,12.938,378,22.447,382,24.936,933,31.812]],["name/9-321",[]],["text/9-321",[]],["component/9-321",[]],["title/9-322",[48,22.883]],["name/9-322",[]],["text/9-322",[]],["component/9-322",[]],["title/9-323",[201,17.052,299,19.938]],["name/9-323",[]],["text/9-323",[]],["component/9-323",[]],["title/9-324",[77,20.034,202,20.948]],["name/9-324",[]],["text/9-324",[]],["component/9-324",[]],["title/9-325",[133,15.203,364,27.869,933,37.381]],["name/9-325",[]],["text/9-325",[]],["component/9-325",[]],["title/9-326",[48,22.883]],["name/9-326",[]],["text/9-326",[]],["component/9-326",[]],["title/9-327",[201,17.052,299,19.938]],["name/9-327",[]],["text/9-327",[]],["component/9-327",[]],["title/9-328",[77,20.034,202,20.948]],["name/9-328",[]],["text/9-328",[]],["component/9-328",[]],["title/9-329",[934,71.103]],["name/9-329",[]],["text/9-329",[]],["component/9-329",[]],["title/9-330",[393,28.175]],["name/9-330",[]],["text/9-330",[]],["component/9-330",[]],["title/9-331",[58,24.371]],["name/9-331",[]],["text/9-331",[]],["component/9-331",[]],["title/9-332",[133,15.203,418,33.946,904,36.375]],["name/9-332",[]],["text/9-332",[]],["component/9-332",[]],["title/9-333",[48,22.883]],["name/9-333",[]],["text/9-333",[]],["component/9-333",[]],["title/9-334",[201,17.052,299,19.938]],["name/9-334",[]],["text/9-334",[]],["component/9-334",[]],["title/9-335",[77,20.034,202,20.948]],["name/9-335",[]],["text/9-335",[]],["component/9-335",[]],["title/9-336",[935,71.103]],["name/9-336",[]],["text/9-336",[]],["component/9-336",[]],["title/9-337",[393,28.175]],["name/9-337",[]],["text/9-337",[]],["component/9-337",[]],["title/9-338",[58,24.371]],["name/9-338",[]],["text/9-338",[]],["component/9-338",[]],["title/9-339",[133,11.261,381,24.189,418,25.143,904,26.942,906,28.538]],["name/9-339",[]],["text/9-339",[]],["component/9-339",[]],["title/9-340",[48,22.883]],["name/9-340",[]],["text/9-340",[]],["component/9-340",[]],["title/9-341",[201,17.052,299,19.938]],["name/9-341",[]],["text/9-341",[]],["component/9-341",[]],["title/9-342",[77,20.034,202,20.948]],["name/9-342",[]],["text/9-342",[]],["component/9-342",[]],["title/9-343",[936,63.836]],["name/9-343",[]],["text/9-343",[]],["component/9-343",[]],["title/9-344",[58,24.371]],["name/9-344",[]],["text/9-344",[]],["component/9-344",[]],["title/9-345",[133,12.938,378,22.447,382,24.936,936,35.305]],["name/9-345",[]],["text/9-345",[]],["component/9-345",[]],["title/9-346",[48,22.883]],["name/9-346",[]],["text/9-346",[]],["component/9-346",[]],["title/9-347",[201,17.052,299,19.938]],["name/9-347",[]],["text/9-347",[]],["component/9-347",[]],["title/9-348",[77,20.034,202,20.948]],["name/9-348",[]],["text/9-348",[]],["component/9-348",[]],["title/9-349",[133,15.203,364,27.869,936,41.485]],["name/9-349",[]],["text/9-349",[]],["component/9-349",[]],["title/9-350",[48,22.883]],["name/9-350",[]],["text/9-350",[]],["component/9-350",[]],["title/9-351",[201,17.052,299,19.938]],["name/9-351",[]],["text/9-351",[]],["component/9-351",[]],["title/9-352",[77,20.034,202,20.948]],["name/9-352",[]],["text/9-352",[]],["component/9-352",[]],["title/9-353",[904,55.972]],["name/9-353",[]],["text/9-353",[]],["component/9-353",[]],["title/9-354",[393,28.175]],["name/9-354",[]],["text/9-354",[]],["component/9-354",[]],["title/9-355",[58,24.371]],["name/9-355",[]],["text/9-355",[]],["component/9-355",[]],["title/9-356",[133,23.394]],["name/9-356",[]],["text/9-356",[]],["component/9-356",[]],["title/9-357",[48,22.883]],["name/9-357",[]],["text/9-357",[]],["component/9-357",[]],["title/9-358",[201,17.052,299,19.938]],["name/9-358",[]],["text/9-358",[]],["component/9-358",[]],["title/9-359",[77,20.034,202,20.948]],["name/9-359",[]],["text/9-359",[]],["component/9-359",[]],["title/9-360",[937,71.103]],["name/9-360",[]],["text/9-360",[]],["component/9-360",[]],["title/9-361",[393,28.175]],["name/9-361",[]],["text/9-361",[]],["component/9-361",[]],["title/9-362",[58,24.371]],["name/9-362",[]],["text/9-362",[]],["component/9-362",[]],["title/9-363",[133,15.203,554,30.572,904,36.375]],["name/9-363",[]],["text/9-363",[]],["component/9-363",[]],["title/9-364",[48,22.883]],["name/9-364",[]],["text/9-364",[]],["component/9-364",[]],["title/9-365",[201,17.052,299,19.938]],["name/9-365",[]],["text/9-365",[]],["component/9-365",[]],["title/9-366",[77,20.034,202,20.948]],["name/9-366",[]],["text/9-366",[]],["component/9-366",[]],["title/9-367",[938,71.103]],["name/9-367",[]],["text/9-367",[]],["component/9-367",[]],["title/9-368",[393,28.175]],["name/9-368",[]],["text/9-368",[]],["component/9-368",[]],["title/9-369",[58,24.371]],["name/9-369",[]],["text/9-369",[]],["component/9-369",[]],["title/9-370",[133,18.429,209,38.242]],["name/9-370",[]],["text/9-370",[]],["component/9-370",[]],["title/9-371",[48,22.883]],["name/9-371",[]],["text/9-371",[]],["component/9-371",[]],["title/9-372",[201,17.052,299,19.938]],["name/9-372",[]],["text/9-372",[]],["component/9-372",[]],["title/9-373",[77,20.034,202,20.948]],["name/9-373",[]],["text/9-373",[]],["component/9-373",[]],["title/9-374",[939,66.943]],["name/9-374",[]],["text/9-374",[]],["component/9-374",[]],["title/9-375",[393,28.175]],["name/9-375",[]],["text/9-375",[]],["component/9-375",[]],["title/9-376",[58,24.371]],["name/9-376",[]],["text/9-376",[]],["component/9-376",[]],["title/9-377",[133,18.429,940,56.014]],["name/9-377",[]],["text/9-377",[]],["component/9-377",[]],["title/9-378",[48,22.883]],["name/9-378",[]],["text/9-378",[]],["component/9-378",[]],["title/9-379",[201,17.052,299,19.938]],["name/9-379",[]],["text/9-379",[]],["component/9-379",[]],["title/9-380",[77,20.034,202,20.948]],["name/9-380",[]],["text/9-380",[]],["component/9-380",[]],["title/9-381",[941,71.103]],["name/9-381",[]],["text/9-381",[]],["component/9-381",[]],["title/9-382",[393,28.175]],["name/9-382",[]],["text/9-382",[]],["component/9-382",[]],["title/9-383",[58,24.371]],["name/9-383",[]],["text/9-383",[]],["component/9-383",[]],["title/9-384",[133,18.429,913,45.313]],["name/9-384",[]],["text/9-384",[]],["component/9-384",[]],["title/9-385",[48,22.883]],["name/9-385",[]],["text/9-385",[]],["component/9-385",[]],["title/9-386",[201,17.052,299,19.938]],["name/9-386",[]],["text/9-386",[]],["component/9-386",[]],["title/9-387",[77,20.034,202,20.948]],["name/9-387",[]],["text/9-387",[]],["component/9-387",[]],["title/9-388",[]],["name/9-388",[]],["text/9-388",[]],["component/9-388",[]],["title/9-389",[393,28.175]],["name/9-389",[]],["text/9-389",[]],["component/9-389",[]],["title/9-390",[58,24.371]],["name/9-390",[]],["text/9-390",[]],["component/9-390",[]],["title/9-391",[133,23.394]],["name/9-391",[]],["text/9-391",[]],["component/9-391",[]],["title/9-392",[48,22.883]],["name/9-392",[]],["text/9-392",[]],["component/9-392",[]],["title/9-393",[201,17.052,299,19.938]],["name/9-393",[]],["text/9-393",[]],["component/9-393",[]],["title/9-394",[77,20.034,202,20.948]],["name/9-394",[]],["text/9-394",[]],["component/9-394",[]],["title/9-395",[942,71.103]],["name/9-395",[]],["text/9-395",[]],["component/9-395",[]],["title/9-396",[393,28.175]],["name/9-396",[]],["text/9-396",[]],["component/9-396",[]],["title/9-397",[58,24.371]],["name/9-397",[]],["text/9-397",[]],["component/9-397",[]],["title/9-398",[133,18.429,863,42.036]],["name/9-398",[]],["text/9-398",[]],["component/9-398",[]],["title/9-399",[48,22.883]],["name/9-399",[]],["text/9-399",[]],["component/9-399",[]],["title/9-400",[201,17.052,299,19.938]],["name/9-400",[]],["text/9-400",[]],["component/9-400",[]],["title/9-401",[77,20.034,202,20.948]],["name/9-401",[]],["text/9-401",[]],["component/9-401",[]],["title/9-402",[943,71.103]],["name/9-402",[]],["text/9-402",[]],["component/9-402",[]],["title/9-403",[393,28.175]],["name/9-403",[]],["text/9-403",[]],["component/9-403",[]],["title/9-404",[133,18.429,944,50.289]],["name/9-404",[]],["text/9-404",[]],["component/9-404",[]],["title/9-405",[48,22.883]],["name/9-405",[]],["text/9-405",[]],["component/9-405",[]],["title/9-406",[201,17.052,299,19.938]],["name/9-406",[]],["text/9-406",[]],["component/9-406",[]],["title/9-407",[77,20.034,202,20.948]],["name/9-407",[]],["text/9-407",[]],["component/9-407",[]],["title/9-408",[945,66.943]],["name/9-408",[]],["text/9-408",[]],["component/9-408",[]],["title/9-409",[393,28.175]],["name/9-409",[]],["text/9-409",[]],["component/9-409",[]],["title/9-410",[58,24.371]],["name/9-410",[]],["text/9-410",[]],["component/9-410",[]],["title/9-411",[133,12.938,364,23.717,439,24.61,749,26.847]],["name/9-411",[]],["text/9-411",[]],["component/9-411",[]],["title/9-412",[48,22.883]],["name/9-412",[]],["text/9-412",[]],["component/9-412",[]],["title/9-413",[201,17.052,299,19.938]],["name/9-413",[]],["text/9-413",[]],["component/9-413",[]],["title/9-414",[77,20.034,202,20.948]],["name/9-414",[]],["text/9-414",[]],["component/9-414",[]],["title/9-415",[946,66.943]],["name/9-415",[]],["text/9-415",[]],["component/9-415",[]],["title/9-416",[393,28.175]],["name/9-416",[]],["text/9-416",[]],["component/9-416",[]],["title/9-417",[58,24.371]],["name/9-417",[]],["text/9-417",[]],["component/9-417",[]],["title/9-418",[133,18.429,946,52.737]],["name/9-418",[]],["text/9-418",[]],["component/9-418",[]],["title/9-419",[48,22.883]],["name/9-419",[]],["text/9-419",[]],["component/9-419",[]],["title/9-420",[201,17.052,299,19.938]],["name/9-420",[]],["text/9-420",[]],["component/9-420",[]],["title/9-421",[77,20.034,202,20.948]],["name/9-421",[]],["text/9-421",[]],["component/9-421",[]],["title/9-422",[618,50.252]],["name/9-422",[]],["text/9-422",[]],["component/9-422",[]],["title/9-423",[393,28.175]],["name/9-423",[]],["text/9-423",[]],["component/9-423",[]],["title/9-424",[58,24.371]],["name/9-424",[]],["text/9-424",[]],["component/9-424",[]],["title/9-425",[133,23.394]],["name/9-425",[]],["text/9-425",[]],["component/9-425",[]],["title/9-426",[48,22.883]],["name/9-426",[]],["text/9-426",[]],["component/9-426",[]],["title/9-427",[201,17.052,299,19.938]],["name/9-427",[]],["text/9-427",[]],["component/9-427",[]],["title/9-428",[77,20.034,202,20.948]],["name/9-428",[]],["text/9-428",[]],["component/9-428",[]],["title/9-429",[947,71.103]],["name/9-429",[]],["text/9-429",[]],["component/9-429",[]],["title/9-430",[393,28.175]],["name/9-430",[]],["text/9-430",[]],["component/9-430",[]],["title/9-431",[58,24.371]],["name/9-431",[]],["text/9-431",[]],["component/9-431",[]],["title/9-432",[133,15.203,554,30.572,618,32.658]],["name/9-432",[]],["text/9-432",[]],["component/9-432",[]],["title/9-433",[48,22.883]],["name/9-433",[]],["text/9-433",[]],["component/9-433",[]],["title/9-434",[201,17.052,299,19.938]],["name/9-434",[]],["text/9-434",[]],["component/9-434",[]],["title/9-435",[77,20.034,202,20.948]],["name/9-435",[]],["text/9-435",[]],["component/9-435",[]],["title/9-436",[948,66.943]],["name/9-436",[]],["text/9-436",[]],["component/9-436",[]],["title/9-437",[393,28.175]],["name/9-437",[]],["text/9-437",[]],["component/9-437",[]],["title/9-438",[58,24.371]],["name/9-438",[]],["text/9-438",[]],["component/9-438",[]],["title/9-439",[133,12.938,439,24.61,749,26.847,949,31.812]],["name/9-439",[]],["text/9-439",[]],["component/9-439",[]],["title/9-440",[48,22.883]],["name/9-440",[]],["text/9-440",[]],["component/9-440",[]],["title/9-441",[201,17.052,299,19.938]],["name/9-441",[]],["text/9-441",[]],["component/9-441",[]],["title/9-442",[77,20.034,202,20.948]],["name/9-442",[]],["text/9-442",[]],["component/9-442",[]],["title/9-443",[950,71.103]],["name/9-443",[]],["text/9-443",[]],["component/9-443",[]],["title/9-444",[393,28.175]],["name/9-444",[]],["text/9-444",[]],["component/9-444",[]],["title/9-445",[58,24.371]],["name/9-445",[]],["text/9-445",[]],["component/9-445",[]],["title/9-446",[133,18.429,517,40.338]],["name/9-446",[]],["text/9-446",[]],["component/9-446",[]],["title/9-447",[48,22.883]],["name/9-447",[]],["text/9-447",[]],["component/9-447",[]],["title/9-448",[201,17.052,299,19.938]],["name/9-448",[]],["text/9-448",[]],["component/9-448",[]],["title/9-449",[77,20.034,202,20.948]],["name/9-449",[]],["text/9-449",[]],["component/9-449",[]],["title/9-450",[951,71.103]],["name/9-450",[]],["text/9-450",[]],["component/9-450",[]],["title/9-451",[393,28.175]],["name/9-451",[]],["text/9-451",[]],["component/9-451",[]],["title/9-452",[58,24.371]],["name/9-452",[]],["text/9-452",[]],["component/9-452",[]],["title/9-453",[133,15.203,517,33.276,952,43.505]],["name/9-453",[]],["text/9-453",[]],["component/9-453",[]],["title/9-454",[48,22.883]],["name/9-454",[]],["text/9-454",[]],["component/9-454",[]],["title/9-455",[201,17.052,299,19.938]],["name/9-455",[]],["text/9-455",[]],["component/9-455",[]],["title/9-456",[77,20.034,202,20.948]],["name/9-456",[]],["text/9-456",[]],["component/9-456",[]],["title/9-457",[]],["name/9-457",[]],["text/9-457",[]],["component/9-457",[]],["title/9-458",[393,28.175]],["name/9-458",[]],["text/9-458",[]],["component/9-458",[]],["title/9-459",[58,24.371]],["name/9-459",[]],["text/9-459",[]],["component/9-459",[]],["title/9-460",[133,15.203,456,30.572,547,37.381]],["name/9-460",[]],["text/9-460",[]],["component/9-460",[]],["title/9-461",[48,22.883]],["name/9-461",[]],["text/9-461",[]],["component/9-461",[]],["title/9-462",[201,17.052,299,19.938]],["name/9-462",[]],["text/9-462",[]],["component/9-462",[]],["title/9-463",[77,20.034,202,20.948]],["name/9-463",[]],["text/9-463",[]],["component/9-463",[]],["title/9-464",[133,15.203,456,30.572,953,39.873]],["name/9-464",[]],["text/9-464",[]],["component/9-464",[]],["title/9-465",[48,22.883]],["name/9-465",[]],["text/9-465",[]],["component/9-465",[]],["title/9-466",[201,17.052,299,19.938]],["name/9-466",[]],["text/9-466",[]],["component/9-466",[]],["title/9-467",[77,20.034,202,20.948]],["name/9-467",[]],["text/9-467",[]],["component/9-467",[]],["title/9-468",[954,61.355]],["name/9-468",[]],["text/9-468",[]],["component/9-468",[]],["title/9-469",[393,28.175]],["name/9-469",[]],["text/9-469",[]],["component/9-469",[]],["title/9-470",[58,24.371]],["name/9-470",[]],["text/9-470",[]],["component/9-470",[]],["title/9-471",[24,22.313,133,11.261,400,22.313,529,22.994,954,29.533]],["name/9-471",[]],["text/9-471",[]],["component/9-471",[]],["title/9-472",[48,22.883]],["name/9-472",[]],["text/9-472",[]],["component/9-472",[]],["title/9-473",[201,17.052,299,19.938]],["name/9-473",[]],["text/9-473",[]],["component/9-473",[]],["title/9-474",[77,20.034,202,20.948]],["name/9-474",[]],["text/9-474",[]],["component/9-474",[]],["title/9-475",[63,23.763,133,11.261,237,21.148,400,22.313,954,29.533]],["name/9-475",[]],["text/9-475",[]],["component/9-475",[]],["title/9-476",[48,22.883]],["name/9-476",[]],["text/9-476",[]],["component/9-476",[]],["title/9-477",[201,17.052,299,19.938]],["name/9-477",[]],["text/9-477",[]],["component/9-477",[]],["title/9-478",[77,20.034,202,20.948]],["name/9-478",[]],["text/9-478",[]],["component/9-478",[]],["title/9-479",[955,71.103]],["name/9-479",[]],["text/9-479",[]],["component/9-479",[]],["title/9-480",[393,28.175]],["name/9-480",[]],["text/9-480",[]],["component/9-480",[]],["title/9-481",[58,24.371]],["name/9-481",[]],["text/9-481",[]],["component/9-481",[]],["title/9-482",[133,15.203,956,46.208,957,46.208]],["name/9-482",[]],["text/9-482",[]],["component/9-482",[]],["title/9-483",[48,22.883]],["name/9-483",[]],["text/9-483",[]],["component/9-483",[]],["title/9-484",[201,17.052,299,19.938]],["name/9-484",[]],["text/9-484",[]],["component/9-484",[]],["title/9-485",[77,20.034,202,20.948]],["name/9-485",[]],["text/9-485",[]],["component/9-485",[]],["title/9-486",[958,71.103]],["name/9-486",[]],["text/9-486",[]],["component/9-486",[]],["title/9-487",[393,28.175]],["name/9-487",[]],["text/9-487",[]],["component/9-487",[]],["title/9-488",[58,24.371]],["name/9-488",[]],["text/9-488",[]],["component/9-488",[]],["title/9-489",[133,15.203,959,38.53,960,46.208]],["name/9-489",[]],["text/9-489",[]],["component/9-489",[]],["title/9-490",[48,22.883]],["name/9-490",[]],["text/9-490",[]],["component/9-490",[]],["title/9-491",[201,17.052,299,19.938]],["name/9-491",[]],["text/9-491",[]],["component/9-491",[]],["title/9-492",[77,20.034,202,20.948]],["name/9-492",[]],["text/9-492",[]],["component/9-492",[]],["title/9-493",[961,66.943]],["name/9-493",[]],["text/9-493",[]],["component/9-493",[]],["title/9-494",[393,28.175]],["name/9-494",[]],["text/9-494",[]],["component/9-494",[]],["title/9-495",[58,24.371]],["name/9-495",[]],["text/9-495",[]],["component/9-495",[]],["title/9-496",[133,18.429,531,52.737]],["name/9-496",[]],["text/9-496",[]],["component/9-496",[]],["title/9-497",[48,22.883]],["name/9-497",[]],["text/9-497",[]],["component/9-497",[]],["title/9-498",[201,17.052,299,19.938]],["name/9-498",[]],["text/9-498",[]],["component/9-498",[]],["title/9-499",[77,20.034,202,20.948]],["name/9-499",[]],["text/9-499",[]],["component/9-499",[]],["title/9-500",[962,61.355]],["name/9-500",[]],["text/9-500",[]],["component/9-500",[]],["title/9-501",[393,28.175]],["name/9-501",[]],["text/9-501",[]],["component/9-501",[]],["title/9-502",[58,24.371]],["name/9-502",[]],["text/9-502",[]],["component/9-502",[]],["title/9-503",[133,15.203,962,39.873,963,50.313]],["name/9-503",[]],["text/9-503",[]],["component/9-503",[]],["title/9-504",[48,22.883]],["name/9-504",[]],["text/9-504",[]],["component/9-504",[]],["title/9-505",[201,17.052,299,19.938]],["name/9-505",[]],["text/9-505",[]],["component/9-505",[]],["title/9-506",[77,20.034,202,20.948]],["name/9-506",[]],["text/9-506",[]],["component/9-506",[]],["title/9-507",[133,18.429,962,48.334]],["name/9-507",[]],["text/9-507",[]],["component/9-507",[]],["title/9-508",[48,22.883]],["name/9-508",[]],["text/9-508",[]],["component/9-508",[]],["title/9-509",[201,17.052,299,19.938]],["name/9-509",[]],["text/9-509",[]],["component/9-509",[]],["title/9-510",[77,20.034,202,20.948]],["name/9-510",[]],["text/9-510",[]],["component/9-510",[]],["title/9-511",[843,54.597]],["name/9-511",[]],["text/9-511",[]],["component/9-511",[]],["title/9-512",[393,28.175]],["name/9-512",[]],["text/9-512",[]],["component/9-512",[]],["title/9-513",[58,24.371]],["name/9-513",[]],["text/9-513",[]],["component/9-513",[]],["title/9-514",[133,18.429,843,43.011]],["name/9-514",[]],["text/9-514",[]],["component/9-514",[]],["title/9-515",[48,22.883]],["name/9-515",[]],["text/9-515",[]],["component/9-515",[]],["title/9-516",[201,17.052,299,19.938]],["name/9-516",[]],["text/9-516",[]],["component/9-516",[]],["title/9-517",[77,20.034,202,20.948]],["name/9-517",[]],["text/9-517",[]],["component/9-517",[]],["title/9-518",[964,71.103]],["name/9-518",[]],["text/9-518",[]],["component/9-518",[]],["title/9-519",[393,28.175]],["name/9-519",[]],["text/9-519",[]],["component/9-519",[]],["title/9-520",[58,24.371]],["name/9-520",[]],["text/9-520",[]],["component/9-520",[]],["title/9-521",[133,12.938,215,28.318,225,20.626,439,24.61]],["name/9-521",[]],["text/9-521",[]],["component/9-521",[]],["title/9-522",[48,22.883]],["name/9-522",[]],["text/9-522",[]],["component/9-522",[]],["title/9-523",[201,17.052,299,19.938]],["name/9-523",[]],["text/9-523",[]],["component/9-523",[]],["title/9-524",[77,20.034,202,20.948]],["name/9-524",[]],["text/9-524",[]],["component/9-524",[]],["title/9-525",[133,12.938,215,28.318,225,20.626,229,32.79]],["name/9-525",[]],["text/9-525",[]],["component/9-525",[]],["title/9-526",[48,22.883]],["name/9-526",[]],["text/9-526",[]],["component/9-526",[]],["title/9-527",[201,17.052,299,19.938]],["name/9-527",[]],["text/9-527",[]],["component/9-527",[]],["title/9-528",[77,20.034,202,20.948]],["name/9-528",[]],["text/9-528",[]],["component/9-528",[]],["title/9-529",[965,63.836]],["name/9-529",[]],["text/9-529",[]],["component/9-529",[]],["title/9-530",[393,28.175]],["name/9-530",[]],["text/9-530",[]],["component/9-530",[]],["title/9-531",[58,24.371]],["name/9-531",[]],["text/9-531",[]],["component/9-531",[]],["title/9-532",[133,15.203,342,31.547,965,41.485]],["name/9-532",[]],["text/9-532",[]],["component/9-532",[]],["title/9-533",[48,22.883]],["name/9-533",[]],["text/9-533",[]],["component/9-533",[]],["title/9-534",[201,17.052,299,19.938]],["name/9-534",[]],["text/9-534",[]],["component/9-534",[]],["title/9-535",[77,20.034,202,20.948]],["name/9-535",[]],["text/9-535",[]],["component/9-535",[]],["title/9-536",[966,66.943]],["name/9-536",[]],["text/9-536",[]],["component/9-536",[]],["title/9-537",[393,28.175]],["name/9-537",[]],["text/9-537",[]],["component/9-537",[]],["title/9-538",[58,24.371]],["name/9-538",[]],["text/9-538",[]],["component/9-538",[]],["title/9-539",[133,18.429,966,52.737]],["name/9-539",[]],["text/9-539",[]],["component/9-539",[]],["title/9-540",[48,22.883]],["name/9-540",[]],["text/9-540",[]],["component/9-540",[]],["title/9-541",[201,17.052,299,19.938]],["name/9-541",[]],["text/9-541",[]],["component/9-541",[]],["title/9-542",[77,20.034,202,20.948]],["name/9-542",[]],["text/9-542",[]],["component/9-542",[]],["title/9-543",[]],["name/9-543",[]],["text/9-543",[]],["component/9-543",[]],["title/9-544",[393,28.175]],["name/9-544",[]],["text/9-544",[]],["component/9-544",[]],["title/9-545",[58,24.371]],["name/9-545",[]],["text/9-545",[]],["component/9-545",[]],["title/9-546",[133,23.394]],["name/9-546",[]],["text/9-546",[]],["component/9-546",[]],["title/9-547",[48,22.883]],["name/9-547",[]],["text/9-547",[]],["component/9-547",[]],["title/9-548",[201,17.052,299,19.938]],["name/9-548",[]],["text/9-548",[]],["component/9-548",[]],["title/9-549",[77,20.034,202,20.948]],["name/9-549",[]],["text/9-549",[]],["component/9-549",[]],["title/9-550",[742,61.355]],["name/9-550",[]],["text/9-550",[]],["component/9-550",[]],["title/9-551",[393,28.175]],["name/9-551",[]],["text/9-551",[]],["component/9-551",[]],["title/9-552",[58,24.371]],["name/9-552",[]],["text/9-552",[]],["component/9-552",[]],["title/9-553",[133,15.203,234,28.204,313,29.703]],["name/9-553",[]],["text/9-553",[]],["component/9-553",[]],["title/9-554",[48,22.883]],["name/9-554",[]],["text/9-554",[]],["component/9-554",[]],["title/9-555",[201,17.052,299,19.938]],["name/9-555",[]],["text/9-555",[]],["component/9-555",[]],["title/9-556",[77,20.034,202,20.948]],["name/9-556",[]],["text/9-556",[]],["component/9-556",[]],["title/9-557",[418,52.235]],["name/9-557",[]],["text/9-557",[]],["component/9-557",[]],["title/9-558",[393,28.175]],["name/9-558",[]],["text/9-558",[]],["component/9-558",[]],["title/9-559",[58,24.371]],["name/9-559",[]],["text/9-559",[]],["component/9-559",[]],["title/9-560",[133,18.429,418,41.15]],["name/9-560",[]],["text/9-560",[]],["component/9-560",[]],["title/9-561",[48,22.883]],["name/9-561",[]],["text/9-561",[]],["component/9-561",[]],["title/9-562",[201,17.052,299,19.938]],["name/9-562",[]],["text/9-562",[]],["component/9-562",[]],["title/9-563",[77,20.034,202,20.948]],["name/9-563",[]],["text/9-563",[]],["component/9-563",[]],["title/9-564",[866,61.355]],["name/9-564",[]],["text/9-564",[]],["component/9-564",[]],["title/9-565",[58,24.371]],["name/9-565",[]],["text/9-565",[]],["component/9-565",[]],["title/9-566",[133,12.938,378,22.447,382,24.936,866,33.932]],["name/9-566",[]],["text/9-566",[]],["component/9-566",[]],["title/9-567",[48,22.883]],["name/9-567",[]],["text/9-567",[]],["component/9-567",[]],["title/9-568",[201,17.052,299,19.938]],["name/9-568",[]],["text/9-568",[]],["component/9-568",[]],["title/9-569",[77,20.034,202,20.948]],["name/9-569",[]],["text/9-569",[]],["component/9-569",[]],["title/9-570",[133,15.203,364,27.869,866,39.873]],["name/9-570",[]],["text/9-570",[]],["component/9-570",[]],["title/9-571",[48,22.883]],["name/9-571",[]],["text/9-571",[]],["component/9-571",[]],["title/9-572",[201,17.052,299,19.938]],["name/9-572",[]],["text/9-572",[]],["component/9-572",[]],["title/9-573",[77,20.034,202,20.948]],["name/9-573",[]],["text/9-573",[]],["component/9-573",[]],["title/9-574",[967,71.103]],["name/9-574",[]],["text/9-574",[]],["component/9-574",[]],["title/9-575",[393,28.175]],["name/9-575",[]],["text/9-575",[]],["component/9-575",[]],["title/9-576",[58,24.371]],["name/9-576",[]],["text/9-576",[]],["component/9-576",[]],["title/9-577",[133,15.203,356,33.276,968,46.208]],["name/9-577",[]],["text/9-577",[]],["component/9-577",[]],["title/9-578",[48,22.883]],["name/9-578",[]],["text/9-578",[]],["component/9-578",[]],["title/9-579",[201,17.052,299,19.938]],["name/9-579",[]],["text/9-579",[]],["component/9-579",[]],["title/9-580",[77,20.034,202,20.948]],["name/9-580",[]],["text/9-580",[]],["component/9-580",[]],["title/9-581",[969,71.103]],["name/9-581",[]],["text/9-581",[]],["component/9-581",[]],["title/9-582",[393,28.175]],["name/9-582",[]],["text/9-582",[]],["component/9-582",[]],["title/9-583",[58,24.371]],["name/9-583",[]],["text/9-583",[]],["component/9-583",[]],["title/9-584",[133,15.203,358,32.083,968,46.208]],["name/9-584",[]],["text/9-584",[]],["component/9-584",[]],["title/9-585",[48,22.883]],["name/9-585",[]],["text/9-585",[]],["component/9-585",[]],["title/9-586",[201,17.052,299,19.938]],["name/9-586",[]],["text/9-586",[]],["component/9-586",[]],["title/9-587",[77,20.034,202,20.948]],["name/9-587",[]],["text/9-587",[]],["component/9-587",[]],["title/9",[54,26.653,288,26.108,409,43.505]],["name/9",[409,0.786]],["text/9",[0,0.978,10,1.441,14,0.176,15,0.044,16,0.083,22,0.142,24,1.42,28,2.212,38,0.136,41,0.036,44,0.188,45,0.046,46,0.088,51,0.497,52,0.099,56,0.091,58,1.001,61,0.608,62,0.176,63,1.172,77,0.052,79,2.295,81,0.104,85,0.475,86,0.188,88,0.84,89,1.567,93,0.16,95,0.034,96,0.198,98,0.23,99,0.366,105,0.653,106,0.068,107,0.166,108,3.348,109,2.714,110,1.246,111,0.411,112,0.039,115,1.193,128,0.315,133,0.27,143,0.65,151,0.772,160,0.078,163,0.23,171,0.388,179,0.507,182,0.03,187,1.053,192,0.038,195,2.788,196,0.892,197,0.038,201,0.058,209,0.099,210,0.306,211,1.066,214,0.033,215,3.473,222,0.083,224,0.083,225,3.517,227,0.049,228,0.645,229,0.353,231,0.181,233,0.07,234,3.359,237,0.03,239,0.042,240,0.049,243,0.031,248,0.138,252,0.621,254,0.283,260,0.036,263,0.405,264,0.284,266,1.296,268,0.188,288,1.305,292,0.163,296,0.674,297,0.114,298,0.038,299,1.69,311,0.428,313,0.154,316,0.049,319,0.238,326,0.117,340,0.211,342,0.351,348,0.452,350,0.255,356,0.239,358,0.166,362,0.042,364,0.144,366,0.037,370,0.071,371,0.646,373,1.036,375,0.034,378,1.373,380,0.036,381,0.034,382,1.566,384,0.472,385,0.106,390,0.894,392,0.461,393,0.019,400,0.063,418,0.633,421,0.034,427,0.225,429,0.04,430,0.405,433,0.106,439,0.35,440,4.363,444,0.206,445,0.269,446,0.99,447,0.087,448,0.033,456,0.37,457,0.097,461,0.486,464,0.044,465,0.039,467,0.249,473,0.102,474,0.039,475,0.144,477,0.117,478,0.042,482,0.181,492,0.144,493,0.356,494,0.193,495,0.097,503,0.046,504,0.305,510,0.144,512,0.219,513,0.219,515,0.076,517,0.07,518,0.117,519,0.087,528,0.202,529,1.06,531,0.091,545,0.125,547,0.193,548,0.044,554,0.31,556,0.074,557,0.306,562,0.746,565,0.042,587,0.111,590,1.634,592,0.339,593,6.746,597,0.852,599,0.238,602,0.326,605,1.45,607,3.764,608,0.812,610,1.45,612,0.225,614,1.191,616,1.105,618,0.267,625,1.231,626,0.044,631,1.231,633,0.136,635,1.349,636,0.091,644,0.078,647,0.036,657,0.399,659,0.736,666,0.044,670,0.049,675,0.049,678,0.298,681,0.044,682,0.091,684,0.046,688,0.036,689,0.449,693,0.076,703,0.378,705,3.941,706,0.091,707,0.269,709,0.192,720,0.037,722,0.541,728,0.097,742,0.125,746,0.04,749,0.381,767,0.044,782,0.039,808,0.16,813,0.039,841,0.298,843,0.36,852,0.091,853,1.651,855,0.343,857,0.049,860,0.172,863,3.215,864,0.136,866,0.125,868,0.049,884,0.326,892,0.097,894,0.541,895,0.514,896,0.097,897,0.097,899,0.091,900,0.214,901,0.286,902,0.049,903,0.049,904,0.612,905,0.049,906,0.04,907,0.049,908,0.049,909,0.049,910,0.049,911,0.239,912,0.091,913,0.452,914,0.049,915,0.049,916,0.091,917,0.049,918,0.049,919,0.256,920,0.097,921,0.214,922,0.463,923,0.097,924,0.239,925,0.049,926,0.049,927,0.049,928,0.049,929,0.256,930,0.049,931,0.326,932,0.049,933,0.078,934,0.049,935,0.049,936,0.044,937,0.049,938,0.049,939,0.225,940,0.097,941,0.049,942,0.097,943,0.049,944,0.172,945,0.046,946,0.399,947,0.049,948,0.046,950,0.049,951,0.049,952,0.225,953,0.166,954,0.286,955,0.049,956,0.239,957,0.239,958,0.049,959,0.16,960,0.192,961,0.046,962,0.246,964,0.097,965,0.256,966,0.313,967,0.049,969,0.049,970,0.105,971,0.049,972,0.181,973,0.151,974,0.053,975,0.097,976,0.378,977,0.424,978,0.269,979,0.609,980,0.105,981,0.239,982,0.144,983,1.197,984,0.26,985,0.469,986,0.26,987,0.298,988,0.049,989,2.048,990,0.053,991,0.053,992,0.38,993,0.734,994,2.111,995,0.704,996,0.105,997,0.105,998,0.053,999,8.343,1000,4.353,1001,1.03,1002,1.12,1003,0.609,1004,0.412,1005,0.053,1006,0.053,1007,0.053,1008,0.053,1009,0.046,1010,0.097,1011,0.049,1012,0.105,1013,0.157,1014,0.311,1015,0.136,1016,0.461,1017,0.105,1018,0.192,1019,0.144,1020,0.097,1021,0.053,1022,0.105,1023,6.943,1024,0.053,1025,3.66,1026,0.053,1027,0.209,1028,6.528,1029,0.053,1030,0.105,1031,0.053,1032,0.053,1033,0.105,1034,0.053,1035,0.509,1036,0.053,1037,1.12,1038,1.076,1039,3.054,1040,1.717,1041,2.791,1042,0.893,1043,1.03,1044,0.053,1045,0.053,1046,0.511,1047,0.105,1048,0.209,1049,0.053,1050,0.157,1051,0.286,1052,0.26,1053,6.891,1054,0.157,1055,6.378,1056,0.311,1057,0.26,1058,0.157,1059,0.105,1060,0.105,1061,0.053,1062,0.053,1063,0.26,1064,0.105,1065,0.053,1066,1.165,1067,0.053,1068,0.053,1069,0.192,1070,0.166,1071,0.049,1072,0.053,1073,4.824,1074,0.311,1075,0.046,1076,0.053,1077,0.053,1078,0.053,1079,0.053,1080,0.053,1081,0.053,1082,0.053,1083,0.053,1084,0.053,1085,0.053,1086,0.053,1087,0.053,1088,0.053,1089,0.053,1090,0.053,1091,0.053,1092,0.053,1093,0.144,1094,0.053,1095,0.053,1096,0.053,1097,0.105,1098,0.105,1099,0.053,1100,0.209,1101,0.209,1102,0.053,1103,0.053,1104,0.053,1105,0.046,1106,0.192,1107,0.053,1108,0.053,1109,0.053,1110,0.053,1111,0.412,1112,0.105,1113,0.26,1114,0.105,1115,0.209,1116,0.053,1117,0.053,1118,0.339,1119,0.65,1120,0.361,1121,0.581,1122,0.361,1123,0.298,1124,0.56,1125,0.56,1126,0.511,1127,0.412,1128,0.26,1129,0.053,1130,0.053,1131,0.097,1132,0.053,1133,0.053,1134,0.042,1135,0.046,1136,0.044,1137,0.053,1138,0.412,1139,0.097,1140,0.311,1141,0.26,1142,0.105,1143,0.105,1144,0.209,1145,0.083,1146,0.053,1147,0.105,1148,0.361,1149,0.157,1150,0.311,1151,0.157,1152,0.412,1153,0.378,1154,0.311,1155,0.412,1156,0.157,1157,0.157,1158,0.049,1159,0.144,1160,0.049,1161,0.053,1162,0.053,1163,0.053,1164,0.361,1165,0.144,1166,0.053,1167,0.044,1168,0.053,1169,0.105,1170,0.311,1171,0.157,1172,0.053,1173,0.053,1174,0.097,1175,0.053,1176,0.053,1177,0.053,1178,0.053,1179,0.209,1180,0.049,1181,0.105,1182,0.906,1183,1.253,1184,0.704,1185,0.053,1186,0.105,1187,0.053,1188,0.053,1189,0.053,1190,0.053,1191,0.105,1192,0.105,1193,0.053,1194,0.105,1195,0.053,1196,0.26,1197,0.26,1198,0.105,1199,0.361,1200,0.157,1201,0.053,1202,0.053,1203,0.105,1204,0.053,1205,0.105,1206,0.157,1207,0.097,1208,0.053,1209,0.046,1210,0.053,1211,0.105,1212,0.049,1213,0.053,1214,0.053,1215,0.157,1216,0.053,1217,0.105,1218,0.053,1219,0.049,1220,0.053,1221,0.097,1222,0.105,1223,0.097,1224,0.087,1225,0.053,1226,0.046,1227,0.053,1228,0.105,1229,0.157,1230,0.044,1231,0.049,1232,0.105,1233,0.105,1234,0.105,1235,0.053,1236,0.157,1237,0.157,1238,0.053,1239,0.053,1240,0.053,1241,0.053,1242,0.157,1243,0.044,1244,0.053,1245,0.053,1246,0.097,1247,0.105,1248,0.053,1249,0.105,1250,0.053,1251,0.157,1252,0.053,1253,0.053,1254,0.136,1255,0.424,1256,0.157,1257,0.097,1258,0.311,1259,0.053,1260,0.097,1261,0.053,1262,0.105,1263,0.105,1264,0.105,1265,0.105,1266,0.105,1267,0.105,1268,0.053,1269,0.412,1270,0.053,1271,0.157,1272,0.105,1273,0.053,1274,0.105,1275,0.209,1276,0.053,1277,0.053,1278,0.053,1279,0.053,1280,0.053,1281,0.053,1282,0.053,1283,0.105,1284,0.053,1285,0.049,1286,0.053,1287,0.097,1288,0.053,1289,0.053,1290,0.087,1291,0.105,1292,0.053,1293,0.105,1294,0.053,1295,0.053,1296,0.053,1297,0.053,1298,0.053,1299,0.053,1300,0.053,1301,0.105,1302,0.053,1303,0.044,1304,0.053,1305,0.053,1306,0.105,1307,0.053,1308,0.053,1309,0.105,1310,0.053,1311,0.049,1312,0.04,1313,0.105,1314,0.053,1315,0.049,1316,0.053,1317,0.053,1318,0.053,1319,0.311,1320,0.046,1321,0.105,1322,0.053,1323,0.053,1324,0.105,1325,0.053,1326,0.105,1327,0.053,1328,0.799,1329,0.157,1330,0.144,1331,0.157,1332,0.053,1333,0.053,1334,0.053,1335,0.105,1336,0.311,1337,0.105,1338,0.157,1339,0.26,1340,0.26,1341,0.105,1342,0.053,1343,0.053,1344,0.105,1345,0.053,1346,0.105,1347,0.053,1348,0.053]],["component/9",[1,0.233]],["title/10-1",[326,34.189,505,46.707]],["name/10-1",[]],["text/10-1",[]],["component/10-1",[]],["title/10-2",[326,34.189,385,41.15]],["name/10-2",[]],["text/10-2",[]],["component/10-2",[]],["title/10-3",[35,28.538,326,20.89,385,25.143,505,28.538,554,22.644]],["name/10-3",[]],["text/10-3",[]],["component/10-3",[]],["title/10-4",[105,29.301,109,26.108,364,27.869]],["name/10-4",[]],["text/10-4",[]],["component/10-4",[]],["title/10",[385,52.235]],["name/10",[385,0.613]],["text/10",[13,0.799,28,2.056,45,1.064,52,1.416,54,0.652,58,1.427,69,0.814,77,0.404,88,1.416,96,0.784,105,5.313,106,0.799,109,5.379,110,1.266,115,0.799,128,0.942,133,1.173,163,0.784,171,0.784,176,1.394,182,2.176,195,0.848,201,0.876,209,0.771,210,1.875,212,0.868,225,4.395,232,1.466,233,2.071,237,1.777,254,0.681,264,2.158,287,0.814,292,1.963,299,1.024,306,2.113,315,1.524,326,5.547,340,2.26,342,1.416,355,2.519,364,0.681,378,2.675,384,3.31,385,6.048,388,0.771,397,0.868,400,0.737,421,1.466,433,1.524,435,1.13,446,0.784,448,0.759,456,2.358,461,0.848,473,2.033,479,1.014,505,5.703,528,0.799,554,1.903,555,0.975,644,0.914,700,1.064,705,2.582,715,0.848,749,0.771,782,0.914,840,1.633,841,0.889,843,2.208,849,1.064,851,1.13,863,2.675,877,1.953,953,0.975,981,1.13,1070,0.975,1135,1.064,1167,1.014,1320,1.064,1349,3.881,1350,1.064,1351,1.23,1352,1.23,1353,1.064,1354,1.23,1355,1.23,1356,1.23,1357,1.13,1358,1.73,1359,1.23,1360,1.13,1361,1.23,1362,1.13,1363,1.23,1364,1.23,1365,1.13,1366,5.607,1367,4.532,1368,1.23,1369,1.13,1370,1.23,1371,1.23]],["component/10",[1,0.233]],["title/11-1",[211,43.936]],["name/11-1",[]],["text/11-1",[]],["component/11-1",[]],["title/11-2",[1372,71.103]],["name/11-2",[]],["text/11-2",[]],["component/11-2",[]],["title/11-3",[439,44.498]],["name/11-3",[]],["text/11-3",[]],["component/11-3",[]],["title/11-4",[211,34.612,1121,50.289]],["name/11-4",[]],["text/11-4",[]],["component/11-4",[]],["title/11-5",[211,28.553,1003,43.505,1123,41.485]],["name/11-5",[]],["text/11-5",[]],["component/11-5",[]],["title/11-6",[201,11.971,211,24.299,722,35.305,1121,35.305]],["name/11-6",[]],["text/11-6",[]],["component/11-6",[]],["title/11-7",[288,31.649,1373,56.014]],["name/11-7",[]],["text/11-7",[]],["component/11-7",[]],["title/11-8",[84,44.094,393,22.196]],["name/11-8",[]],["text/11-8",[]],["component/11-8",[]],["title/11-9",[211,34.612,1374,56.014]],["name/11-9",[]],["text/11-9",[]],["component/11-9",[]],["title/11",[73,29.9,735,36.519]],["name/11",[73,0.233,735,0.284]],["text/11",[0,0.944,10,1.616,22,0.294,28,3.081,46,0.58,51,2.016,52,0.649,54,1.02,58,0.732,61,0.317,84,1.081,85,2.876,88,1.458,89,1.136,93,0.412,96,0.343,98,0.954,105,1.572,106,0.349,109,2.919,110,1.079,115,0.349,120,0.82,133,0.702,163,0.66,176,0.332,179,0.363,182,0.301,187,2.382,195,0.713,196,0.309,197,0.389,201,0.289,209,0.337,210,0.896,211,4.884,214,0.332,215,1.273,221,0.465,225,0.927,228,1.081,229,3.046,233,1.273,234,0.301,254,1.066,255,0.82,256,0.363,263,0.82,264,1.327,278,1.227,287,0.355,288,1.206,292,0.337,299,0.338,308,0.399,311,0.327,315,0.363,326,1.079,340,0.313,342,0.649,375,0.343,382,1.967,384,0.611,388,0.337,392,1.233,393,0.544,398,0.332,433,2.87,439,2.594,441,0.379,446,2.878,448,0.638,456,0.327,461,0.37,467,0.713,473,0.349,477,0.399,528,0.349,554,0.327,562,0.923,571,1.525,590,1.951,594,0.494,618,1.249,658,0.853,659,0.443,666,0.443,682,0.465,688,0.363,722,2.514,736,0.426,738,0.412,745,0.443,749,1.458,771,0.895,782,0.399,783,0.426,787,0.426,790,0.412,798,0.426,812,0.494,813,0.769,841,0.748,854,0.82,860,0.853,863,1.602,884,0.82,913,0.399,954,0.426,971,0.494,972,0.465,973,0.389,977,0.494,978,0.465,982,0.494,985,0.95,989,0.82,1003,1.293,1019,0.95,1035,0.748,1069,4.789,1093,1.768,1105,0.465,1106,5.67,1121,1.587,1123,0.853,1131,0.95,1159,7.755,1160,1.374,1174,0.494,1180,4.789,1182,1.081,1226,0.465,1290,0.443,1303,0.853,1312,0.412,1353,0.465,1365,0.494,1369,0.494,1372,3.654,1373,1.374,1374,2.135,1375,0.494,1376,0.494,1377,0.538,1378,3.687,1379,2.325,1380,1.496,1381,1.768,1382,3.687,1383,6.731,1384,2.135,1385,7.204,1386,0.538,1387,3.378,1388,0.538,1389,0.895,1390,0.538,1391,1.035,1392,0.95,1393,0.538,1394,1.496,1395,1.035,1396,1.035,1397,0.538,1398,0.95,1399,1.035,1400,1.035,1401,0.494,1402,0.538,1403,0.538,1404,0.538,1405,1.496,1406,1.496,1407,1.496,1408,1.496,1409,1.496,1410,0.538,1411,0.538,1412,0.538,1413,0.538,1414,0.95,1415,0.95,1416,0.538,1417,0.538,1418,0.95,1419,0.538,1420,0.538,1421,0.538,1422,0.465,1423,0.538,1424,1.496,1425,5.626,1426,3.978,1427,6.799,1428,0.538,1429,1.035,1430,1.035,1431,0.538,1432,0.538,1433,0.538,1434,1.035,1435,1.496,1436,0.538,1437,0.538,1438,0.538,1439,0.538,1440,0.538,1441,0.538,1442,0.494,1443,0.538,1444,0.538,1445,0.538]],["component/11",[1,0.233]],["title/12-1",[111,39.776]],["name/12-1",[]],["text/12-1",[]],["component/12-1",[]],["title/12-2",[111,31.335,234,34.189]],["name/12-2",[]],["text/12-2",[]],["component/12-2",[]],["title/12-3",[0,29.9,111,31.335]],["name/12-3",[]],["text/12-3",[]],["component/12-3",[]],["title/12-4",[111,25.849,378,26.376,460,39.873]],["name/12-4",[]],["text/12-4",[]],["component/12-4",[]],["title/12-5",[201,14.067,384,29.703,1446,50.313]],["name/12-5",[]],["text/12-5",[]],["component/12-5",[]],["title/12-6",[111,31.335,313,36.006]],["name/12-6",[]],["text/12-6",[]],["component/12-6",[]],["title/12-7",[69,33.276,111,25.849,254,27.869]],["name/12-7",[]],["text/12-7",[]],["component/12-7",[]],["title/12-8",[48,14.871,58,15.838,111,25.849]],["name/12-8",[]],["text/12-8",[]],["component/12-8",[]],["title/12",[1447,77.419]],["name/12",[111,0.467]],["text/12",[0,0.721,1,0.598,10,1.897,13,0.504,24,1.591,28,5.182,39,0.577,44,1.921,46,0.824,47,0.671,48,0.785,49,0.535,54,1.678,58,0.659,59,0.514,61,0.458,73,0.721,77,0.483,79,0.487,85,1.513,88,0.922,89,0.458,94,0.504,96,0.495,105,2.805,106,0.504,108,0.495,109,3.378,110,0.435,111,4.369,125,0.535,133,1.227,159,0.446,176,0.479,182,0.824,187,1.591,196,0.446,197,0.561,201,1.347,208,0.577,210,0.88,211,0.441,214,0.479,225,2.9,226,0.524,233,1.384,234,3.224,236,0.671,243,2.843,254,0.43,256,1.412,260,1.412,266,1.165,268,1.063,287,0.972,288,0.403,292,0.922,311,1.614,313,1.236,319,1.603,326,3.649,339,0.561,340,2.117,342,0.922,346,0.535,355,0.954,371,0.487,373,2.563,377,0.548,378,1.393,380,1.443,384,0.458,387,1.092,400,0.465,422,1.555,428,0.64,429,1.126,439,0.845,444,1.165,446,0.937,447,1.726,448,1.292,451,0.713,456,2.208,460,0.615,461,1.013,464,0.64,468,0.514,481,1.037,497,0.615,498,0.64,504,2.404,512,1.873,515,1.921,519,0.64,528,0.504,548,0.64,562,1.292,571,3.219,577,0.577,587,1.476,590,1.063,599,2.783,618,0.504,648,0.671,666,2.19,681,0.64,688,0.524,689,0.495,712,0.671,715,1.443,733,0.615,783,0.615,790,0.595,843,1.476,854,1.165,863,2.183,867,3.349,893,2.44,906,0.595,939,0.671,983,1.165,987,1.212,1015,0.671,1167,0.64,1230,0.64,1246,0.713,1254,2.297,1255,4.091,1257,3.338,1260,1.35,1312,0.595,1353,0.671,1389,0.671,1448,0.713,1449,0.776,1450,0.776,1451,0.671,1452,0.671,1453,0.776,1454,0.776,1455,0.776,1456,0.776,1457,0.776,1458,0.776,1459,0.776,1460,0.713,1461,0.776,1462,0.776,1463,0.776,1464,1.47,1465,3.168,1466,0.713,1467,3.73,1468,0.776,1469,3.634,1470,0.713,1471,0.776,1472,0.713,1473,0.671,1474,0.776,1475,0.713,1476,3.634,1477,3.634,1478,1.35,1479,1.212,1480,2.093,1481,1.47,1482,0.776,1483,0.776,1484,0.713,1485,0.713,1486,1.47,1487,2.093,1488,0.776,1489,0.776,1490,0.713,1491,0.524,1492,1.47,1493,0.595,1494,0.64,1495,0.713,1496,0.776]],["component/12",[1,0.233]],["title/13-1",[553,50.289,554,37.06]],["name/13-1",[]],["text/13-1",[]],["component/13-1",[]],["title/13-2",[111,21.998,254,23.717,326,24.002,380,29.511]],["name/13-2",[]],["text/13-2",[]],["component/13-2",[]],["title/13",[54,32.31,411,50.289]],["name/13",[54,0.252,411,0.392]],["text/13",[0,2.176,18,1.815,28,3.557,41,1.517,46,0.671,48,0.354,49,0.824,52,0.75,53,0.75,54,1.166,58,1.195,61,1.299,79,1.38,81,0.791,85,3.209,86,0.865,90,0.948,94,0.776,105,3.7,108,2.42,109,5.293,110,2.128,111,3.058,125,0.824,133,1.512,163,0.763,176,0.738,182,1.234,195,2.107,201,0.615,209,0.75,210,0.716,211,0.679,214,0.738,225,2.138,229,1.686,233,0.791,234,3.948,237,0.679,254,1.219,260,0.807,263,0.948,266,1.744,278,1.404,288,2.303,297,1.591,298,0.865,311,1.858,319,2.907,326,4.539,340,2.211,342,2.38,358,0.763,364,2.459,371,0.75,378,0.627,384,2.621,385,2.561,388,1.38,390,1.38,398,0.738,399,0.844,400,0.716,415,0.807,421,0.776,444,3.518,446,0.763,447,0.986,448,1.887,456,0.727,461,0.824,473,0.776,481,1.552,497,1.744,504,1.456,505,1.686,512,2.677,513,0.844,515,2.21,528,0.776,554,0.727,562,1.887,572,0.986,574,1.517,576,0.948,577,0.889,590,0.865,618,0.776,647,0.807,671,1.034,676,2.022,680,0.986,715,0.824,753,0.865,784,0.986,785,0.889,790,0.916,843,0.844,854,0.948,863,2.107,894,0.986,912,1.034,953,0.948,959,0.916,979,1.034,983,3.008,987,3.13,1123,0.986,1136,0.986,1145,0.948,1212,1.099,1254,1.034,1311,1.099,1422,1.034,1472,1.099,1473,1.903,1478,1.099,1497,1.196,1498,1.196,1499,1.099,1500,1.196,1501,1.196,1502,1.196,1503,1.196,1504,1.196,1505,1.196,1506,2.808,1507,1.099,1508,1.196,1509,1.196,1510,1.196,1511,1.034,1512,1.196,1513,2.201,1514,1.099,1515,2.201,1516,0.986,1517,1.196,1518,1.196,1519,2.201,1520,1.196,1521,1.196]],["component/13",[1,0.233]],["title/14-1",[73,29.9,735,36.519]],["name/14-1",[]],["text/14-1",[]],["component/14-1",[]],["title/14-2",[109,22.219,378,22.447,388,26.847,1522,35.305]],["name/14-2",[]],["text/14-2",[]],["component/14-2",[]],["title/14-3",[61,25.278,159,24.61,243,25.278,867,35.305]],["name/14-3",[]],["text/14-3",[]],["component/14-3",[]],["title/14-4",[44,21.394,111,15.203,234,16.588,243,17.47,313,17.47,513,20.868,746,22.662]],["name/14-4",[]],["text/14-4",[]],["component/14-4",[]],["title/14-5",[44,19.397,111,13.784,243,15.839,380,18.491,513,18.92,554,16.303,746,20.546,1523,26.829]],["name/14-5",[]],["text/14-5",[]],["component/14-5",[]],["title/14-6",[159,18.96,225,25.642,387,24.509,517,21.818,518,24.509]],["name/14-6",[]],["text/14-6",[]],["component/14-6",[]],["title/14-7",[159,24.61,317,35.305,319,32.79,874,35.305]],["name/14-7",[]],["text/14-7",[]],["component/14-7",[]],["title/14",[54,26.653,196,28.918,402,39.873]],["name/14",[54,0.17,196,0.185,402,0.255]],["text/14",[0,1.053,10,0.246,13,0.267,20,0.578,24,1.286,28,3.621,44,1.092,46,0.448,52,0.947,53,0.258,54,1.294,58,0.769,59,0.528,62,0.539,63,3.018,69,0.272,85,0.297,88,1.347,89,0.243,94,0.267,98,0.262,105,1.07,109,3.656,110,1.675,111,2.697,112,0.306,115,0.519,133,0.555,159,1.864,167,0.315,172,0.306,176,0.254,181,0.272,182,0.448,187,0.904,192,1.329,195,0.803,196,0.236,201,0.422,207,0.272,208,0.306,210,0.478,211,0.233,212,0.563,214,0.254,225,3.13,232,0.756,233,0.272,234,2.083,237,1.978,243,3.905,248,0.77,252,2.305,254,0.228,260,0.539,264,0.284,266,0.633,278,0.509,288,0.415,292,0.73,296,0.258,299,0.381,311,0.485,313,0.243,317,0.659,326,2.85,339,0.297,340,2.416,342,1.152,346,0.551,350,0.563,353,0.29,373,3.338,375,0.509,378,0.963,380,0.551,381,0.267,382,0.24,384,0.892,385,0.786,387,0.594,388,0.501,390,1.347,396,0.326,398,0.719,400,0.246,415,0.786,421,0.519,422,0.594,425,0.326,428,0.659,430,0.326,432,0.315,433,1.019,439,0.236,446,0.509,448,1.325,455,0.315,456,0.25,465,0.306,468,0.77,473,0.267,477,1.365,478,0.326,494,0.306,497,0.326,499,0.284,502,0.378,504,0.528,505,1.407,512,0.821,513,0.563,515,0.578,517,1.215,518,0.594,519,0.339,521,0.378,522,0.659,523,0.306,529,1.325,554,0.25,559,0.326,562,0.493,571,2.945,574,0.284,587,1.515,588,1.07,590,0.297,591,1.973,595,5.502,596,3.413,597,4.092,598,1.973,599,4.588,600,2.5,601,1.973,603,1.973,604,1.973,606,1.973,607,1.857,609,2.5,611,1.973,613,1.973,615,1.973,617,1.973,648,1.007,651,0.356,680,0.339,715,0.284,720,0.29,729,0.633,735,1.462,736,0.326,749,0.73,753,0.297,784,0.339,854,0.326,860,0.339,863,0.284,867,1.515,877,0.356,906,0.315,973,0.297,979,0.356,987,1.245,989,2.57,993,1.07,1015,1.007,1035,0.842,1075,1.589,1118,0.659,1119,1.007,1134,0.326,1165,0.378,1209,0.356,1224,0.339,1243,0.339,1285,1.688,1303,0.659,1312,0.612,1350,0.356,1383,0.378,1451,0.691,1467,3.413,1470,1.07,1473,0.691,1485,0.378,1522,3.247,1524,0.315,1525,0.356,1526,1.857,1527,0.378,1528,1.857,1529,0.691,1530,2.157,1531,2.245,1532,0.411,1533,0.378,1534,0.411,1535,3.716,1536,3.716,1537,3.716,1538,1.165,1539,1.07,1540,0.799,1541,0.356,1542,0.411,1543,0.378,1544,0.411,1545,0.411,1546,0.378,1547,0.378,1548,2.442,1549,0.799,1550,0.734,1551,0.411,1552,0.411,1553,2.148,1554,0.411,1555,1.838,1556,1.838,1557,1.838,1558,1.838,1559,0.378,1560,0.356,1561,1.838,1562,0.378,1563,0.612,1564,0.411,1565,0.411,1566,0.821,1567,0.411,1568,0.411,1569,0.734,1570,0.411,1571,0.411,1572,1.165,1573,0.411,1574,1.165,1575,0.411,1576,1.51,1577,1.51,1578,1.51,1579,1.51,1580,1.51,1581,1.165,1582,0.378,1583,0.734,1584,0.411,1585,1.51,1586,1.51,1587,0.411]],["component/14",[1,0.233]],["title/15-1",[54,41.013]],["name/15-1",[]],["text/15-1",[]],["component/15-1",[]],["title/15-2",[54,32.31,254,33.783]],["name/15-2",[]],["text/15-2",[]],["component/15-2",[]],["title/15",[54,26.653,55,32.083,1588,50.313]],["name/15",[55,0.303,404,0.364]],["text/15",[0,2.459,28,1.624,46,1.719,48,1.483,52,3.991,53,1.923,54,5.08,55,3.199,58,1.579,89,1.81,94,1.99,105,1.786,109,4.209,125,3.457,157,2.651,159,3.658,216,2.278,217,2.348,225,4.427,233,3.317,249,3.727,254,2.778,326,3.568,340,1.786,370,2.069,375,1.955,384,2.961,387,4.729,390,5.085,398,1.892,399,3.537,419,3.626,432,2.348,433,2.069,465,2.278,468,4.21,478,2.43,491,2.528,512,2.162,518,3.727,523,3.727,564,2.651,574,2.113,577,2.278,734,2.43,1224,2.528,1479,2.528,1493,2.348,1589,2.528,1590,4.337,1591,2.816,1592,2.651,1593,3.066,1594,2.816,1595,2.651]],["component/15",[1,0.233]],["title/16-1",[1596,77.419]],["name/16-1",[]],["text/16-1",[]],["component/16-1",[]],["title/16-2",[128,38.53,384,29.703,1597,50.313]],["name/16-2",[]],["text/16-2",[]],["component/16-2",[]],["title/16-3",[1598,71.103]],["name/16-3",[]],["text/16-3",[]],["component/16-3",[]],["title/16-4",[288,31.649,396,48.334]],["name/16-4",[]],["text/16-4",[]],["component/16-4",[]],["title/16-5",[375,38.892,477,45.313]],["name/16-5",[]],["text/16-5",[]],["component/16-5",[]],["title/16-6",[89,36.006,1599,52.737]],["name/16-6",[]],["text/16-6",[]],["component/16-6",[]],["title/16-7",[375,32.083,397,35.481,1600,46.208]],["name/16-7",[]],["text/16-7",[]],["component/16-7",[]],["title/16",[375,49.369]],["name/16",[375,0.58]],["text/16",[0,2.257,10,0.436,13,0.473,21,0.933,24,1.799,28,5,38,0.629,39,0.541,41,0.502,46,0.775,51,0.481,52,0.867,53,0.456,54,2.775,55,0.464,58,0.435,59,0.481,63,0.464,67,1.925,73,2.418,81,1.987,85,0.526,86,0.526,87,0.669,88,0.456,89,3.836,92,0.557,94,1.282,98,1.259,105,0.805,106,0.473,107,0.577,109,3.48,110,0.408,115,0.473,120,0.577,128,0.557,130,0.577,133,1.044,153,0.541,159,0.795,160,0.541,161,1.096,163,1.259,167,0.557,169,0.577,171,0.464,172,0.541,176,1.219,182,0.408,186,1.629,187,0.436,195,0.953,196,1.727,208,0.541,209,1.576,210,1.183,211,1.426,212,0.513,214,0.853,225,1.211,232,0.898,233,0.481,234,0.408,249,1.027,252,0.481,254,0.766,278,0.882,288,2.008,297,1,299,0.982,311,0.442,315,0.491,318,0.669,326,4.255,340,0.424,346,0.953,348,0.953,350,0.513,370,0.491,371,0.456,373,0.975,375,2.711,384,3.959,388,1.884,389,2.381,393,2.199,396,1.565,397,0.975,398,0.449,399,0.513,404,0.557,419,1,420,1.27,421,0.473,427,0.526,448,0.449,467,0.502,473,0.898,477,2.567,478,1.096,480,0.577,499,0.502,522,0.6,539,0.557,555,0.577,562,0.853,574,0.502,577,0.541,590,1.428,618,0.898,654,0.6,662,0.557,668,0.669,680,0.6,690,0.669,693,0.526,705,1.14,715,0.502,720,0.513,735,0.436,753,0.526,779,1.814,790,0.557,807,0.629,813,0.541,840,0.526,841,0.526,852,0.629,855,1.467,863,0.953,888,0.6,913,0.541,922,0.975,949,0.541,959,0.557,962,0.577,975,3.173,983,0.577,988,0.669,989,0.577,992,0.6,1018,1.27,1035,1.428,1070,0.577,1105,0.629,1118,0.6,1119,1.196,1145,1.096,1209,2.173,1226,0.629,1290,0.6,1312,1.513,1320,0.629,1375,0.669,1475,1.814,1479,1.14,1484,1.27,1506,0.669,1507,2.308,1514,0.669,1546,1.814,1590,0.629,1595,0.629,1598,5.319,1599,0.629,1600,0.669,1601,0.669,1602,0.629,1603,0.728,1604,0.728,1605,0.728,1606,0.629,1607,1.383,1608,0.728,1609,1.14,1610,0.669,1611,3.455,1612,0.728,1613,1.383,1614,0.728,1615,0.728,1616,1.975,1617,0.728,1618,1.383,1619,2.513,1620,1.383,1621,0.728,1622,0.728,1623,0.728,1624,0.728,1625,0.728,1626,0.728,1627,0.728,1628,0.669,1629,1.975,1630,0.728,1631,0.728,1632,0.728,1633,0.728,1634,0.728,1635,0.728,1636,1.383,1637,0.728,1638,4.251,1639,1.383,1640,3.005,1641,1.383,1642,1.383,1643,0.728,1644,0.629,1645,0.728,1646,0.728,1647,0.728,1648,0.728,1649,0.728,1650,0.728,1651,1.059,1652,0.669,1653,1.27,1654,0.728,1655,0.728,1656,0.728,1657,0.669,1658,0.728,1659,0.728,1660,0.557,1661,0.728,1662,0.728,1663,0.728]],["component/16",[1,0.233]],["title/17-1",[73,18.269,237,21.148,381,24.189,1664,34.225,1665,32.223]],["name/17-1",[]],["text/17-1",[]],["component/17-1",[]],["title/17-2",[54,26.653,225,24.237,837,46.208]],["name/17-2",[]],["text/17-2",[]],["component/17-2",[]],["title/17-3",[109,31.649,840,44.094]],["name/17-3",[]],["text/17-3",[]],["component/17-3",[]],["title/17-4",[58,19.199,104,42.036]],["name/17-4",[]],["text/17-4",[]],["component/17-4",[]],["title/17-5",[380,34.677,468,33.276,1666,43.505]],["name/17-5",[]],["text/17-5",[]],["component/17-5",[]],["title/17",[378,31.974,468,40.338]],["name/17",[378,0.249,468,0.314]],["text/17",[0,1.869,1,0.9,6,0.87,10,0.72,16,0.953,20,2.221,24,0.72,28,1.627,32,0.953,44,0.87,46,0.674,48,1.633,54,2.361,55,1.411,58,1.581,63,0.767,69,0.796,73,2.185,81,0.796,88,2.391,91,1.694,94,1.436,96,0.767,104,3.072,105,1.789,106,3.261,109,2.867,110,1.24,117,0.992,125,0.829,133,1.347,159,2.191,162,1.225,163,1.411,171,0.767,181,0.796,182,1.24,197,0.87,201,0.619,225,3.678,226,1.493,237,3.136,243,3.763,248,0.796,252,0.796,254,0.666,256,1.493,278,0.767,280,1.105,296,1.387,298,0.87,305,0.767,308,0.894,311,0.731,313,2.966,315,0.812,319,0.921,326,1.24,340,1.789,342,1.387,346,3.072,377,0.848,380,0.829,381,2.893,382,0.7,384,0.71,388,0.754,390,3.15,397,2.166,398,1.365,400,2.283,401,0.953,412,5.824,414,5.824,415,1.493,421,0.781,427,2.221,433,0.812,441,2.166,448,0.742,456,1.867,468,2.032,498,0.992,504,0.796,507,0.848,523,0.894,528,0.781,562,0.742,563,0.953,566,2.282,573,0.992,577,0.894,602,0.953,605,0.992,616,0.992,626,0.992,647,0.812,654,0.992,665,2.533,689,0.767,735,1.325,760,1.04,785,1.644,798,3.021,840,1.6,844,2.032,845,0.992,846,1.105,847,2.032,848,2.032,871,1.04,878,1.105,922,0.848,1011,1.105,1145,0.953,1384,1.105,1451,1.913,1499,1.105,1516,0.992,1526,1.913,1528,1.04,1531,1.824,1560,1.913,1563,0.921,1566,1.56,1609,0.992,1660,0.921,1667,1.105,1668,1.105,1669,1.203,1670,1.913,1671,2.212,1672,2.032,1673,1.203,1674,3.297,1675,0.992,1676,1.04,1677,1.203,1678,1.105,1679,1.04,1680,1.203,1681,1.203,1682,1.04,1683,1.105,1684,1.105,1685,1.203,1686,1.203]],["component/17",[1,0.233]],["title/18-1",[22,33.393,439,35.055]],["name/18-1",[]],["text/18-1",[]],["component/18-1",[]],["title/18-2",[439,35.055,557,45.313]],["name/18-2",[]],["text/18-2",[]],["component/18-2",[]],["title/18-3",[749,31.547,949,37.381,1687,50.313]],["name/18-3",[]],["text/18-3",[]],["component/18-3",[]],["title/18-4",[160,45.313,749,38.242]],["name/18-4",[]],["text/18-4",[]],["component/18-4",[]],["title/18",[69,40.338,439,35.055]],["name/18",[69,0.314,439,0.273]],["text/18",[0,2.608,22,1.307,28,4.066,52,1.497,58,1.281,77,0.784,89,5.506,96,1.522,105,3.098,107,3.225,109,2.112,110,1.338,115,1.55,133,1.607,160,1.774,179,1.611,187,1.43,210,1.43,211,2.31,214,1.473,215,1.579,264,1.646,287,1.579,292,2.552,340,1.39,371,1.497,437,2.064,439,6.099,441,1.684,461,1.646,467,4.33,532,3.225,556,1.684,557,1.774,562,1.473,573,1.969,746,1.828,749,5.848,841,1.726,945,2.064,948,2.064,949,1.774,1035,1.726,1389,6.636,1414,7.524,1415,4.885,1679,2.064,1688,2.193,1689,2.388,1690,2.388,1691,2.388,1692,2.064,1693,4.07,1694,2.388,1695,7.05,1696,8.193,1697,7.05,1698,2.388,1699,2.388]],["component/18",[1,0.233]],["title/19-1",[8,53.359]],["name/19-1",[]],["text/19-1",[]],["component/19-1",[]],["title/19-2",[122,37.633,184,48.334]],["name/19-2",[]],["text/19-2",[]],["component/19-2",[]],["title/19-3",[66,29.703,73,24.665,201,14.067]],["name/19-3",[]],["text/19-3",[]],["component/19-3",[]],["title/19-4",[48,18.027,73,29.9]],["name/19-4",[]],["text/19-4",[]],["component/19-4",[]],["title/19-5",[311,37.06,576,48.334]],["name/19-5",[]],["text/19-5",[]],["component/19-5",[]],["title/19",[7,31.045,689,32.083,1182,36.375]],["name/19",[7,0.198,689,0.205,1182,0.232]],["text/19",[0,1.814,1,2.805,5,2.376,6,0.906,7,2.572,8,0.594,9,0.582,10,0.266,14,0.3,20,0.906,21,0.582,22,2.402,28,4.754,30,1.403,31,2.376,32,1.822,40,0.367,48,1.768,49,0.307,51,0.57,52,1.441,53,1.636,54,1.044,55,0.284,58,1.24,59,0.829,61,0.74,66,2.326,68,0.367,69,0.57,70,0.367,71,0.477,73,2.253,76,0.409,77,0.283,79,0.786,81,0.294,89,2.035,94,0.814,95,0.56,98,0.8,99,0.353,100,0.608,104,0.307,105,0.259,108,0.55,109,1.651,110,1.932,111,1.901,115,1.693,118,0.385,119,0.409,120,0.994,121,0.932,122,1.216,123,0.792,124,0.96,125,0.864,126,0.385,127,0.409,128,0.96,129,1.084,130,0.353,131,0.367,133,0.379,135,1.152,138,0.385,143,0.745,144,0.792,149,0.792,150,0.409,151,0.385,152,0.409,153,0.932,154,2.111,155,0.683,156,0.409,157,0.745,158,0.409,159,0.721,160,0.64,161,0.353,162,2.656,163,0.8,164,0.409,165,0.409,166,0.409,167,0.341,168,0.385,169,0.353,171,2.029,172,0.331,179,0.846,181,1.52,182,0.91,183,1.338,184,1.822,185,0.994,187,0.266,189,1.084,196,1.321,197,0.322,198,1.152,199,0.409,200,0.409,201,2.128,202,0.789,203,0.353,204,0.341,207,0.57,209,0.279,212,1.144,214,1.791,215,2.105,216,0.331,217,0.341,218,0.711,219,0.353,222,1.286,225,2.491,226,0.3,228,0.322,232,0.56,233,0.294,234,0.91,237,1.304,238,0.409,243,1.879,245,0.745,248,0.294,249,0.331,254,0.695,256,0.846,260,1.095,264,0.307,268,0.322,278,0.284,287,0.294,288,0.651,294,0.932,299,0.145,301,1.152,307,1.144,311,0.762,313,0.509,315,0.3,339,0.623,340,0.73,343,0.322,349,0.341,350,0.314,352,0.353,353,0.314,354,0.322,355,0.814,356,0.829,357,0.322,358,0.284,364,0.246,365,1.624,374,0.353,375,0.284,377,0.314,378,0.233,387,0.932,390,0.786,393,0.59,394,0.745,398,0.275,399,0.314,400,0.516,401,0.353,404,0.341,415,0.582,419,0.322,421,0.814,422,0.331,432,0.341,433,0.3,437,0.385,439,0.256,440,0.64,441,0.884,446,0.284,448,1.216,455,0.341,462,0.385,465,0.932,467,0.864,468,0.57,473,0.56,474,0.932,481,0.608,491,0.367,507,0.608,515,0.322,518,0.64,523,0.64,539,0.341,554,0.524,564,0.385,565,0.683,574,0.307,575,0.353,586,0.683,587,0.608,589,0.353,599,0.96,647,0.3,683,0.367,687,0.353,688,0.3,689,0.284,693,0.623,704,0.711,706,0.385,710,0.367,713,0.367,720,0.314,729,0.994,731,0.846,732,0.623,734,0.683,735,0.266,736,0.353,737,0.367,738,0.341,739,0.385,740,0.683,741,0.367,742,0.353,748,0.385,749,1.017,750,0.367,751,0.367,752,0.385,753,0.322,766,0.385,773,0.409,775,0.409,777,0.409,782,0.331,783,0.683,785,0.331,786,0.353,796,0.367,799,0.385,800,0.745,801,1.49,802,2.111,803,0.745,804,0.792,805,0.409,806,0.409,807,0.745,808,0.341,818,0.409,874,0.367,887,0.409,929,0.367,961,0.385,965,0.367,992,0.367,1009,0.385,1020,0.409,1118,0.367,1136,0.367,1224,0.367,1312,0.341,1360,0.409,1448,0.409,1479,0.367,1493,0.341,1495,0.409,1524,0.66,1525,0.745,1591,0.409,1592,0.385,1609,0.367,1651,0.341,1688,0.409,1692,0.385,1700,0.409,1701,0.745,1702,0.445,1703,0.409,1704,0.409,1705,0.445,1706,0.445,1707,0.445,1708,1.254,1709,0.445,1710,0.862,1711,0.445,1712,0.445,1713,0.862,1714,0.862,1715,0.445,1716,0.445,1717,0.445,1718,0.445,1719,0.445,1720,0.862,1721,0.862,1722,0.884,1723,0.409,1724,0.367,1725,0.445,1726,0.862,1727,0.385,1728,0.385,1729,0.445,1730,0.385,1731,0.385,1732,2.903,1733,3.447,1734,0.445,1735,0.409,1736,0.385,1737,0.445,1738,0.445,1739,0.445,1740,0.445,1741,0.445,1742,0.445,1743,1.152,1744,0.445,1745,0.445,1746,0.409,1747,0.385,1748,0.409,1749,0.409,1750,0.445]],["component/19",[1,0.233]],["title/20-1",[8,53.359]],["name/20-1",[]],["text/20-1",[]],["component/20-1",[]],["title/20-2",[1,20.473,8,34.677,33,38.53]],["name/20-2",[]],["text/20-2",[]],["component/20-2",[]],["title/20-3",[1,17.423,5,29.511,42,35.305,60,33.932]],["name/20-3",[]],["text/20-3",[]],["component/20-3",[]],["title/20-4",[66,29.703,73,24.665,201,14.067]],["name/20-4",[]],["text/20-4",[]],["component/20-4",[]],["title/20-5",[22,33.393,201,17.052]],["name/20-5",[]],["text/20-5",[]],["component/20-5",[]],["title/20-6",[66,36.006,73,29.9]],["name/20-6",[]],["text/20-6",[]],["component/20-6",[]],["title/20-7",[48,18.027,73,29.9]],["name/20-7",[]],["text/20-7",[]],["component/20-7",[]],["title/20-8",[48,18.027,53,38.242]],["name/20-8",[]],["text/20-8",[]],["component/20-8",[]],["title/20-9",[14,41.15,48,18.027]],["name/20-9",[]],["text/20-9",[]],["component/20-9",[]],["title/20-10",[58,11.731,201,10.419,313,22,391,25.684,392,30.727]],["name/20-10",[]],["text/20-10",[]],["component/20-10",[]],["title/20-11",[79,26.847,106,27.792,108,27.304,647,28.889]],["name/20-11",[]],["text/20-11",[]],["component/20-11",[]],["title/20-12",[58,15.838,112,37.381,114,36.375]],["name/20-12",[]],["text/20-12",[]],["component/20-12",[]],["title/20",[4,36.375,689,32.083,1182,36.375]],["name/20",[4,0.232,689,0.205,1182,0.232]],["text/20",[0,2.298,1,2.362,2,1.489,3,0.334,4,2.492,5,1.854,6,0.831,8,3.103,9,1.006,10,0.472,11,2.471,12,1.666,13,0.512,14,1.431,15,0.334,16,0.625,17,1.369,18,0.334,19,0.351,20,1.534,21,0.532,22,1.321,23,1.108,24,0.243,25,0.854,26,1.431,27,1.108,28,5.006,29,0.854,30,0.681,31,2.036,33,0.88,37,4.053,39,1.793,40,0.65,44,0.831,46,0.644,48,1.906,49,1.251,51,0.986,52,0.254,53,0.935,54,2.064,55,0.733,56,0.351,57,0.373,58,1.085,59,0.76,60,0.911,61,1.071,62,0.274,63,0.259,64,0.88,65,0.373,66,1.744,68,0.334,69,0.268,71,0.225,73,2.55,74,0.911,77,0.697,78,0.65,79,2.443,81,0.268,83,0.334,88,0.494,89,2.171,90,0.321,91,0.311,92,0.311,94,0.968,95,0.263,98,0.259,100,0.556,104,0.792,105,0.236,106,0.512,108,1.539,109,1.252,110,1.932,111,1.518,112,0.301,114,0.293,115,1.566,117,0.948,118,0.351,120,1.181,121,0.585,129,0.351,130,0.321,131,0.334,133,0.347,147,0.724,159,0.453,162,1.175,163,1.157,168,0.351,171,1.884,172,0.585,176,0.486,179,0.532,181,0.76,182,0.442,185,0.321,187,0.688,192,0.293,194,0.351,196,1.387,201,1.769,207,0.521,208,0.301,209,0.494,210,0.688,211,0.447,212,1.051,213,0.373,214,1.309,215,1.954,218,0.65,219,0.321,222,0.625,225,1.771,228,0.293,232,0.263,234,0.836,236,0.681,237,0.652,242,0.65,243,2.424,248,0.268,252,0.268,254,0.437,256,0.274,258,0.373,260,1.006,268,0.293,278,0.259,287,0.268,288,0.774,291,0.373,294,1.576,295,0.681,296,0.254,297,0.293,298,0.293,299,0.376,300,0.373,309,0.334,311,0.479,313,1.071,315,0.274,326,0.227,339,0.293,340,0.459,343,0.293,349,0.311,350,0.286,364,0.637,365,0.334,366,0.556,370,0.274,371,1.138,374,0.625,378,0.213,382,0.236,383,0.351,384,0.239,388,0.254,390,1.138,391,1.251,393,0.543,398,0.486,399,0.286,400,0.243,401,0.321,415,0.532,421,0.968,425,0.321,426,0.373,427,0.831,439,0.233,441,0.556,446,0.733,448,1.12,453,0.334,455,0.311,461,0.28,474,0.301,481,0.556,499,0.28,507,0.286,515,0.293,517,0.268,524,1.055,525,0.724,526,0.373,527,0.373,528,0.263,532,0.625,544,0.334,545,0.321,546,0.373,547,0.301,548,0.65,549,0.724,550,0.351,551,0.373,552,0.373,556,0.286,557,0.301,558,0.334,559,0.321,560,0.373,561,0.373,565,0.321,566,0.585,575,0.321,583,0.724,584,0.724,586,0.911,587,0.81,589,0.625,599,1.39,618,0.512,647,0.532,655,0.65,672,0.373,678,0.65,687,0.911,688,0.274,689,0.259,693,0.293,700,0.351,713,0.334,715,0.28,720,0.81,729,0.625,734,0.625,735,0.243,736,0.321,737,0.948,738,0.311,739,0.351,740,0.321,741,0.334,742,0.321,743,0.351,747,0.351,748,0.351,749,0.721,750,0.334,751,0.334,752,0.351,753,0.293,782,0.301,786,0.321,788,0.351,808,0.311,826,0.373,855,0.301,864,0.351,874,0.334,876,0.373,933,0.301,949,0.585,973,0.293,992,0.334,1035,0.57,1219,0.373,1243,0.334,1290,0.334,1493,0.311,1494,0.65,1524,0.88,1531,0.334,1560,0.351,1602,0.351,1606,0.351,1610,0.373,1651,0.311,1660,0.311,1670,0.351,1674,0.351,1676,0.994,1703,1.369,1722,0.556,1723,0.373,1724,0.334,1727,0.351,1728,0.351,1730,0.681,1731,0.351,1735,0.373,1736,0.351,1743,1.369,1751,0.406,1752,0.406,1753,0.788,1754,0.948,1755,0.406,1756,0.406,1757,0.406,1758,0.406,1759,0.406,1760,0.788,1761,0.406,1762,0.406,1763,0.406,1764,0.406,1765,0.406,1766,0.406,1767,0.406,1768,0.406,1769,0.406,1770,0.406,1771,0.406,1772,0.406,1773,0.406,1774,0.406,1775,0.406,1776,0.406,1777,0.406,1778,0.406,1779,0.406,1780,0.406,1781,0.406,1782,0.406,1783,0.406,1784,0.406,1785,0.373,1786,0.788,1787,0.406,1788,0.406,1789,0.406,1790,0.406,1791,2.413,1792,0.406,1793,0.351,1794,0.406,1795,1.149,1796,0.373,1797,0.373,1798,0.406,1799,0.406,1800,0.406,1801,0.406,1802,0.406,1803,0.406,1804,0.788,1805,0.788,1806,0.788,1807,0.406,1808,0.406,1809,0.788,1810,0.406,1811,0.406,1812,0.406,1813,0.373,1814,0.373,1815,0.406,1816,0.406,1817,0.406,1818,0.406,1819,0.406,1820,0.788,1821,0.406,1822,0.406]],["component/20",[1,0.233]],["title/21",[196,35.055,1823,56.014]],["name/21",[1287,0.835]],["text/21",[0,3.672,1,3.949,2,3.544,4,4.861,5,3.959,6,4.153,7,4.149,8,5.588,21,1.789,31,4.634,33,4.399,37,3.845,46,1.486,48,2.396,49,1.828,55,1.691,58,0.835,59,1.754,66,2.625,73,3.974,121,1.97,133,0.801,181,2.941,196,1.524,214,1.636,225,2.142,237,2.524,254,1.469,292,1.663,311,1.611,313,1.565,326,1.486,377,1.87,381,2.887,388,1.663,389,2.101,398,1.636,400,1.588,402,3.524,419,1.917,421,2.887,433,1.789,461,1.828,467,1.828,499,1.828,538,2.293,566,1.97,678,3.667,688,1.789,689,2.836,738,2.031,1035,3.215,1182,3.215,1376,2.435,1494,2.186,1590,2.293,1651,2.031,1660,2.031,1749,4.084,1824,3.845,1825,4.447,1826,2.293]],["component/21",[1,0.233]],["title/22-1",[53,38.242,1827,50.289]],["name/22-1",[]],["text/22-1",[]],["component/22-1",[]],["title/22",[1358,38.53,1827,41.485,1828,37.381]],["name/22",[1827,0.392,1828,0.353]],["text/22",[0,2.831,46,3.237,48,1.707,58,1.818,61,3.409,109,2.997,159,4.677,225,2.782,304,6.813,305,3.682,308,4.29,320,4.993,321,4.993,507,4.072,691,4.576,973,4.175,1452,4.993,1491,3.896,1754,4.761,1827,8.436,1829,5.775,1830,4.993,1831,5.303,1832,5.303,1833,5.303,1834,5.303,1835,5.303,1836,5.303]],["component/22",[1,0.233]],["title/23-1",[53,38.242,304,44.094]],["name/23-1",[]],["text/23-1",[]],["component/23-1",[]],["title/23",[304,36.375,1358,38.53,1828,37.381]],["name/23",[304,0.343,1828,0.353]],["text/23",[22,2.468,28,6.301,48,2.008,58,1.419,89,2.661,98,2.874,225,2.171,234,2.527,267,3.898,303,7.068,304,4.911,305,2.874,308,3.349,329,6.238,330,4.14,331,4.14,332,6.238,333,6.238,353,3.179,354,3.259,355,4.409,356,2.981,357,3.259,358,2.874,359,4.14,360,4.14,361,4.14,507,3.179,840,3.259,1491,3.041,1704,4.14,1754,3.717,1828,3.349,1830,3.898,1837,4.508]],["component/23",[1,0.233]],["title/24-1",[53,38.242,1838,50.289]],["name/24-1",[]],["text/24-1",[]],["component/24-1",[]],["title/24",[205,39.873,1358,38.53,1838,41.485]],["name/24",[205,0.376,1838,0.392]],["text/24",[0,1.982,28,4.926,46,2.266,48,2.259,54,2.142,58,2.406,66,4.512,73,3.065,77,2.825,95,2.624,100,7.468,108,2.578,109,2.098,162,4.233,182,2.266,186,3.334,201,1.748,234,2.266,260,2.728,353,2.851,354,2.923,355,4.058,356,2.674,357,2.923,358,2.578,400,2.421,667,3.334,691,3.204,732,2.923,762,3.496,1563,3.096,1838,6.302,1839,3.713,1840,3.713,1841,5.405,1842,3.713,1843,3.713,1844,3.713]],["component/24",[1,0.233]],["title/25-1",[53,38.242,101,48.334]],["name/25-1",[]],["text/25-1",[]],["component/25-1",[]],["title/25",[101,48.334,1358,46.707]],["name/25",[101,0.72]],["text/25",[0,3.124,48,1.883,58,2.006,61,3.761,73,3.124,101,8.459,159,3.662,207,4.214,225,3.069,304,7.179,305,4.063,308,4.734,734,5.049,973,4.606,1491,4.299,1832,5.852,1833,5.852,1834,5.852,1835,5.852,1836,5.852,1845,6.372,1846,5.509]],["component/25",[1,0.233]],["title/26-1",[53,38.242,1847,50.289]],["name/26-1",[]],["text/26-1",[]],["component/26-1",[]],["title/26",[1358,46.707,1847,50.289]],["name/26",[1847,0.75]],["text/26",[0,1.503,18,5.248,22,3.485,28,5.257,46,1.719,48,1.881,54,1.624,58,2.004,66,3.758,73,2.459,77,2.416,95,1.99,98,1.955,100,6.762,108,1.955,109,1.591,162,4.073,182,1.719,186,2.528,201,1.78,211,1.74,234,2.812,260,2.069,353,2.162,354,3.626,355,3.256,356,2.028,357,3.626,358,1.955,400,1.836,446,3.199,667,2.528,691,2.43,732,2.217,762,2.651,820,5.846,863,2.113,949,2.278,1460,2.816,1563,2.348,1839,2.816,1840,2.816,1841,4.337,1842,2.816,1843,2.816,1844,2.816,1847,5.248,1848,3.066,1849,5.016,1850,3.066,1851,3.066,1852,3.066,1853,3.066,1854,3.066,1855,3.066]],["component/26",[1,0.233]],["title/27-1",[48,14.871,55,32.083,371,31.547]],["name/27-1",[]],["text/27-1",[]],["component/27-1",[]],["title/27-2",[48,12.656,55,27.304,401,33.932,1856,35.305]],["name/27-2",[]],["text/27-2",[]],["component/27-2",[]],["title/27-3",[1,24.818,691,48.334]],["name/27-3",[]],["text/27-3",[]],["component/27-3",[]],["title/27-4",[391,34.677,422,37.381,1857,43.505]],["name/27-4",[]],["text/27-4",[]],["component/27-4",[]],["title/27-5",[73,24.665,133,15.203,237,28.553]],["name/27-5",[]],["text/27-5",[]],["component/27-5",[]],["title/27-6",[237,24.299,390,26.847,574,29.511,767,35.305]],["name/27-6",[]],["text/27-6",[]],["component/27-6",[]],["title/27",[414,41.485,1674,43.505,1858,50.313]],["name/27",[411,0.75]],["text/27",[0,2.081,1,1.372,13,0.67,22,0.294,26,1.007,28,0.547,32,0.425,35,0.79,39,0.767,41,0.37,43,0.411,46,0.837,48,0.899,49,0.37,50,0.492,52,0.647,55,1.479,58,0.325,59,1.27,62,0.362,66,0.609,67,0.411,69,1.781,70,0.442,71,0.297,73,3.022,77,0.339,94,0.348,95,0.348,96,0.342,102,0.893,105,0.601,106,0.969,108,0.342,109,0.774,110,0.837,121,1.427,125,0.37,126,1.661,131,0.442,133,0.701,153,1.427,155,0.425,167,0.411,169,0.818,171,0.342,172,0.398,176,1.185,181,0.683,182,0.837,190,0.425,191,0.442,196,0.858,197,1.079,201,0.649,205,0.425,207,0.355,208,0.398,209,0.647,210,0.321,211,0.586,214,1.877,216,0.398,217,0.411,225,2.706,226,0.696,232,0.67,237,3.4,243,1.369,248,0.355,254,1.064,255,0.425,256,0.362,263,0.425,264,0.37,278,0.658,287,0.355,292,0.336,293,0.411,296,0.647,297,0.746,298,0.388,309,0.442,311,0.627,313,1.134,321,2.329,326,0.301,340,0.601,341,0.442,342,1.204,343,0.388,346,0.37,347,0.851,348,0.711,349,0.79,364,0.297,371,0.936,375,0.342,378,0.541,382,0.312,383,0.893,384,1.59,388,0.647,390,2.307,391,2.737,397,1.354,398,1.662,400,1.389,410,0.492,415,1.007,421,1.506,425,0.818,431,0.442,432,0.411,439,0.308,441,1.636,446,0.658,448,0.921,455,1.143,456,0.627,461,0.37,463,0.442,465,0.767,467,1.324,468,0.683,473,0.348,476,0.492,479,0.442,481,0.728,491,1.583,494,0.398,496,0.442,498,1.231,499,1.029,504,1.27,506,0.492,507,0.378,515,0.388,523,0.398,528,0.348,529,0.331,532,0.818,536,0.442,539,1.143,544,1.231,553,0.442,554,0.326,555,0.425,556,0.728,559,0.425,562,0.637,563,0.818,566,1.723,575,1.183,576,0.818,618,0.67,644,0.398,647,0.362,655,0.851,658,0.442,665,0.442,667,0.851,679,0.948,683,1.231,688,0.362,689,0.658,704,0.851,715,0.37,733,0.425,735,0.321,738,0.411,740,0.818,745,0.442,753,1.388,763,0.464,785,0.767,787,0.425,793,0.464,795,0.851,796,0.442,797,0.442,803,0.464,840,0.746,841,0.388,845,0.442,855,2.504,884,1.838,890,0.464,931,0.818,933,1.109,944,0.442,953,0.425,959,1.776,978,0.464,1134,2.134,1153,0.948,1167,0.442,1207,0.492,1243,0.442,1357,0.492,1362,0.492,1381,0.948,1392,0.492,1398,0.492,1418,0.492,1422,0.464,1442,0.492,1452,0.464,1491,1.296,1493,1.471,1511,0.464,1516,1.913,1524,0.411,1529,0.464,1547,0.492,1559,0.948,1563,1.143,1589,0.442,1592,0.464,1594,0.492,1599,0.464,1601,0.492,1602,0.464,1606,0.464,1628,0.492,1644,0.464,1651,1.471,1652,0.492,1653,0.948,1660,1.776,1665,0.464,1666,0.464,1668,0.492,1670,1.29,1672,0.492,1675,0.851,1676,0.464,1679,0.464,1701,0.464,1731,0.464,1746,0.492,1828,0.398,1830,2.006,1846,0.464,1856,0.442,1857,3.433,1859,0.492,1860,1.92,1861,0.536,1862,1.032,1863,0.893,1864,1.032,1865,1.764,1866,0.536,1867,0.536,1868,0.536,1869,0.536,1870,0.536,1871,1.032,1872,0.492,1873,0.536,1874,0.492,1875,1.032,1876,0.492,1877,1.764,1878,0.536,1879,0.492,1880,0.536,1881,0.536,1882,0.492,1883,0.464,1884,1.032,1885,1.92,1886,0.536,1887,0.536,1888,0.536,1889,0.536,1890,0.948,1891,1.371,1892,1.492,1893,1.492,1894,0.536,1895,0.536,1896,0.536,1897,1.92,1898,0.492,1899,0.536,1900,0.536,1901,1.032,1902,0.948,1903,0.536,1904,0.536,1905,0.536,1906,1.032,1907,0.948,1908,0.948,1909,0.536,1910,0.536,1911,0.536,1912,0.536,1913,0.536,1914,0.536,1915,0.536,1916,1.032,1917,0.536,1918,0.536,1919,0.536,1920,0.536,1921,0.536,1922,0.536,1923,0.536,1924,2.32,1925,0.536,1926,0.536,1927,0.536,1928,0.536,1929,0.492,1930,1.032,1931,0.536,1932,0.536,1933,1.032,1934,0.536,1935,1.032,1936,0.536,1937,0.536,1938,0.536,1939,1.032,1940,0.536,1941,0.536,1942,0.536,1943,0.536,1944,0.492,1945,0.536,1946,0.536,1947,0.536,1948,0.536,1949,0.536,1950,0.464,1951,0.536,1952,0.536,1953,0.536,1954,0.536,1955,0.536,1956,0.536,1957,0.536,1958,1.032,1959,0.536,1960,0.536,1961,0.893,1962,1.032,1963,1.032,1964,0.536,1965,0.536,1966,0.536,1967,0.536,1968,0.536,1969,0.536,1970,0.536,1971,0.536,1972,0.536,1973,0.492,1974,0.536,1975,1.032,1976,0.536,1977,0.536,1978,0.536,1979,0.492,1980,0.536,1981,0.536,1982,0.492,1983,1.032,1984,0.536,1985,0.536,1986,0.464,1987,0.536,1988,1.032,1989,0.492,1990,0.536,1991,0.536]],["component/27",[1,0.233]],["title/28-1",[391,53.359]],["name/28-1",[]],["text/28-1",[]],["component/28-1",[]],["title/28-2",[296,38.242,1665,52.737]],["name/28-2",[]],["text/28-2",[]],["component/28-2",[]],["title/28-3",[391,34.677,664,43.505,1986,43.505]],["name/28-3",[]],["text/28-3",[]],["component/28-3",[]],["title/28-4",[292,23.366,517,24.647,1986,32.223,1992,37.265,1993,37.265]],["name/28-4",[]],["text/28-4",[]],["component/28-4",[]],["title/28-5",[1,31.503]],["name/28-5",[]],["text/28-5",[]],["component/28-5",[]],["title/28-6",[973,44.094,1722,43.011]],["name/28-6",[]],["text/28-6",[]],["component/28-6",[]],["title/28",[1,31.503]],["name/28",[1,0.37]],["text/28",[0,2.002,1,1.315,2,0.314,4,0.368,5,0.35,6,0.368,8,0.676,10,0.587,13,0.922,16,0.403,19,0.44,20,0.368,24,0.304,28,2.664,39,0.378,41,1.527,46,0.796,47,0.44,48,1.767,49,0.676,52,0.615,53,1.389,55,1.412,58,1.017,59,1.211,61,0.579,67,1.088,69,0.336,71,0.282,73,1.584,79,0.615,81,0.649,91,0.389,93,0.389,95,0.636,96,0.906,100,0.359,102,1.228,104,0.35,105,0.571,106,1.188,109,1.149,110,1.444,115,0.922,124,0.389,125,0.35,133,0.88,153,0.378,159,0.292,162,0.543,163,0.324,167,0.389,171,0.625,173,0.901,196,0.292,201,1.345,204,0.389,207,0.939,210,0.587,211,0.556,214,0.314,215,0.336,225,3.655,226,0.343,228,0.368,232,0.636,237,2.318,243,1.72,245,0.44,249,0.378,254,1.014,255,0.403,256,0.662,259,0.467,278,0.625,287,1.211,292,0.615,293,1.088,297,0.709,298,0.368,299,0.166,308,0.378,309,0.419,311,0.309,313,2.253,320,0.44,340,1.882,343,0.368,346,1.527,348,0.35,350,0.359,355,0.33,364,0.282,366,0.359,370,0.662,371,0.615,374,0.403,378,1.852,380,0.35,381,0.636,382,0.296,384,0.579,387,0.378,388,1.148,390,2.215,391,4,397,1.002,398,1.798,399,1.002,400,2.88,402,0.403,404,0.389,412,1.228,414,0.809,415,0.662,419,1.027,421,1.188,422,1.36,425,1.126,429,0.389,431,0.419,432,0.389,433,1.494,439,0.292,440,1.055,441,1.291,456,0.863,458,2.676,462,1.583,463,0.419,465,0.378,467,0.676,468,0.939,479,0.419,480,2.561,481,1.002,496,0.419,497,0.777,499,1.527,503,1.228,504,0.649,507,0.359,513,0.359,517,0.336,523,0.378,528,0.636,538,0.848,539,1.402,544,0.419,545,0.777,554,0.309,555,0.777,556,0.359,557,0.378,559,0.403,562,0.314,563,0.403,566,2.165,572,0.419,574,1.527,587,0.359,618,0.33,644,0.378,647,0.343,651,0.44,655,0.809,665,0.809,671,0.44,683,0.809,688,0.958,689,1.167,693,0.709,704,0.419,711,0.419,715,0.676,733,0.403,735,0.304,740,1.451,741,0.419,753,1.862,761,0.44,763,1.228,785,1.055,786,0.777,795,0.419,797,0.419,840,2.953,843,1.002,855,0.378,888,0.809,894,0.419,898,0.467,922,0.692,931,0.403,933,0.378,944,1.51,949,1.36,976,0.467,983,0.403,1009,0.44,1010,0.467,1070,0.403,1134,1.755,1135,0.44,1145,0.403,1158,0.467,1182,1.027,1230,0.419,1231,0.901,1466,0.467,1491,0.958,1516,0.419,1524,0.389,1527,0.467,1530,0.403,1541,0.848,1563,2.923,1589,0.809,1609,0.809,1651,1.402,1657,0.467,1660,1.696,1664,1.304,1675,0.419,1682,0.44,1700,0.901,1701,0.848,1722,0.359,1736,0.44,1793,0.44,1823,0.467,1828,0.378,1846,0.44,1856,0.419,1857,0.848,1863,0.44,1865,2.365,1872,0.901,1874,0.901,1876,0.467,1879,0.467,1883,0.44,1890,0.467,1891,0.467,1898,0.901,1902,0.467,1907,0.467,1908,0.901,1929,0.901,1944,0.467,1950,0.44,1961,2.227,1973,0.901,1979,0.467,1989,0.467,1994,0.508,1995,0.508,1996,0.467,1997,0.981,1998,0.508,1999,0.44,2000,1.831,2001,0.467,2002,0.508,2003,0.508,2004,0.508,2005,0.508,2006,0.508,2007,0.508,2008,0.508,2009,0.508,2010,0.508,2011,0.467,2012,0.508,2013,0.508,2014,0.981,2015,0.508,2016,0.508,2017,0.508,2018,0.508,2019,0.508,2020,0.508,2021,0.508,2022,0.467,2023,0.508,2024,0.508,2025,0.508,2026,0.901,2027,0.508,2028,0.508,2029,0.508,2030,0.508,2031,0.508,2032,0.508,2033,0.508,2034,0.508,2035,0.981,2036,1.831,2037,0.508,2038,0.508,2039,0.508,2040,0.508,2041,0.508,2042,0.508,2043,0.508,2044,0.508,2045,0.508,2046,0.508,2047,0.508,2048,0.508,2049,0.508,2050,1.831,2051,0.508,2052,0.508,2053,1.42,2054,0.467,2055,0.508,2056,0.508,2057,0.508,2058,0.508,2059,0.981,2060,1.451,2061,0.508,2062,0.508,2063,0.981,2064,0.508,2065,0.508,2066,0.508,2067,0.508,2068,0.508,2069,0.508,2070,0.508,2071,0.508,2072,0.508,2073,0.508,2074,0.508,2075,0.508,2076,0.508,2077,0.508,2078,0.508,2079,0.508,2080,0.508,2081,0.508]],["component/28",[1,0.233]],["title/29-1",[1797,71.103]],["name/29-1",[]],["text/29-1",[]],["component/29-1",[]],["title/29-2",[159,35.055,216,45.313]],["name/29-2",[]],["text/29-2",[]],["component/29-2",[]],["title/29-3",[21,33.946,735,30.126,1566,35.481]],["name/29-3",[]],["text/29-3",[]],["component/29-3",[]],["title/29",[133,15.203,735,30.126,2060,39.873]],["name/29",[732,0.343,1566,0.335]],["text/29",[0,1.297,1,1.076,2,1.162,10,1.128,13,0.656,21,1.785,22,1.032,26,2.994,28,5.778,33,1.443,35,0.774,42,0.834,43,0.774,46,1.056,48,1.452,54,1.756,58,0.318,64,0.774,71,1.465,73,0.496,83,1.553,88,1.181,89,0.597,93,1.443,96,0.645,104,0.697,105,1.54,111,1.359,112,0.751,114,1.912,121,0.751,122,0.624,124,0.774,133,1.485,155,0.801,159,1.083,174,0.834,182,0.567,185,0.801,187,0.605,192,0.731,196,0.581,201,1.093,207,0.669,209,0.634,217,1.443,225,2.574,226,2.994,237,0.574,242,2.181,243,1.562,254,0.56,262,0.929,264,0.697,288,0.525,326,0.567,339,2.396,342,0.634,343,0.731,355,0.656,370,0.682,376,0.929,381,0.656,388,1.659,397,0.713,398,1.632,399,0.713,404,0.774,415,0.682,418,1.271,455,0.774,474,1.4,504,0.669,517,1.246,529,0.624,556,1.329,562,1.162,574,0.697,586,1.493,587,0.713,589,2.096,592,3.222,593,0.834,602,0.801,610,0.874,647,0.682,654,0.834,658,0.834,660,0.874,687,2.096,710,0.834,720,0.713,735,3.2,737,2.181,743,2.287,747,2.287,808,0.774,813,2.463,815,0.929,816,0.929,841,1.362,855,0.751,871,2.866,884,1.493,922,0.713,973,0.731,1035,0.731,1051,1.73,1070,1.493,1075,0.874,1136,0.834,1303,2.181,1330,1.73,1522,3.222,1526,0.874,1528,1.629,1529,0.874,1530,0.801,1531,0.834,1539,0.929,1543,0.929,1550,0.929,1562,0.929,1566,4.929,1569,0.929,1583,1.73,1678,0.929,1682,0.874,1724,1.553,1727,0.874,1728,0.874,1748,0.929,1813,0.929,1814,0.929,1824,0.874,1826,0.874,1831,0.929,1841,0.874,2060,0.801,2082,1.011,2083,1.011,2084,1.011,2085,1.011,2086,1.884,2087,1.011,2088,1.884,2089,1.011,2090,1.884,2091,1.011,2092,1.011,2093,1.011,2094,1.011,2095,1.011,2096,1.011,2097,1.011,2098,1.73,2099,0.929,2100,1.011,2101,1.011,2102,1.011,2103,1.884,2104,1.011,2105,1.011,2106,1.011,2107,1.011,2108,1.011,2109,1.011,2110,1.011,2111,1.011,2112,1.011,2113,1.011,2114,1.011,2115,1.011,2116,1.011,2117,1.011,2118,1.011,2119,1.011,2120,1.011,2121,1.011,2122,1.884,2123,1.884,2124,1.884,2125,1.884,2126,1.884,2127,1.011,2128,1.011,2129,1.011,2130,1.884,2131,1.011,2132,1.011,2133,1.011,2134,1.011,2135,1.011,2136,1.011,2137,1.011,2138,1.011,2139,1.011,2140,1.011]],["component/29",[1,0.233]],["title/30-1",[225,24.237,814,37.381,1491,33.946]],["name/30-1",[]],["text/30-1",[]],["component/30-1",[]],["title/30-2",[1,13.423,181,21.818,225,15.891,415,22.257,814,24.509,1491,22.257]],["name/30-2",[]],["text/30-2",[]],["component/30-2",[]],["title/30-3",[225,15.891,735,19.752,814,24.509,1491,22.257,1566,23.263,1999,28.524]],["name/30-3",[]],["text/30-3",[]],["component/30-3",[]],["title/30-4",[10,25.638,159,24.61,232,27.792,1722,30.195]],["name/30-4",[]],["text/30-4",[]],["component/30-4",[]],["title/30-5",[24,22.313,225,17.952,232,24.189,1530,29.533,1722,26.28]],["name/30-5",[]],["text/30-5",[]],["component/30-5",[]],["title/30-6",[63,27.304,133,12.938,517,28.318,1722,30.195]],["name/30-6",[]],["text/30-6",[]],["component/30-6",[]],["title/30-7",[133,12.938,252,28.318,1722,30.195,1747,37.023]],["name/30-7",[]],["text/30-7",[]],["component/30-7",[]],["title/30",[225,17.952,735,22.313,814,27.687,1491,25.143,1566,26.28]],["name/30",[735,0.145,814,0.18,1566,0.171,2141,0.243]],["text/30",[0,0.948,1,0.611,10,2.391,20,0.752,22,0.569,24,2.712,28,4.797,48,0.444,52,1.212,58,1.257,61,0.614,62,0.364,63,1.233,67,0.414,79,1.464,86,0.391,89,0.319,93,0.414,96,1.233,104,0.717,106,0.675,109,2.35,110,2.808,111,1.573,115,0.975,133,2.06,134,0.467,159,3.999,169,0.428,171,0.958,176,0.333,179,0.364,182,0.842,195,0.372,196,0.598,201,0.653,207,0.357,210,0.323,211,0.307,214,0.333,215,0.357,224,0.428,225,3.857,226,0.701,237,3.415,243,1.141,248,0.357,254,0.299,288,0.539,292,0.942,296,0.339,299,0.632,310,0.496,311,0.328,313,0.614,339,0.752,340,1.126,341,0.445,343,1.688,346,3.291,371,0.339,379,0.445,381,0.675,384,0.614,388,0.339,389,0.428,390,2.84,391,1.609,397,0.381,398,1.193,400,0.9,415,1.304,418,0.364,427,0.752,429,0.414,431,3.051,433,1.575,439,0.864,440,0.772,441,0.381,444,0.428,448,0.641,453,0.857,456,0.913,463,1.239,464,1.239,477,0.401,480,0.428,496,0.445,499,1.333,517,0.688,518,1.436,522,0.445,529,0.333,532,0.428,539,0.414,540,0.496,545,1.85,556,0.381,562,0.333,563,0.428,566,0.401,572,1.239,573,0.445,574,1.609,618,0.675,644,0.772,664,1.299,688,0.701,693,0.391,711,0.857,712,0.467,720,0.381,735,2.03,745,0.445,749,0.652,787,0.428,795,0.445,798,1.532,814,0.772,843,0.381,845,1.925,849,0.467,888,0.445,890,0.899,904,0.391,922,0.381,952,0.467,972,3.691,989,0.428,1071,0.496,1134,0.824,1139,1.776,1223,0.496,1350,0.467,1490,0.496,1491,1.304,1493,1.481,1511,0.899,1522,3.292,1524,1.481,1525,0.467,1530,4.146,1533,0.496,1566,2.816,1582,0.496,1589,0.445,1595,0.899,1666,0.467,1667,0.496,1675,0.445,1683,0.496,1692,0.467,1722,2.61,1724,0.445,1730,0.899,1747,1.672,1785,2.489,1793,0.467,1824,0.467,1856,0.445,1859,0.496,1877,0.496,1882,0.955,1950,0.899,1961,3.691,1982,0.496,1996,0.496,1999,0.899,2001,2.144,2011,0.955,2022,3.667,2026,0.496,2054,0.955,2060,0.428,2098,0.496,2099,1.38,2142,1.04,2143,1.933,2144,0.54,2145,0.54,2146,0.54,2147,0.54,2148,3.061,2149,2.335,2150,0.54,2151,0.54,2152,0.54,2153,1.503,2154,0.54,2155,0.54,2156,1.04,2157,1.04,2158,0.54,2159,0.54,2160,0.54,2161,1.04,2162,1.04,2163,1.503,2164,1.503,2165,1.04,2166,1.04,2167,1.04,2168,1.04,2169,1.04,2170,0.54,2171,1.04,2172,0.54,2173,0.54,2174,0.54,2175,1.04,2176,0.54,2177,0.54,2178,0.54,2179,0.54,2180,1.04,2181,0.54,2182,1.04,2183,5.442,2184,1.933,2185,0.54,2186,0.54,2187,1.503,2188,0.54,2189,1.503,2190,1.503,2191,0.54,2192,0.54,2193,0.54,2194,1.04,2195,1.04,2196,0.54,2197,0.54,2198,0.54,2199,0.54,2200,0.54]],["component/30",[1,0.233]],["title/31",[122,31.045,125,34.677,190,39.873]],["name/31",[190,0.72]],["text/31",[0,1.888,1,1.567,5,2.655,6,2.785,22,1.226,24,2.306,28,5.334,31,3.494,51,1.481,71,2.133,77,1.978,89,1.322,94,1.453,110,1.255,115,3.29,122,3.715,125,4.149,133,1.164,153,2.862,162,2.133,163,1.428,176,1.381,181,1.481,190,7.434,196,1.287,203,1.774,209,1.404,225,1.855,248,1.481,256,3.42,366,1.579,371,2.415,377,1.579,459,2.056,460,1.774,562,1.381,684,1.936,710,1.846,760,4.383,761,1.936,922,1.579,959,5.195,1221,2.056,1230,1.846,1315,4.655,1401,2.056,1494,1.846,1541,1.936,1644,1.936,1684,2.056,1754,1.846,1796,2.056,1826,1.936,1863,1.936,1883,1.936,2060,1.774,2201,3.852,2202,2.239,2203,2.239,2204,2.239,2205,2.239,2206,2.239,2207,7.411,2208,2.239,2209,2.239,2210,2.239,2211,2.239,2212,2.239,2213,2.239,2214,2.239,2215,2.239,2216,3.852,2217,5.069,2218,3.852,2219,5.069,2220,2.239,2221,2.239,2222,2.239,2223,2.239,2224,2.239,2225,2.239,2226,3.852]],["component/31",[1,0.233]]],"invertedIndex":[["",{"_index":28,"title":{},"name":{},"text":{"1":{},"2":{},"3":{},"4":{},"5":{},"6":{},"7":{},"8":{},"9":{},"10":{},"11":{},"12":{},"13":{},"14":{},"15":{},"16":{},"17":{},"18":{},"19":{},"20":{},"23":{},"24":{},"26":{},"27":{},"28":{},"29":{},"30":{},"31":{}},"component":{}}],["0",{"_index":590,"title":{},"name":{},"text":{"4":{},"8":{},"9":{},"11":{},"12":{},"13":{},"14":{},"16":{}},"component":{}}],["0.0",{"_index":1131,"title":{},"name":{},"text":{"9":{},"11":{}},"component":{}}],["0.1",{"_index":702,"title":{},"name":{},"text":{"5":{}},"component":{}}],["0.4",{"_index":1125,"title":{},"name":{},"text":{"9":{}},"component":{}}],["0.5",{"_index":997,"title":{},"name":{},"text":{"9":{}},"component":{}}],["0.7.0",{"_index":1775,"title":{},"name":{},"text":{"20":{}},"component":{}}],["00:00",{"_index":1055,"title":{},"name":{},"text":{"9":{}},"component":{}}],["00:00:00",{"_index":594,"title":{},"name":{},"text":{"4":{},"11":{}},"component":{}}],["00:00:00z",{"_index":1045,"title":{},"name":{},"text":{"9":{}},"component":{}}],["01",{"_index":593,"title":{},"name":{},"text":{"4":{},"8":{},"9":{},"29":{}},"component":{}}],["01t00:00:00.000000000",{"_index":1258,"title":{},"name":{},"text":{"9":{}},"component":{}}],["01t00:00:00.000000000z",{"_index":1000,"title":{},"name":{},"text":{"9":{}},"component":{}}],["01t00:00:00z",{"_index":2112,"title":{},"name":{},"text":{"29":{}},"component":{}}],["02",{"_index":602,"title":{},"name":{},"text":{"4":{},"8":{},"9":{},"17":{},"29":{}},"component":{}}],["02t00:00:00.000000000",{"_index":1259,"title":{},"name":{},"text":{"9":{}},"component":{}}],["02t00:00:00.000000000z",{"_index":1025,"title":{},"name":{},"text":{"9":{}},"component":{}}],["02t01:00:00.000000000z",{"_index":1027,"title":{},"name":{},"text":{"9":{}},"component":{}}],["03",{"_index":605,"title":{},"name":{},"text":{"4":{},"8":{},"9":{},"17":{}},"component":{}}],["03t00:00:00.000000000z",{"_index":1039,"title":{},"name":{},"text":{"9":{}},"component":{}}],["03t00:00:00z",{"_index":2113,"title":{},"name":{},"text":{"29":{}},"component":{}}],["04",{"_index":610,"title":{},"name":{},"text":{"4":{},"9":{},"29":{}},"component":{}}],["04t00:00:00.000000000z",{"_index":1041,"title":{},"name":{},"text":{"9":{}},"component":{}}],["05",{"_index":616,"title":{},"name":{},"text":{"4":{},"8":{},"9":{},"17":{}},"component":{}}],["05t00:00:00.000000000z",{"_index":1042,"title":{},"name":{},"text":{"9":{}},"component":{}}],["06",{"_index":625,"title":{},"name":{},"text":{"4":{},"9":{}},"component":{}}],["06t00:00:00.000000000z",{"_index":1152,"title":{},"name":{},"text":{"9":{}},"component":{}}],["07",{"_index":631,"title":{},"name":{},"text":{"4":{},"9":{}},"component":{}}],["07t00:00:00.000000000z",{"_index":1155,"title":{},"name":{},"text":{"9":{}},"component":{}}],["08",{"_index":635,"title":{},"name":{},"text":{"4":{},"9":{}},"component":{}}],["1",{"_index":10,"title":{"30-4":{}},"name":{},"text":{"1":{},"2":{},"3":{},"4":{},"6":{},"7":{},"9":{},"11":{},"12":{},"14":{},"16":{},"17":{},"19":{},"20":{},"28":{},"29":{},"30":{}},"component":{}}],["1.0",{"_index":1019,"title":{},"name":{},"text":{"9":{},"11":{}},"component":{}}],["1.1",{"_index":1021,"title":{},"name":{},"text":{"9":{}},"component":{}}],["1.2",{"_index":1040,"title":{},"name":{},"text":{"9":{}},"component":{}}],["1.21.0",{"_index":1771,"title":{},"name":{},"text":{"20":{}},"component":{}}],["10",{"_index":427,"title":{},"name":{},"text":{"4":{},"5":{},"8":{},"9":{},"16":{},"17":{},"20":{},"30":{}},"component":{}}],["10.0",{"_index":1030,"title":{},"name":{},"text":{"9":{}},"component":{}}],["10.00",{"_index":1024,"title":{},"name":{},"text":{"9":{}},"component":{}}],["10.666",{"_index":891,"title":{},"name":{},"text":{"8":{}},"component":{}}],["100",{"_index":571,"title":{},"name":{},"text":{"4":{},"5":{},"11":{},"12":{},"14":{}},"component":{}}],["1000",{"_index":250,"title":{},"name":{},"text":{"2":{}},"component":{}}],["10000",{"_index":1379,"title":{},"name":{},"text":{"11":{}},"component":{}}],["100000",{"_index":650,"title":{},"name":{},"text":{"4":{}},"component":{}}],["1005.8",{"_index":1581,"title":{},"name":{},"text":{"14":{}},"component":{}}],["100837.631",{"_index":1386,"title":{},"name":{},"text":{"11":{}},"component":{}}],["100’",{"_index":1915,"title":{},"name":{},"text":{"27":{}},"component":{}}],["101",{"_index":1467,"title":{},"name":{},"text":{"12":{},"14":{}},"component":{}}],["102",{"_index":1535,"title":{},"name":{},"text":{"14":{}},"component":{}}],["103",{"_index":1536,"title":{},"name":{},"text":{"14":{}},"component":{}}],["104",{"_index":1537,"title":{},"name":{},"text":{"14":{}},"component":{}}],["1053.0025000000003",{"_index":1310,"title":{},"name":{},"text":{"9":{}},"component":{}}],["106",{"_index":2186,"title":{},"name":{},"text":{"30":{}},"component":{}}],["10724100356298933117",{"_index":1187,"title":{},"name":{},"text":{"9":{}},"component":{}}],["10:01",{"_index":2171,"title":{},"name":{},"text":{"30":{}},"component":{}}],["10:18am",{"_index":1721,"title":{},"name":{},"text":{"19":{}},"component":{}}],["10:47",{"_index":2024,"title":{},"name":{},"text":{"28":{}},"component":{}}],["10t00:00:00.000000000",{"_index":1261,"title":{},"name":{},"text":{"9":{}},"component":{}}],["10t00:00:00.000000000z",{"_index":1170,"title":{},"name":{},"text":{"9":{}},"component":{}}],["11",{"_index":626,"title":{},"name":{},"text":{"4":{},"8":{},"9":{},"17":{}},"component":{}}],["111",{"_index":1088,"title":{},"name":{},"text":{"9":{}},"component":{}}],["112",{"_index":1080,"title":{},"name":{},"text":{"9":{}},"component":{}}],["11871059458584583621",{"_index":1190,"title":{},"name":{},"text":{"9":{}},"component":{}}],["11:03",{"_index":2021,"title":{},"name":{},"text":{"28":{}},"component":{}}],["11t00:00:00.000000000z",{"_index":1326,"title":{},"name":{},"text":{"9":{}},"component":{}}],["12",{"_index":607,"title":{},"name":{},"text":{"4":{},"9":{},"14":{}},"component":{}}],["12.0",{"_index":1031,"title":{},"name":{},"text":{"9":{}},"component":{}}],["12.00",{"_index":1026,"title":{},"name":{},"text":{"9":{}},"component":{}}],["12.2",{"_index":1128,"title":{},"name":{},"text":{"9":{}},"component":{}}],["12.34",{"_index":697,"title":{},"name":{},"text":{"5":{}},"component":{}}],["120",{"_index":1540,"title":{},"name":{},"text":{"14":{}},"component":{}}],["1255",{"_index":1558,"title":{},"name":{},"text":{"14":{}},"component":{}}],["12t00:00:00z",{"_index":2114,"title":{},"name":{},"text":{"29":{}},"component":{}}],["13",{"_index":633,"title":{},"name":{},"text":{"4":{},"8":{},"9":{}},"component":{}}],["13.0",{"_index":1033,"title":{},"name":{},"text":{"9":{}},"component":{}}],["13.00",{"_index":1029,"title":{},"name":{},"text":{"9":{}},"component":{}}],["13.2",{"_index":1127,"title":{},"name":{},"text":{"9":{}},"component":{}}],["13.200000000000001",{"_index":1032,"title":{},"name":{},"text":{"9":{}},"component":{}}],["130",{"_index":1576,"title":{},"name":{},"text":{"14":{}},"component":{}}],["131",{"_index":1577,"title":{},"name":{},"text":{"14":{}},"component":{}}],["132",{"_index":1578,"title":{},"name":{},"text":{"14":{}},"component":{}}],["133",{"_index":1579,"title":{},"name":{},"text":{"14":{}},"component":{}}],["134",{"_index":1580,"title":{},"name":{},"text":{"14":{}},"component":{}}],["14",{"_index":636,"title":{},"name":{},"text":{"4":{},"8":{},"9":{}},"component":{}}],["14.0",{"_index":1034,"title":{},"name":{},"text":{"9":{}},"component":{}}],["141",{"_index":1089,"title":{},"name":{},"text":{"9":{}},"component":{}}],["142",{"_index":1081,"title":{},"name":{},"text":{"9":{}},"component":{}}],["145bc51d9bac47f17fd202e5785e58b7",{"_index":645,"title":{},"name":{},"text":{"4":{}},"component":{}}],["15",{"_index":864,"title":{},"name":{},"text":{"8":{},"9":{},"20":{}},"component":{}}],["15.749999999999998",{"_index":1130,"title":{},"name":{},"text":{"9":{}},"component":{}}],["151",{"_index":1116,"title":{},"name":{},"text":{"9":{}},"component":{}}],["15811883632611753650",{"_index":1185,"title":{},"name":{},"text":{"9":{}},"component":{}}],["16",{"_index":1207,"title":{},"name":{},"text":{"9":{},"27":{}},"component":{}}],["1600",{"_index":1454,"title":{},"name":{},"text":{"12":{}},"component":{}}],["1634250064",{"_index":1804,"title":{},"name":{},"text":{"20":{}},"component":{}}],["1639595174",{"_index":1397,"title":{},"name":{},"text":{"11":{}},"component":{}}],["16:54:04",{"_index":1966,"title":{},"name":{},"text":{"27":{}},"component":{}}],["17",{"_index":865,"title":{},"name":{},"text":{"8":{}},"component":{}}],["172",{"_index":1090,"title":{},"name":{},"text":{"9":{}},"component":{}}],["173",{"_index":1082,"title":{},"name":{},"text":{"9":{}},"component":{}}],["1970",{"_index":1404,"title":{},"name":{},"text":{"11":{}},"component":{}}],["1995",{"_index":1112,"title":{},"name":{},"text":{"9":{}},"component":{}}],["1996",{"_index":1053,"title":{},"name":{},"text":{"9":{}},"component":{}}],["1997",{"_index":1328,"title":{},"name":{},"text":{"9":{}},"component":{}}],["1998",{"_index":1340,"title":{},"name":{},"text":{"9":{}},"component":{}}],["1999",{"_index":1329,"title":{},"name":{},"text":{"9":{}},"component":{}}],["19t00:00:00",{"_index":1111,"title":{},"name":{},"text":{"9":{}},"component":{}}],["19t00:00:00.000000000",{"_index":1275,"title":{},"name":{},"text":{"9":{}},"component":{}}],["19t04:00:00",{"_index":1054,"title":{},"name":{},"text":{"9":{}},"component":{}}],["19t04:00:00.000000000",{"_index":1061,"title":{},"name":{},"text":{"9":{}},"component":{}}],["19t05:00:00",{"_index":1056,"title":{},"name":{},"text":{"9":{}},"component":{}}],["19t05:00:00.000000000",{"_index":1062,"title":{},"name":{},"text":{"9":{}},"component":{}}],["19t16:00:00",{"_index":1336,"title":{},"name":{},"text":{"9":{}},"component":{}}],["19t16:00:00.000000000",{"_index":1341,"title":{},"name":{},"text":{"9":{}},"component":{}}],["19t16:00:57",{"_index":1196,"title":{},"name":{},"text":{"9":{}},"component":{}}],["19t16:00:57.000000000",{"_index":1201,"title":{},"name":{},"text":{"9":{}},"component":{}}],["19t16:00:58",{"_index":1197,"title":{},"name":{},"text":{"9":{}},"component":{}}],["19t16:00:58.000000000",{"_index":1202,"title":{},"name":{},"text":{"9":{}},"component":{}}],["19t17:00:00",{"_index":1263,"title":{},"name":{},"text":{"9":{}},"component":{}}],["19t17:00:00.000000000",{"_index":1203,"title":{},"name":{},"text":{"9":{}},"component":{}}],["19t17:00:59",{"_index":1198,"title":{},"name":{},"text":{"9":{}},"component":{}}],["19t17:00:59.000000000",{"_index":1204,"title":{},"name":{},"text":{"9":{}},"component":{}}],["19t17:01:00",{"_index":1199,"title":{},"name":{},"text":{"9":{}},"component":{}}],["19t17:01:00.000000000",{"_index":1205,"title":{},"name":{},"text":{"9":{}},"component":{}}],["19t17:03:00",{"_index":1264,"title":{},"name":{},"text":{"9":{}},"component":{}}],["19t18:00:00",{"_index":1200,"title":{},"name":{},"text":{"9":{}},"component":{}}],["19t18:00:00.000000000",{"_index":1206,"title":{},"name":{},"text":{"9":{}},"component":{}}],["19t18:01:00",{"_index":1265,"title":{},"name":{},"text":{"9":{}},"component":{}}],["1badb8b0e220e26cc15b93b234ac3c14",{"_index":643,"title":{},"name":{},"text":{"4":{}},"component":{}}],["1ed25c9",{"_index":2211,"title":{},"name":{},"text":{"31":{}},"component":{}}],["2",{"_index":24,"title":{"9-471":{},"30-5":{}},"name":{},"text":{"1":{},"2":{},"3":{},"4":{},"6":{},"7":{},"8":{},"9":{},"12":{},"14":{},"16":{},"17":{},"20":{},"28":{},"30":{},"31":{}},"component":{}}],["2.0",{"_index":1236,"title":{},"name":{},"text":{"9":{}},"component":{}}],["2.3",{"_index":1043,"title":{},"name":{},"text":{"9":{}},"component":{}}],["2.3874672772626644",{"_index":1280,"title":{},"name":{},"text":{"9":{}},"component":{}}],["2.5",{"_index":1238,"title":{},"name":{},"text":{"9":{}},"component":{}}],["2.5099800796022267",{"_index":1281,"title":{},"name":{},"text":{"9":{}},"component":{}}],["2.6666666666666665",{"_index":1262,"title":{},"name":{},"text":{"9":{}},"component":{}}],["20",{"_index":707,"title":{},"name":{},"text":{"5":{},"8":{},"9":{}},"component":{}}],["2000",{"_index":1330,"title":{},"name":{},"text":{"9":{},"29":{}},"component":{}}],["2012",{"_index":844,"title":{},"name":{},"text":{"8":{},"17":{}},"component":{}}],["2013",{"_index":869,"title":{},"name":{},"text":{"8":{}},"component":{}}],["2014",{"_index":870,"title":{},"name":{},"text":{"8":{}},"component":{}}],["2015",{"_index":871,"title":{},"name":{},"text":{"8":{},"17":{},"29":{}},"component":{}}],["2016",{"_index":872,"title":{},"name":{},"text":{"8":{}},"component":{}}],["2017",{"_index":873,"title":{},"name":{},"text":{"8":{}},"component":{}}],["2018",{"_index":846,"title":{},"name":{},"text":{"8":{},"17":{}},"component":{}}],["2019",{"_index":847,"title":{},"name":{},"text":{"8":{},"17":{}},"component":{}}],["202",{"_index":1091,"title":{},"name":{},"text":{"9":{}},"component":{}}],["2020",{"_index":592,"title":{},"name":{},"text":{"4":{},"8":{},"9":{},"29":{}},"component":{}}],["2021",{"_index":999,"title":{},"name":{},"text":{"9":{}},"component":{}}],["2022",{"_index":1331,"title":{},"name":{},"text":{"9":{}},"component":{}}],["203",{"_index":1083,"title":{},"name":{},"text":{"9":{}},"component":{}}],["20t00:00:00",{"_index":1113,"title":{},"name":{},"text":{"9":{}},"component":{}}],["20t00:00:00.000000000",{"_index":1063,"title":{},"name":{},"text":{"9":{}},"component":{}}],["20t01:00:00",{"_index":1057,"title":{},"name":{},"text":{"9":{}},"component":{}}],["20t01:00:00.000000000",{"_index":1064,"title":{},"name":{},"text":{"9":{}},"component":{}}],["20t16:00:00",{"_index":1337,"title":{},"name":{},"text":{"9":{}},"component":{}}],["20t16:00:00.000000000",{"_index":1342,"title":{},"name":{},"text":{"9":{}},"component":{}}],["20t16:01:00",{"_index":1338,"title":{},"name":{},"text":{"9":{}},"component":{}}],["20t16:01:00.000000000",{"_index":1343,"title":{},"name":{},"text":{"9":{}},"component":{}}],["20t22:00:00",{"_index":1058,"title":{},"name":{},"text":{"9":{}},"component":{}}],["20t22:00:00.000000000",{"_index":1065,"title":{},"name":{},"text":{"9":{}},"component":{}}],["21",{"_index":1074,"title":{},"name":{},"text":{"9":{}},"component":{}}],["21t00:00:00",{"_index":1073,"title":{},"name":{},"text":{"9":{}},"component":{}}],["21t00:00:00.000000000",{"_index":1066,"title":{},"name":{},"text":{"9":{}},"component":{}}],["21t03:00:00",{"_index":1059,"title":{},"name":{},"text":{"9":{}},"component":{}}],["21t03:00:00.000000000",{"_index":1067,"title":{},"name":{},"text":{"9":{}},"component":{}}],["21t07:00:00",{"_index":1060,"title":{},"name":{},"text":{"9":{}},"component":{}}],["21t07:00:00.000000000",{"_index":1068,"title":{},"name":{},"text":{"9":{}},"component":{}}],["21t16:00:00",{"_index":1339,"title":{},"name":{},"text":{"9":{}},"component":{}}],["21t16:00:00.000000000",{"_index":1344,"title":{},"name":{},"text":{"9":{}},"component":{}}],["21t23:00:00",{"_index":1114,"title":{},"name":{},"text":{"9":{}},"component":{}}],["22t00:00:00",{"_index":1115,"title":{},"name":{},"text":{"9":{}},"component":{}}],["22t00:00:00.000000000",{"_index":1097,"title":{},"name":{},"text":{"9":{}},"component":{}}],["23",{"_index":845,"title":{},"name":{},"text":{"8":{},"17":{},"27":{},"30":{}},"component":{}}],["233",{"_index":1092,"title":{},"name":{},"text":{"9":{}},"component":{}}],["234",{"_index":1084,"title":{},"name":{},"text":{"9":{}},"component":{}}],["23t00:00:00.000000000",{"_index":1098,"title":{},"name":{},"text":{"9":{}},"component":{}}],["24",{"_index":892,"title":{},"name":{},"text":{"8":{},"9":{}},"component":{}}],["24.750000000000004",{"_index":1283,"title":{},"name":{},"text":{"9":{}},"component":{}}],["24c83cac",{"_index":619,"title":{},"name":{},"text":{"4":{}},"component":{}}],["24t00:00:00.000000000",{"_index":1099,"title":{},"name":{},"text":{"9":{}},"component":{}}],["24tb",{"_index":1942,"title":{},"name":{},"text":{"27":{}},"component":{}}],["256",{"_index":1937,"title":{},"name":{},"text":{"27":{}},"component":{}}],["26",{"_index":848,"title":{},"name":{},"text":{"8":{},"17":{}},"component":{}}],["276",{"_index":1117,"title":{},"name":{},"text":{"9":{}},"component":{}}],["2958664733073760318",{"_index":1189,"title":{},"name":{},"text":{"9":{}},"component":{}}],["298.8674009670603",{"_index":1162,"title":{},"name":{},"text":{"9":{}},"component":{}}],["2:10",{"_index":2017,"title":{},"name":{},"text":{"28":{}},"component":{}}],["2:18pm",{"_index":801,"title":{},"name":{},"text":{"6":{},"19":{}},"component":{}}],["2:25pm",{"_index":809,"title":{},"name":{},"text":{"6":{}},"component":{}}],["2:30",{"_index":2165,"title":{},"name":{},"text":{"30":{}},"component":{}}],["2:35",{"_index":2173,"title":{},"name":{},"text":{"30":{}},"component":{}}],["2>&1",{"_index":198,"title":{},"name":{},"text":{"1":{},"19":{}},"component":{}}],["2gb",{"_index":1923,"title":{},"name":{},"text":{"27":{}},"component":{}}],["2s",{"_index":2177,"title":{},"name":{},"text":{"30":{}},"component":{}}],["3",{"_index":63,"title":{"9-475":{},"30-6":{}},"name":{},"text":{"1":{},"2":{},"3":{},"4":{},"6":{},"7":{},"9":{},"14":{},"16":{},"17":{},"20":{},"30":{}},"component":{}}],["3.0",{"_index":1179,"title":{},"name":{},"text":{"9":{}},"component":{}}],["3.10.6",{"_index":1759,"title":{},"name":{},"text":{"20":{}},"component":{}}],["3.5",{"_index":1260,"title":{},"name":{},"text":{"9":{},"12":{}},"component":{}}],["3.6",{"_index":1752,"title":{},"name":{},"text":{"20":{}},"component":{}}],["3.6.1",{"_index":1773,"title":{},"name":{},"text":{"20":{}},"component":{}}],["3.7",{"_index":1126,"title":{},"name":{},"text":{"9":{}},"component":{}}],["3.99",{"_index":1466,"title":{},"name":{},"text":{"12":{},"28":{}},"component":{}}],["30",{"_index":1075,"title":{},"name":{},"text":{"9":{},"14":{},"29":{}},"component":{}}],["31",{"_index":1071,"title":{},"name":{},"text":{"9":{},"30":{}},"component":{}}],["32",{"_index":1415,"title":{},"name":{},"text":{"11":{},"18":{}},"component":{}}],["32.45",{"_index":1284,"title":{},"name":{},"text":{"9":{}},"component":{}}],["33",{"_index":1695,"title":{},"name":{},"text":{"18":{}},"component":{}}],["34",{"_index":632,"title":{},"name":{},"text":{"4":{}},"component":{}}],["365",{"_index":1085,"title":{},"name":{},"text":{"9":{}},"component":{}}],["366",{"_index":1077,"title":{},"name":{},"text":{"9":{}},"component":{}}],["37",{"_index":1306,"title":{},"name":{},"text":{"9":{}},"component":{}}],["3:46",{"_index":2175,"title":{},"name":{},"text":{"30":{}},"component":{}}],["3:58",{"_index":2166,"title":{},"name":{},"text":{"30":{}},"component":{}}],["3f737ff336666515a54dd29a9c5ace3a",{"_index":585,"title":{},"name":{},"text":{"4":{}},"component":{}}],["3s",{"_index":2174,"title":{},"name":{},"text":{"30":{}},"component":{}}],["4",{"_index":252,"title":{"30-7":{}},"name":{},"text":{"2":{},"3":{},"4":{},"6":{},"7":{},"8":{},"9":{},"14":{},"16":{},"17":{},"20":{}},"component":{}}],["4.0",{"_index":1237,"title":{},"name":{},"text":{"9":{}},"component":{}}],["4.11.2",{"_index":1769,"title":{},"name":{},"text":{"20":{}},"component":{}}],["4.333333333333333",{"_index":1278,"title":{},"name":{},"text":{"9":{}},"component":{}}],["4.5",{"_index":1285,"title":{},"name":{},"text":{"9":{},"14":{}},"component":{}}],["4.6",{"_index":1556,"title":{},"name":{},"text":{"14":{}},"component":{}}],["4.75",{"_index":1129,"title":{},"name":{},"text":{"9":{}},"component":{}}],["4028879376188845851",{"_index":1191,"title":{},"name":{},"text":{"9":{}},"component":{}}],["418e",{"_index":640,"title":{},"name":{},"text":{"4":{}},"component":{}}],["42",{"_index":1507,"title":{},"name":{},"text":{"13":{},"16":{}},"component":{}}],["42.0",{"_index":1147,"title":{},"name":{},"text":{"9":{}},"component":{}}],["422017488",{"_index":1806,"title":{},"name":{},"text":{"20":{}},"component":{}}],["43",{"_index":2172,"title":{},"name":{},"text":{"30":{}},"component":{}}],["445",{"_index":1943,"title":{},"name":{},"text":{"27":{}},"component":{}}],["448c",{"_index":580,"title":{},"name":{},"text":{"4":{}},"component":{}}],["4527",{"_index":2213,"title":{},"name":{},"text":{"31":{}},"component":{}}],["4:25",{"_index":2167,"title":{},"name":{},"text":{"30":{}},"component":{}}],["4:46",{"_index":2194,"title":{},"name":{},"text":{"30":{}},"component":{}}],["4a45",{"_index":621,"title":{},"name":{},"text":{"4":{}},"component":{}}],["4da2",{"_index":2222,"title":{},"name":{},"text":{"31":{}},"component":{}}],["5",{"_index":373,"title":{},"name":{},"text":{"3":{},"4":{},"6":{},"7":{},"8":{},"9":{},"12":{},"14":{},"16":{}},"component":{}}],["5.0",{"_index":1171,"title":{},"name":{},"text":{"9":{}},"component":{}}],["5.00",{"_index":2025,"title":{},"name":{},"text":{"28":{}},"component":{}}],["5.3.2",{"_index":1782,"title":{},"name":{},"text":{"20":{}},"component":{}}],["5.5",{"_index":1555,"title":{},"name":{},"text":{"14":{}},"component":{}}],["5.5.0",{"_index":1784,"title":{},"name":{},"text":{"20":{}},"component":{}}],["5.7",{"_index":1001,"title":{},"name":{},"text":{"9":{}},"component":{}}],["5.7.0",{"_index":1779,"title":{},"name":{},"text":{"20":{}},"component":{}}],["5.8999999999999995",{"_index":1286,"title":{},"name":{},"text":{"9":{}},"component":{}}],["5.99",{"_index":1468,"title":{},"name":{},"text":{"12":{}},"component":{}}],["50",{"_index":417,"title":{},"name":{},"text":{"4":{}},"component":{}}],["50.7",{"_index":1037,"title":{},"name":{},"text":{"9":{}},"component":{}}],["5000",{"_index":611,"title":{},"name":{},"text":{"4":{},"14":{}},"component":{}}],["51.900000000000006",{"_index":1301,"title":{},"name":{},"text":{"9":{}},"component":{}}],["53",{"_index":2170,"title":{},"name":{},"text":{"30":{}},"component":{}}],["544.571910125929",{"_index":1163,"title":{},"name":{},"text":{"9":{}},"component":{}}],["5582db010959",{"_index":642,"title":{},"name":{},"text":{"4":{}},"component":{}}],["57",{"_index":1377,"title":{},"name":{},"text":{"11":{}},"component":{}}],["57.8",{"_index":1138,"title":{},"name":{},"text":{"9":{}},"component":{}}],["5791815708761125353",{"_index":1193,"title":{},"name":{},"text":{"9":{}},"component":{}}],["58.7",{"_index":1215,"title":{},"name":{},"text":{"9":{}},"component":{}}],["5927736130248593597",{"_index":1186,"title":{},"name":{},"text":{"9":{}},"component":{}}],["5:05",{"_index":2169,"title":{},"name":{},"text":{"30":{}},"component":{}}],["5:36",{"_index":2176,"title":{},"name":{},"text":{"30":{}},"component":{}}],["5d19",{"_index":2221,"title":{},"name":{},"text":{"31":{}},"component":{}}],["5s",{"_index":2181,"title":{},"name":{},"text":{"30":{}},"component":{}}],["6",{"_index":608,"title":{},"name":{},"text":{"4":{},"8":{},"9":{}},"component":{}}],["6.0",{"_index":1148,"title":{},"name":{},"text":{"9":{}},"component":{}}],["6.17.0",{"_index":1763,"title":{},"name":{},"text":{"20":{}},"component":{}}],["6.2",{"_index":1172,"title":{},"name":{},"text":{"9":{}},"component":{}}],["6.3",{"_index":1002,"title":{},"name":{},"text":{"9":{}},"component":{}}],["6.5.2",{"_index":1780,"title":{},"name":{},"text":{"20":{}},"component":{}}],["6.666",{"_index":1557,"title":{},"name":{},"text":{"14":{}},"component":{}}],["6.7",{"_index":1173,"title":{},"name":{},"text":{"9":{}},"component":{}}],["612.5625000000001",{"_index":1309,"title":{},"name":{},"text":{"9":{}},"component":{}}],["63",{"_index":1139,"title":{},"name":{},"text":{"9":{},"30":{}},"component":{}}],["63.0",{"_index":1143,"title":{},"name":{},"text":{"9":{}},"component":{}}],["64",{"_index":1418,"title":{},"name":{},"text":{"11":{},"27":{}},"component":{}}],["65",{"_index":1151,"title":{},"name":{},"text":{"9":{}},"component":{}}],["65.0",{"_index":1157,"title":{},"name":{},"text":{"9":{}},"component":{}}],["67.2",{"_index":1038,"title":{},"name":{},"text":{"9":{}},"component":{}}],["68.7",{"_index":1154,"title":{},"name":{},"text":{"9":{}},"component":{}}],["6873",{"_index":1142,"title":{},"name":{},"text":{"9":{}},"component":{}}],["6873.0",{"_index":1144,"title":{},"name":{},"text":{"9":{}},"component":{}}],["69.5",{"_index":1302,"title":{},"name":{},"text":{"9":{}},"component":{}}],["6:00",{"_index":1270,"title":{},"name":{},"text":{"9":{}},"component":{}}],["7",{"_index":612,"title":{},"name":{},"text":{"4":{},"8":{},"9":{}},"component":{}}],["7.2.3",{"_index":1777,"title":{},"name":{},"text":{"20":{}},"component":{}}],["7.34.0",{"_index":1761,"title":{},"name":{},"text":{"20":{}},"component":{}}],["7.4.4",{"_index":1767,"title":{},"name":{},"text":{"20":{}},"component":{}}],["70",{"_index":1149,"title":{},"name":{},"text":{"9":{}},"component":{}}],["70.0",{"_index":1156,"title":{},"name":{},"text":{"9":{}},"component":{}}],["71.3",{"_index":1150,"title":{},"name":{},"text":{"9":{}},"component":{}}],["71599",{"_index":649,"title":{},"name":{},"text":{"4":{}},"component":{}}],["76b***2e5",{"_index":1802,"title":{},"name":{},"text":{"20":{}},"component":{}}],["786.0",{"_index":1217,"title":{},"name":{},"text":{"9":{}},"component":{}}],["7:00",{"_index":1271,"title":{},"name":{},"text":{"9":{}},"component":{}}],["7:02",{"_index":2023,"title":{},"name":{},"text":{"28":{}},"component":{}}],["7:22",{"_index":2178,"title":{},"name":{},"text":{"30":{}},"component":{}}],["7bd4e740",{"_index":638,"title":{},"name":{},"text":{"4":{}},"component":{}}],["7s",{"_index":2179,"title":{},"name":{},"text":{"30":{}},"component":{}}],["8",{"_index":614,"title":{},"name":{},"text":{"4":{},"9":{}},"component":{}}],["8.0.2",{"_index":1765,"title":{},"name":{},"text":{"20":{}},"component":{}}],["80",{"_index":1087,"title":{},"name":{},"text":{"9":{}},"component":{}}],["81",{"_index":1079,"title":{},"name":{},"text":{"9":{}},"component":{}}],["86.3",{"_index":1141,"title":{},"name":{},"text":{"9":{}},"component":{}}],["8732440231931982831",{"_index":1188,"title":{},"name":{},"text":{"9":{}},"component":{}}],["876",{"_index":1216,"title":{},"name":{},"text":{"9":{}},"component":{}}],["876.0",{"_index":1218,"title":{},"name":{},"text":{"9":{}},"component":{}}],["8914",{"_index":2212,"title":{},"name":{},"text":{"31":{}},"component":{}}],["8:00",{"_index":1272,"title":{},"name":{},"text":{"9":{}},"component":{}}],["8:20",{"_index":2013,"title":{},"name":{},"text":{"28":{}},"component":{}}],["8:27",{"_index":1268,"title":{},"name":{},"text":{"9":{}},"component":{}}],["8:35",{"_index":2180,"title":{},"name":{},"text":{"30":{}},"component":{}}],["8:52",{"_index":2019,"title":{},"name":{},"text":{"28":{}},"component":{}}],["8cf4",{"_index":620,"title":{},"name":{},"text":{"4":{}},"component":{}}],["8s",{"_index":2168,"title":{},"name":{},"text":{"30":{}},"component":{}}],["9",{"_index":597,"title":{},"name":{},"text":{"4":{},"9":{},"14":{}},"component":{}}],["9.5",{"_index":998,"title":{},"name":{},"text":{"9":{}},"component":{}}],["92a9",{"_index":2214,"title":{},"name":{},"text":{"31":{}},"component":{}}],["9468338612501459910",{"_index":1192,"title":{},"name":{},"text":{"9":{}},"component":{}}],["98f0",{"_index":622,"title":{},"name":{},"text":{"4":{}},"component":{}}],["9:00",{"_index":1274,"title":{},"name":{},"text":{"9":{}},"component":{}}],["9:35",{"_index":2195,"title":{},"name":{},"text":{"30":{}},"component":{}}],["9:45",{"_index":2015,"title":{},"name":{},"text":{"28":{}},"component":{}}],["9a95",{"_index":581,"title":{},"name":{},"text":{"4":{}},"component":{}}],["9e63",{"_index":639,"title":{},"name":{},"text":{"4":{}},"component":{}}],["9ee716a59847",{"_index":2215,"title":{},"name":{},"text":{"31":{}},"component":{}}],["_key",{"_index":2123,"title":{},"name":{},"text":{"29":{}},"component":{}}],["_key_hash",{"_index":2124,"title":{},"name":{},"text":{"29":{}},"component":{}}],["_subsort",{"_index":2122,"title":{},"name":{},"text":{"29":{}},"component":{}}],["a8a0",{"_index":579,"title":{},"name":{},"text":{"4":{}},"component":{}}],["a959868ac681",{"_index":2224,"title":{},"name":{},"text":{"31":{}},"component":{}}],["aa2***a6b9",{"_index":300,"title":{},"name":{},"text":{"2":{},"20":{}},"component":{}}],["abil",{"_index":665,"title":{},"name":{},"text":{"5":{},"17":{},"27":{},"28":{}},"component":{}}],["abov",{"_index":700,"title":{},"name":{},"text":{"5":{},"10":{},"20":{}},"component":{}}],["absolute/path/to/purchases.parquet",{"_index":1810,"title":{},"name":{},"text":{"20":{}},"component":{}}],["abstract",{"_index":1865,"title":{},"name":{},"text":{"27":{},"28":{}},"component":{}}],["accept",{"_index":1511,"title":{},"name":{},"text":{"13":{},"27":{},"30":{}},"component":{}}],["access",{"_index":239,"title":{"9-226":{}},"name":{},"text":{"2":{},"5":{},"7":{},"9":{}},"component":{}}],["accident",{"_index":1677,"title":{},"name":{},"text":{"17":{}},"component":{}}],["accomplish",{"_index":1485,"title":{},"name":{},"text":{"12":{},"14":{}},"component":{}}],["accur",{"_index":1490,"title":{},"name":{},"text":{"12":{},"30":{}},"component":{}}],["accustom",{"_index":1974,"title":{},"name":{},"text":{"27":{}},"component":{}}],["achiev",{"_index":770,"title":{},"name":{},"text":{"6":{},"7":{}},"component":{}}],["act",{"_index":1474,"title":{},"name":{},"text":{"12":{}},"component":{}}],["action",{"_index":536,"title":{},"name":{},"text":{"4":{},"6":{},"7":{},"27":{}},"component":{}}],["activ",{"_index":1789,"title":{},"name":{},"text":{"20":{}},"component":{}}],["ad",{"_index":315,"title":{"9-26":{},"9-110":{}},"name":{},"text":{"3":{},"5":{},"7":{},"10":{},"11":{},"16":{},"17":{},"19":{},"20":{}},"component":{}}],["add",{"_index":86,"title":{"9-16":{}},"name":{},"text":{"1":{},"6":{},"7":{},"9":{},"13":{},"16":{},"30":{}},"component":{}}],["add(10",{"_index":1621,"title":{},"name":{},"text":{"16":{}},"component":{}}],["add_tim",{"_index":897,"title":{"9-23":{}},"name":{},"text":{"9":{}},"component":{}}],["add_time(days(30",{"_index":1569,"title":{},"name":{},"text":{"14":{},"29":{}},"component":{}}],["add_time(days(input.n",{"_index":1096,"title":{},"name":{},"text":{"9":{}},"component":{}}],["addit",{"_index":662,"title":{"5-2":{},"5-7":{},"9-19":{}},"name":{},"text":{"5":{},"8":{},"16":{}},"component":{}}],["addition",{"_index":221,"title":{},"name":{},"text":{"2":{},"6":{},"11":{}},"component":{}}],["address",{"_index":1453,"title":{},"name":{},"text":{"12":{}},"component":{}}],["advanc",{"_index":1273,"title":{},"name":{},"text":{"9":{}},"component":{}}],["advantag",{"_index":2074,"title":{},"name":{},"text":{"28":{}},"component":{}}],["affect",{"_index":681,"title":{},"name":{},"text":{"5":{},"8":{},"9":{},"12":{}},"component":{}}],["ag",{"_index":1414,"title":{},"name":{},"text":{"11":{},"18":{}},"component":{}}],["against",{"_index":91,"title":{},"name":{},"text":{"1":{},"2":{},"4":{},"17":{},"20":{},"28":{}},"component":{}}],["aggreagt",{"_index":1977,"title":{},"name":{},"text":{"27":{}},"component":{}}],["aggreg",{"_index":378,"title":{"8":{},"17":{},"4-3":{},"8-1":{},"8-2":{},"8-3":{},"8-4":{},"8-6":{},"9-4":{},"9-71":{},"9-201":{},"9-321":{},"9-345":{},"9-566":{},"12-4":{},"14-2":{}},"name":{"8":{},"17":{}},"text":{"4":{},"8":{},"9":{},"10":{},"12":{},"13":{},"14":{},"19":{},"20":{},"27":{},"28":{}},"component":{}}],["aggregation’",{"_index":856,"title":{},"name":{},"text":{"8":{}},"component":{}}],["ai/kaskada/releases/download/engine%40v$version/kaskada",{"_index":146,"title":{},"name":{},"text":{"1":{}},"component":{}}],["ai/kaskada/releases/latest",{"_index":1707,"title":{},"name":{},"text":{"19":{}},"component":{}}],["airport",{"_index":1457,"title":{},"name":{},"text":{"12":{}},"component":{}}],["algorithm",{"_index":2199,"title":{},"name":{},"text":{"30":{}},"component":{}}],["alic",{"_index":1961,"title":{},"name":{},"text":{"27":{},"28":{},"30":{}},"component":{}}],["align",{"_index":1874,"title":{},"name":{},"text":{"27":{},"28":{}},"component":{}}],["allow",{"_index":52,"title":{},"name":{},"text":{"1":{},"4":{},"9":{},"10":{},"11":{},"13":{},"14":{},"15":{},"16":{},"18":{},"19":{},"20":{},"27":{},"28":{},"30":{}},"component":{}}],["allow_redirects=tru",{"_index":2086,"title":{},"name":{},"text":{"29":{}},"component":{}}],["along",{"_index":2048,"title":{},"name":{},"text":{"28":{}},"component":{}}],["alphabet",{"_index":1646,"title":{},"name":{},"text":{"16":{}},"component":{}}],["alreadi",{"_index":1178,"title":{},"name":{},"text":{"9":{}},"component":{}}],["altern",{"_index":784,"title":{},"name":{},"text":{"6":{},"7":{},"13":{},"14":{}},"component":{}}],["alway",{"_index":298,"title":{},"name":{},"text":{"2":{},"4":{},"9":{},"13":{},"17":{},"20":{},"27":{},"28":{}},"component":{}}],["amount",{"_index":429,"title":{},"name":{},"text":{"4":{},"8":{},"9":{},"12":{},"28":{},"30":{}},"component":{}}],["and/or",{"_index":761,"title":{},"name":{},"text":{"6":{},"28":{},"31":{}},"component":{}}],["anoth",{"_index":556,"title":{},"name":{},"text":{"4":{},"6":{},"9":{},"18":{},"20":{},"27":{},"28":{},"29":{},"30":{}},"component":{}}],["answer",{"_index":412,"title":{},"name":{},"text":{"4":{},"17":{},"28":{}},"component":{}}],["anyth",{"_index":548,"title":{},"name":{},"text":{"4":{},"9":{},"12":{},"20":{}},"component":{}}],["anywher",{"_index":550,"title":{},"name":{},"text":{"4":{},"7":{},"20":{}},"component":{}}],["apach",{"_index":1828,"title":{"22":{},"23":{}},"name":{"22":{},"23":{}},"text":{"23":{},"27":{},"28":{}},"component":{}}],["api",{"_index":124,"title":{},"name":{},"text":{"1":{},"6":{},"7":{},"19":{},"28":{},"29":{}},"component":{}}],["appear",{"_index":1441,"title":{},"name":{},"text":{"11":{}},"component":{}}],["append",{"_index":2161,"title":{},"name":{},"text":{"30":{}},"component":{}}],["appli",{"_index":473,"title":{},"name":{},"text":{"4":{},"5":{},"6":{},"7":{},"8":{},"9":{},"10":{},"11":{},"13":{},"14":{},"16":{},"19":{},"27":{}},"component":{}}],["applic",{"_index":153,"title":{},"name":{},"text":{"1":{},"5":{},"16":{},"19":{},"27":{},"28":{},"31":{}},"component":{}}],["approach",{"_index":1672,"title":{},"name":{},"text":{"17":{},"27":{}},"component":{}}],["appropri",{"_index":1547,"title":{},"name":{},"text":{"14":{},"27":{}},"component":{}}],["approxim",{"_index":646,"title":{},"name":{},"text":{"4":{}},"component":{}}],["arbitrari",{"_index":432,"title":{},"name":{},"text":{"4":{},"14":{},"15":{},"19":{},"27":{},"28":{}},"component":{}}],["arcan",{"_index":2030,"title":{},"name":{},"text":{"28":{}},"component":{}}],["arch",{"_index":148,"title":{},"name":{},"text":{"1":{}},"component":{}}],["arch=$(unam",{"_index":137,"title":{},"name":{},"text":{"1":{}},"component":{}}],["aren’t",{"_index":2066,"title":{},"name":{},"text":{"28":{}},"component":{}}],["argument",{"_index":85,"title":{},"name":{},"text":{"1":{},"7":{},"9":{},"11":{},"12":{},"13":{},"14":{},"16":{}},"component":{}}],["arithmet",{"_index":988,"title":{},"name":{},"text":{"9":{},"16":{}},"component":{}}],["around",{"_index":1876,"title":{},"name":{},"text":{"27":{},"28":{}},"component":{}}],["arriv",{"_index":2146,"title":{},"name":{},"text":{"30":{}},"component":{}}],["arrow",{"_index":1907,"title":{},"name":{},"text":{"27":{},"28":{}},"component":{}}],["articl",{"_index":1731,"title":{},"name":{},"text":{"19":{},"20":{},"27":{}},"component":{}}],["as_view",{"_index":72,"title":{},"name":{},"text":{"1":{}},"component":{}}],["ask",{"_index":1674,"title":{"27":{}},"name":{},"text":{"17":{},"20":{}},"component":{}}],["aspect",{"_index":850,"title":{},"name":{},"text":{"8":{}},"component":{}}],["assign",{"_index":112,"title":{"20-12":{}},"name":{},"text":{"1":{},"7":{},"9":{},"14":{},"20":{},"29":{}},"component":{}}],["associ",{"_index":448,"title":{},"name":{},"text":{"4":{},"5":{},"6":{},"8":{},"9":{},"10":{},"11":{},"12":{},"13":{},"14":{},"16":{},"17":{},"19":{},"20":{},"27":{},"30":{}},"component":{}}],["assum",{"_index":134,"title":{},"name":{},"text":{"1":{},"2":{},"30":{}},"component":{}}],["asymmetr",{"_index":1894,"title":{},"name":{},"text":{"27":{}},"component":{}}],["attempt",{"_index":1429,"title":{},"name":{},"text":{"11":{}},"component":{}}],["attribut",{"_index":1545,"title":{},"name":{},"text":{"14":{}},"component":{}}],["augment",{"_index":1245,"title":{},"name":{},"text":{"9":{}},"component":{}}],["author",{"_index":152,"title":{},"name":{},"text":{"1":{},"19":{}},"component":{}}],["autocomplet",{"_index":177,"title":{},"name":{},"text":{"1":{}},"component":{}}],["automat",{"_index":379,"title":{"4-4":{}},"name":{},"text":{"4":{},"5":{},"30":{}},"component":{}}],["av",{"_index":1456,"title":{},"name":{},"text":{"12":{}},"component":{}}],["avail",{"_index":16,"title":{},"name":{},"text":{"1":{},"9":{},"17":{},"20":{},"28":{}},"component":{}}],["averag",{"_index":513,"title":{"9-237":{},"14-4":{},"14-5":{}},"name":{},"text":{"4":{},"8":{},"9":{},"13":{},"14":{},"28":{}},"component":{}}],["average_customer_review",{"_index":1251,"title":{},"name":{},"text":{"9":{}},"component":{}}],["average_product_review",{"_index":510,"title":{},"name":{},"text":{"4":{},"9":{}},"component":{}}],["average_purchase_by_custom",{"_index":2103,"title":{},"name":{},"text":{"29":{}},"component":{}}],["average_review_by_product",{"_index":1247,"title":{},"name":{},"text":{"9":{}},"component":{}}],["averagepurchasebycustom",{"_index":1553,"title":{},"name":{},"text":{"14":{}},"component":{}}],["avg_purchas",{"_index":1586,"title":{},"name":{},"text":{"14":{}},"component":{}}],["avg_review_by_product",{"_index":1486,"title":{},"name":{},"text":{"12":{}},"component":{}}],["avoid",{"_index":881,"title":{},"name":{},"text":{"8":{}},"component":{}}],["aw",{"_index":205,"title":{"24":{},"2-6":{}},"name":{"24":{}},"text":{"2":{},"27":{}},"component":{}}],["awar",{"_index":1011,"title":{},"name":{},"text":{"9":{},"17":{}},"component":{}}],["away",{"_index":1992,"title":{"28-4":{}},"name":{},"text":{},"component":{}}],["awk",{"_index":139,"title":{},"name":{},"text":{"1":{}},"component":{}}],["aws_access_key_id",{"_index":271,"title":{},"name":{},"text":{"2":{}},"component":{}}],["aws_allow_http",{"_index":284,"title":{},"name":{},"text":{"2":{}},"component":{}}],["aws_container_credentials_relative_uri",{"_index":281,"title":{},"name":{},"text":{"2":{}},"component":{}}],["aws_default_region",{"_index":274,"title":{},"name":{},"text":{"2":{}},"component":{}}],["aws_endpoint",{"_index":276,"title":{},"name":{},"text":{"2":{}},"component":{}}],["aws_secret_access_key",{"_index":272,"title":{},"name":{},"text":{"2":{}},"component":{}}],["aws_session_token",{"_index":277,"title":{},"name":{},"text":{"2":{}},"component":{}}],["axi",{"_index":2125,"title":{},"name":{},"text":{"29":{}},"component":{}}],["b",{"_index":705,"title":{},"name":{},"text":{"5":{},"9":{},"10":{},"16":{}},"component":{}}],["b($input",{"_index":1630,"title":{},"name":{},"text":{"16":{}},"component":{}}],["b(a",{"_index":1631,"title":{},"name":{},"text":{"16":{}},"component":{}}],["b645",{"_index":2223,"title":{},"name":{},"text":{"31":{}},"component":{}}],["ba9b",{"_index":641,"title":{},"name":{},"text":{"4":{}},"component":{}}],["back",{"_index":1798,"title":{},"name":{},"text":{"20":{}},"component":{}}],["backward",{"_index":519,"title":{},"name":{},"text":{"4":{},"9":{},"12":{},"14":{}},"component":{}}],["ball",{"_index":1963,"title":{},"name":{},"text":{"27":{}},"component":{}}],["base",{"_index":381,"title":{"4-5":{},"9-89":{},"9-103":{},"9-339":{},"17-1":{}},"name":{},"text":{"5":{},"9":{},"14":{},"17":{},"21":{},"28":{},"29":{},"30":{}},"component":{}}],["base^pow",{"_index":990,"title":{},"name":{},"text":{"9":{}},"component":{}}],["basenam",{"_index":1718,"title":{},"name":{},"text":{"19":{}},"component":{}}],["bash",{"_index":1739,"title":{},"name":{},"text":{"19":{}},"component":{}}],["basic",{"_index":835,"title":{"8-1":{}},"name":{},"text":{},"component":{}}],["batch",{"_index":655,"title":{},"name":{},"text":{"4":{},"20":{},"27":{},"28":{}},"component":{}}],["bdc9e595",{"_index":578,"title":{},"name":{},"text":{"4":{}},"component":{}}],["be",{"_index":715,"title":{},"name":{},"text":{"5":{},"6":{},"10":{},"12":{},"13":{},"14":{},"16":{},"20":{},"27":{},"28":{}},"component":{}}],["becom",{"_index":1483,"title":{},"name":{},"text":{"12":{}},"component":{}}],["becus",{"_index":1948,"title":{},"name":{},"text":{"27":{}},"component":{}}],["befor",{"_index":62,"title":{},"name":{},"text":{"1":{},"2":{},"4":{},"6":{},"7":{},"8":{},"9":{},"14":{},"20":{},"27":{},"30":{}},"component":{}}],["began",{"_index":1565,"title":{},"name":{},"text":{"14":{}},"component":{}}],["begin",{"_index":474,"title":{},"name":{},"text":{"4":{},"7":{},"8":{},"9":{},"19":{},"20":{},"29":{}},"component":{}}],["behavior",{"_index":81,"title":{"4-19":{}},"name":{},"text":{"1":{},"4":{},"6":{},"8":{},"9":{},"13":{},"16":{},"17":{},"19":{},"20":{},"28":{}},"component":{}}],["behind",{"_index":407,"title":{},"name":{},"text":{"4":{}},"component":{}}],["believ",{"_index":1875,"title":{},"name":{},"text":{"27":{}},"component":{}}],["below",{"_index":783,"title":{},"name":{},"text":{"6":{},"7":{},"11":{},"12":{},"19":{}},"component":{}}],["ben",{"_index":1023,"title":{},"name":{},"text":{"9":{}},"component":{}}],["bene",{"_index":2191,"title":{},"name":{},"text":{"30":{}},"component":{}}],["benefit",{"_index":1657,"title":{},"name":{},"text":{"16":{},"28":{}},"component":{}}],["better",{"_index":1136,"title":{},"name":{},"text":{"9":{},"13":{},"19":{},"29":{}},"component":{}}],["between",{"_index":554,"title":{"9-117":{},"9-131":{},"9-363":{},"9-432":{},"10-3":{},"13-1":{},"14-5":{}},"name":{},"text":{"4":{},"5":{},"9":{},"10":{},"11":{},"13":{},"14":{},"19":{},"27":{},"28":{}},"component":{}}],["big",{"_index":544,"title":{},"name":{},"text":{"4":{},"20":{},"27":{},"28":{}},"component":{}}],["binari",{"_index":128,"title":{"16-2":{}},"name":{},"text":{"1":{},"9":{},"10":{},"16":{},"19":{}},"component":{}}],["bind",{"_index":1598,"title":{"16-3":{}},"name":{},"text":{"16":{}},"component":{}}],["bit",{"_index":1381,"title":{},"name":{},"text":{"11":{},"27":{}},"component":{}}],["block",{"_index":40,"title":{},"name":{},"text":{"1":{},"7":{},"19":{},"20":{}},"component":{}}],["block’",{"_index":1816,"title":{},"name":{},"text":{"20":{}},"component":{}}],["bob",{"_index":2022,"title":{},"name":{},"text":{"28":{},"30":{}},"component":{}}],["bodi",{"_index":87,"title":{},"name":{},"text":{"1":{},"16":{}},"component":{}}],["boilerpl",{"_index":451,"title":{},"name":{},"text":{"4":{},"12":{}},"component":{}}],["bool",{"_index":860,"title":{},"name":{},"text":{"8":{},"9":{},"11":{},"14":{}},"component":{}}],["boolean",{"_index":985,"title":{},"name":{},"text":{"9":{},"11":{}},"component":{}}],["bootstrap",{"_index":1904,"title":{},"name":{},"text":{"27":{}},"component":{}}],["both",{"_index":461,"title":{},"name":{},"text":{"4":{},"9":{},"10":{},"11":{},"12":{},"13":{},"18":{},"20":{},"21":{},"27":{}},"component":{}}],["bottleneck",{"_index":2079,"title":{},"name":{},"text":{"28":{}},"component":{}}],["bound",{"_index":975,"title":{},"name":{},"text":{"9":{},"16":{}},"component":{}}],["boundari",{"_index":880,"title":{},"name":{},"text":{"8":{}},"component":{}}],["brace",{"_index":1688,"title":{},"name":{},"text":{"18":{},"19":{}},"component":{}}],["bracket",{"_index":438,"title":{},"name":{},"text":{"4":{}},"component":{}}],["brag",{"_index":2155,"title":{},"name":{},"text":{"30":{}},"component":{}}],["branch",{"_index":2076,"title":{},"name":{},"text":{"28":{}},"component":{}}],["break",{"_index":1608,"title":{},"name":{},"text":{"16":{}},"component":{}}],["bring",{"_index":1997,"title":{},"name":{},"text":{"28":{}},"component":{}}],["broker_service_url",{"_index":329,"title":{},"name":{},"text":{"3":{},"23":{}},"component":{}}],["browser",{"_index":1790,"title":{},"name":{},"text":{"20":{}},"component":{}}],["browser_download_url",{"_index":1709,"title":{},"name":{},"text":{"19":{}},"component":{}}],["bucket",{"_index":1990,"title":{},"name":{},"text":{"27":{}},"component":{}}],["bucket/path/to/result",{"_index":338,"title":{},"name":{},"text":{"3":{}},"component":{}}],["buffer",{"_index":1903,"title":{},"name":{},"text":{"27":{}},"component":{}}],["bug",{"_index":1745,"title":{},"name":{},"text":{"19":{}},"component":{}}],["build",{"_index":415,"title":{"30-2":{}},"name":{},"text":{"4":{},"13":{},"14":{},"17":{},"19":{},"20":{},"27":{},"28":{},"29":{},"30":{}},"component":{}}],["builder",{"_index":1795,"title":{},"name":{},"text":{"20":{}},"component":{}}],["built",{"_index":425,"title":{},"name":{},"text":{"4":{},"14":{},"20":{},"27":{},"28":{}},"component":{}}],["bulk",{"_index":102,"title":{},"name":{},"text":{"1":{},"27":{},"28":{}},"component":{}}],["bulk/olap",{"_index":1905,"title":{},"name":{},"text":{"27":{}},"component":{}}],["busi",{"_index":347,"title":{},"name":{},"text":{"3":{},"4":{},"7":{},"27":{}},"component":{}}],["buy",{"_index":1533,"title":{},"name":{},"text":{"14":{},"30":{}},"component":{}}],["c",{"_index":706,"title":{},"name":{},"text":{"5":{},"9":{},"19":{}},"component":{}}],["c2e3d886b633",{"_index":582,"title":{},"name":{},"text":{"4":{}},"component":{}}],["c_avg_rat",{"_index":1477,"title":{},"name":{},"text":{"12":{}},"component":{}}],["cach",{"_index":2077,"title":{},"name":{},"text":{"28":{}},"component":{}}],["cache/kaskada/log",{"_index":2208,"title":{},"name":{},"text":{"31":{}},"component":{}}],["cadenc",{"_index":546,"title":{},"name":{},"text":{"4":{},"20":{}},"component":{}}],["calcul",{"_index":1669,"title":{},"name":{},"text":{"17":{}},"component":{}}],["calendar",{"_index":977,"title":{},"name":{},"text":{"9":{},"11":{}},"component":{}}],["calendari",{"_index":1332,"title":{},"name":{},"text":{"9":{}},"component":{}}],["calendr",{"_index":1411,"title":{},"name":{},"text":{"11":{}},"component":{}}],["call",{"_index":396,"title":{"16-4":{}},"name":{},"text":{"4":{},"6":{},"14":{},"16":{}},"component":{}}],["callback",{"_index":1971,"title":{},"name":{},"text":{"27":{}},"component":{}}],["came",{"_index":1922,"title":{},"name":{},"text":{"27":{}},"component":{}}],["camelcas",{"_index":751,"title":{},"name":{},"text":{"6":{},"7":{},"19":{},"20":{}},"component":{}}],["cancel",{"_index":1967,"title":{},"name":{},"text":{"27":{}},"component":{}}],["can’t",{"_index":2144,"title":{},"name":{},"text":{"30":{}},"component":{}}],["captur",{"_index":1493,"title":{},"name":{},"text":{"12":{},"15":{},"19":{},"20":{},"27":{},"30":{}},"component":{}}],["carefulli",{"_index":2027,"title":{},"name":{},"text":{"28":{}},"component":{}}],["case",{"_index":342,"title":{"9-280":{},"9-532":{}},"name":{},"text":{"3":{},"4":{},"7":{},"8":{},"9":{},"10":{},"11":{},"12":{},"13":{},"14":{},"17":{},"27":{},"29":{}},"component":{}}],["cassandra",{"_index":1827,"title":{"22":{},"22-1":{}},"name":{"22":{}},"text":{"22":{}},"component":{}}],["cast",{"_index":227,"title":{},"name":{},"text":{"2":{},"9":{}},"component":{}}],["catalog",{"_index":409,"title":{"9":{}},"name":{"9":{}},"text":{"4":{}},"component":{}}],["categori",{"_index":893,"title":{"9-2":{}},"name":{},"text":{"12":{}},"component":{}}],["caus",{"_index":660,"title":{},"name":{},"text":{"4":{},"7":{},"29":{}},"component":{}}],["cb_001",{"_index":591,"title":{},"name":{},"text":{"4":{},"14":{}},"component":{}}],["cb_002",{"_index":601,"title":{},"name":{},"text":{"4":{},"14":{}},"component":{}}],["cb_003",{"_index":604,"title":{},"name":{},"text":{"4":{},"14":{}},"component":{}}],["cb_004",{"_index":609,"title":{},"name":{},"text":{"4":{},"14":{}},"component":{}}],["cb_005",{"_index":613,"title":{},"name":{},"text":{"4":{},"14":{}},"component":{}}],["cb_006",{"_index":615,"title":{},"name":{},"text":{"4":{},"14":{}},"component":{}}],["cb_007",{"_index":630,"title":{},"name":{},"text":{"4":{}},"component":{}}],["cdc",{"_index":1972,"title":{},"name":{},"text":{"27":{}},"component":{}}],["ceil",{"_index":899,"title":{"9-30":{},"9-33":{}},"name":{},"text":{"9":{}},"component":{}}],["cell",{"_index":1791,"title":{},"name":{},"text":{"20":{}},"component":{}}],["centric",{"_index":1647,"title":{},"name":{},"text":{"16":{}},"component":{}}],["cep",{"_index":2010,"title":{},"name":{},"text":{"28":{}},"component":{}}],["certain",{"_index":1225,"title":{},"name":{},"text":{"9":{}},"component":{}}],["chain",{"_index":478,"title":{},"name":{},"text":{"4":{},"9":{},"14":{},"15":{},"16":{}},"component":{}}],["challeng",{"_index":1665,"title":{"17-1":{},"28-2":{}},"name":{},"text":{"27":{}},"component":{}}],["chanc",{"_index":714,"title":{},"name":{},"text":{"5":{}},"component":{}}],["chang",{"_index":313,"title":{"9-237":{},"9-553":{},"12-6":{},"14-4":{},"20-10":{}},"name":{},"text":{"3":{},"4":{},"6":{},"7":{},"9":{},"12":{},"14":{},"17":{},"19":{},"20":{},"21":{},"27":{},"28":{},"30":{}},"component":{}}],["charact",{"_index":1290,"title":{},"name":{},"text":{"9":{},"11":{},"16":{},"20":{}},"component":{}}],["check",{"_index":1730,"title":{},"name":{},"text":{"19":{},"20":{},"30":{}},"component":{}}],["checkout.html",{"_index":2020,"title":{},"name":{},"text":{"28":{}},"component":{}}],["chmod",{"_index":150,"title":{},"name":{},"text":{"1":{},"19":{}},"component":{}}],["choic",{"_index":1896,"title":{},"name":{},"text":{"27":{}},"component":{}}],["choos",{"_index":553,"title":{"9-131":{},"13-1":{}},"name":{},"text":{"4":{},"27":{}},"component":{}}],["chose",{"_index":2069,"title":{},"name":{},"text":{"28":{}},"component":{}}],["chosen",{"_index":1165,"title":{},"name":{},"text":{"9":{},"14":{}},"component":{}}],["chronolog",{"_index":1950,"title":{},"name":{},"text":{"27":{},"28":{},"30":{}},"component":{}}],["chum_bucket",{"_index":596,"title":{},"name":{},"text":{"4":{},"14":{}},"component":{}}],["circl",{"_index":1352,"title":{},"name":{},"text":{"10":{}},"component":{}}],["citi",{"_index":1460,"title":{},"name":{},"text":{"12":{},"26":{}},"component":{}}],["clamp",{"_index":900,"title":{"9-37":{},"9-40":{},"9-44":{}},"name":{},"text":{"9":{}},"component":{}}],["clamp(min",{"_index":996,"title":{},"name":{},"text":{"9":{}},"component":{}}],["claus",{"_index":1637,"title":{},"name":{},"text":{"16":{}},"component":{}}],["clean",{"_index":576,"title":{"19-5":{}},"name":{},"text":{"4":{},"7":{},"13":{},"27":{}},"component":{}}],["clear",{"_index":1656,"title":{},"name":{},"text":{"16":{}},"component":{}}],["clearli",{"_index":1650,"title":{},"name":{},"text":{"16":{}},"component":{}}],["cli",{"_index":7,"title":{"19":{},"1-3":{},"2-8":{},"6-7":{},"6-8":{},"7-7":{},"7-8":{}},"name":{"19":{}},"text":{"1":{},"2":{},"3":{},"4":{},"6":{},"7":{},"19":{},"21":{}},"component":{}}],["click",{"_index":1969,"title":{},"name":{},"text":{"27":{}},"component":{}}],["client",{"_index":33,"title":{"20-2":{}},"name":{},"text":{"1":{},"7":{},"20":{},"21":{},"29":{}},"component":{}}],["client’",{"_index":1794,"title":{},"name":{},"text":{"20":{}},"component":{}}],["coalesc",{"_index":901,"title":{"9-48":{}},"name":{},"text":{"9":{}},"component":{}}],["code",{"_index":39,"title":{},"name":{},"text":{"1":{},"4":{},"12":{},"16":{},"20":{},"27":{},"28":{}},"component":{}}],["coerc",{"_index":1417,"title":{},"name":{},"text":{"11":{}},"component":{}}],["coercion",{"_index":1121,"title":{"11-4":{},"11-6":{}},"name":{},"text":{"9":{},"11":{}},"component":{}}],["collabor",{"_index":1988,"title":{},"name":{},"text":{"27":{}},"component":{}}],["collect",{"_index":463,"title":{},"name":{},"text":{"4":{},"27":{},"28":{},"30":{}},"component":{}}],["collid",{"_index":1689,"title":{},"name":{},"text":{"18":{}},"component":{}}],["column",{"_index":215,"title":{"9-521":{},"9-525":{}},"name":{},"text":{"2":{},"5":{},"6":{},"9":{},"11":{},"18":{},"19":{},"20":{},"28":{},"30":{}},"component":{}}],["columnar",{"_index":1908,"title":{},"name":{},"text":{"27":{},"28":{}},"component":{}}],["com.apple.quarantin",{"_index":166,"title":{},"name":{},"text":{"1":{},"19":{}},"component":{}}],["combin",{"_index":233,"title":{},"name":{},"text":{"2":{},"4":{},"6":{},"9":{},"10":{},"11":{},"12":{},"13":{},"14":{},"15":{},"16":{},"19":{}},"component":{}}],["come",{"_index":1989,"title":{},"name":{},"text":{"27":{},"28":{}},"component":{}}],["command",{"_index":5,"title":{"1-3":{},"20-3":{}},"name":{},"text":{"1":{},"6":{},"7":{},"19":{},"20":{},"21":{},"28":{},"31":{}},"component":{}}],["comment",{"_index":413,"title":{},"name":{},"text":{"4":{}},"component":{}}],["commod",{"_index":1920,"title":{},"name":{},"text":{"27":{}},"component":{}}],["common",{"_index":577,"title":{},"name":{},"text":{"4":{},"7":{},"12":{},"13":{},"15":{},"16":{},"17":{}},"component":{}}],["commun",{"_index":818,"title":{},"name":{},"text":{"7":{},"19":{}},"component":{}}],["compar",{"_index":522,"title":{},"name":{},"text":{"4":{},"14":{},"16":{},"30":{}},"component":{}}],["comparison",{"_index":894,"title":{"9-5":{}},"name":{},"text":{"9":{},"13":{},"28":{}},"component":{}}],["compat",{"_index":263,"title":{},"name":{},"text":{"2":{},"9":{},"11":{},"13":{},"27":{}},"component":{}}],["compil",{"_index":127,"title":{},"name":{},"text":{"1":{},"19":{}},"component":{}}],["complet",{"_index":175,"title":{},"name":{},"text":{"1":{}},"component":{}}],["complex",{"_index":1609,"title":{},"name":{},"text":{"16":{},"17":{},"19":{},"28":{}},"component":{}}],["compon",{"_index":120,"title":{},"name":{},"text":{"1":{},"11":{},"16":{},"19":{},"20":{}},"component":{}}],["compos",{"_index":389,"title":{"4-10":{}},"name":{},"text":{"4":{},"16":{},"21":{},"30":{}},"component":{}}],["composit",{"_index":1416,"title":{},"name":{},"text":{"11":{}},"component":{}}],["comput",{"_index":390,"title":{"4-11":{},"27-6":{}},"name":{},"text":{"4":{},"5":{},"8":{},"9":{},"13":{},"14":{},"15":{},"17":{},"19":{},"20":{},"27":{},"28":{},"30":{}},"component":{}}],["computation’",{"_index":1591,"title":{},"name":{},"text":{"15":{},"19":{}},"component":{}}],["compute.query(query=queri",{"_index":719,"title":{},"name":{},"text":{"5":{}},"component":{}}],["conceiv",{"_index":1663,"title":{},"name":{},"text":{"16":{}},"component":{}}],["condit",{"_index":983,"title":{},"name":{},"text":{"9":{},"12":{},"13":{},"16":{},"28":{}},"component":{}}],["condition",{"_index":1213,"title":{},"name":{},"text":{"9":{}},"component":{}}],["conditionali",{"_index":1133,"title":{},"name":{},"text":{"9":{}},"component":{}}],["config",{"_index":186,"title":{},"name":{},"text":{"1":{},"16":{},"24":{},"26":{}},"component":{}}],["configur",{"_index":14,"title":{"4-11":{},"4-12":{},"20-9":{}},"name":{},"text":{"1":{},"2":{},"3":{},"4":{},"6":{},"9":{},"19":{},"20":{}},"component":{}}],["conform",{"_index":1959,"title":{},"name":{},"text":{"27":{}},"component":{}}],["confus",{"_index":1652,"title":{},"name":{},"text":{"16":{},"27":{}},"component":{}}],["congratul",{"_index":1799,"title":{},"name":{},"text":{"20":{}},"component":{}}],["conjunct",{"_index":984,"title":{},"name":{},"text":{"9":{}},"component":{}}],["connect",{"_index":194,"title":{},"name":{},"text":{"1":{},"2":{},"20":{}},"component":{}}],["connector",{"_index":1834,"title":{},"name":{},"text":{"22":{},"25":{}},"component":{}}],["consid",{"_index":1174,"title":{},"name":{},"text":{"9":{},"11":{}},"component":{}}],["consist",{"_index":208,"title":{},"name":{},"text":{"2":{},"6":{},"12":{},"14":{},"16":{},"20":{},"27":{}},"component":{}}],["constant",{"_index":1506,"title":{},"name":{},"text":{"13":{},"16":{}},"component":{}}],["constraint",{"_index":1374,"title":{"11-9":{}},"name":{},"text":{"11":{}},"component":{}}],["construct",{"_index":1595,"title":{},"name":{},"text":{"15":{},"16":{},"30":{}},"component":{}}],["constructor",{"_index":1596,"title":{"16-1":{}},"name":{},"text":{},"component":{}}],["consum",{"_index":839,"title":{},"name":{},"text":{"8":{}},"component":{}}],["contain",{"_index":115,"title":{},"name":{},"text":{"1":{},"6":{},"9":{},"10":{},"11":{},"14":{},"16":{},"18":{},"19":{},"20":{},"28":{},"30":{},"31":{}},"component":{}}],["content",{"_index":294,"title":{"4-2":{},"6-11":{},"7-11":{}},"name":{},"text":{"2":{},"7":{},"19":{},"20":{}},"component":{}}],["content/drive/place/thing/purchases.parquet",{"_index":290,"title":{},"name":{},"text":{"2":{}},"component":{}}],["context",{"_index":67,"title":{},"name":{},"text":{"1":{},"4":{},"16":{},"27":{},"28":{},"30":{}},"component":{}}],["contextu",{"_index":1995,"title":{},"name":{},"text":{"28":{}},"component":{}}],["continu",{"_index":385,"title":{"10":{},"4-8":{},"10-2":{},"10-3":{}},"name":{"10":{}},"text":{"4":{},"6":{},"9":{},"10":{},"13":{},"14":{}},"component":{}}],["contrast",{"_index":1564,"title":{},"name":{},"text":{"14":{}},"component":{}}],["contribut",{"_index":851,"title":{},"name":{},"text":{"8":{},"10":{}},"component":{}}],["control",{"_index":836,"title":{"8-3":{},"8-4":{}},"name":{},"text":{"8":{}},"component":{}}],["conveni",{"_index":1541,"title":{},"name":{},"text":{"14":{},"28":{},"31":{}},"component":{}}],["convent",{"_index":817,"title":{},"name":{},"text":{"7":{}},"component":{}}],["convers",{"_index":1422,"title":{},"name":{},"text":{"11":{},"13":{},"27":{}},"component":{}}],["convert",{"_index":392,"title":{"4-12":{},"20-10":{}},"name":{},"text":{"9":{},"11":{}},"component":{}}],["copi",{"_index":1841,"title":{},"name":{},"text":{"24":{},"26":{},"29":{}},"component":{}}],["coral_bit",{"_index":1256,"title":{},"name":{},"text":{"9":{}},"component":{}}],["core",{"_index":1670,"title":{},"name":{},"text":{"17":{},"20":{},"27":{}},"component":{}}],["correct",{"_index":1666,"title":{"17-5":{}},"name":{},"text":{"27":{},"30":{}},"component":{}}],["correctli",{"_index":168,"title":{},"name":{},"text":{"1":{},"19":{},"20":{}},"component":{}}],["correspond",{"_index":841,"title":{},"name":{},"text":{"8":{},"9":{},"10":{},"11":{},"16":{},"18":{},"27":{},"29":{}},"component":{}}],["count",{"_index":456,"title":{"9-55":{},"9-58":{},"9-65":{},"9-460":{},"9-464":{}},"name":{},"text":{"4":{},"7":{},"9":{},"10":{},"11":{},"12":{},"13":{},"14":{},"17":{},"27":{},"28":{},"30":{}},"component":{}}],["count($input",{"_index":1436,"title":{},"name":{},"text":{"11":{}},"component":{}}],["count(fraudreport",{"_index":1543,"title":{},"name":{},"text":{"14":{},"29":{}},"component":{}}],["count(input",{"_index":1433,"title":{},"name":{},"text":{"11":{}},"component":{}}],["count(input.valu",{"_index":1036,"title":{},"name":{},"text":{"9":{}},"component":{}}],["count(input=$input",{"_index":1437,"title":{},"name":{},"text":{"11":{}},"component":{}}],["count(pageview",{"_index":454,"title":{},"name":{},"text":{"4":{}},"component":{}}],["count(purchas",{"_index":453,"title":{},"name":{},"text":{"4":{},"7":{},"20":{},"30":{}},"component":{}}],["count(signup",{"_index":501,"title":{},"name":{},"text":{"4":{}},"component":{}}],["count(sinc",{"_index":1440,"title":{},"name":{},"text":{"11":{}},"component":{}}],["count(since(daili",{"_index":1960,"title":{},"name":{},"text":{"27":{}},"component":{}}],["count(since(purchas",{"_index":2050,"title":{},"name":{},"text":{"28":{}},"component":{}}],["count(window",{"_index":1439,"title":{},"name":{},"text":{"11":{}},"component":{}}],["count(window=since(cad",{"_index":551,"title":{},"name":{},"text":{"4":{},"20":{}},"component":{}}],["count_if",{"_index":902,"title":{"9-62":{}},"name":{},"text":{"9":{}},"component":{}}],["count_if(input.valu",{"_index":1044,"title":{},"name":{},"text":{"9":{}},"component":{}}],["countpurchas",{"_index":829,"title":{},"name":{},"text":{"7":{}},"component":{}}],["cpu",{"_index":1944,"title":{},"name":{},"text":{"27":{},"28":{}},"component":{}}],["cpu’",{"_index":1899,"title":{},"name":{},"text":{"27":{}},"component":{}}],["creat",{"_index":22,"title":{"3-5":{},"6-2":{},"6-8":{},"7-2":{},"7-8":{},"18-1":{},"20-5":{}},"name":{},"text":{"1":{},"2":{},"3":{},"4":{},"5":{},"6":{},"7":{},"9":{},"11":{},"18":{},"19":{},"20":{},"23":{},"26":{},"27":{},"29":{},"30":{},"31":{}},"component":{}}],["create_t",{"_index":1800,"title":{},"name":{},"text":{"20":{}},"component":{}}],["create_tim",{"_index":1803,"title":{},"name":{},"text":{"20":{}},"component":{}}],["credenti",{"_index":269,"title":{},"name":{},"text":{"2":{}},"component":{}}],["critic",{"_index":1668,"title":{},"name":{},"text":{"17":{},"27":{}},"component":{}}],["cron",{"_index":882,"title":{},"name":{},"text":{"8":{}},"component":{}}],["cross",{"_index":1446,"title":{"12-5":{}},"name":{},"text":{},"component":{}}],["csv",{"_index":202,"title":{"2-3":{},"9-22":{},"9-29":{},"9-36":{},"9-43":{},"9-47":{},"9-54":{},"9-61":{},"9-68":{},"9-74":{},"9-78":{},"9-85":{},"9-92":{},"9-99":{},"9-106":{},"9-113":{},"9-120":{},"9-127":{},"9-134":{},"9-138":{},"9-145":{},"9-152":{},"9-159":{},"9-166":{},"9-173":{},"9-180":{},"9-187":{},"9-194":{},"9-198":{},"9-204":{},"9-208":{},"9-215":{},"9-222":{},"9-229":{},"9-236":{},"9-240":{},"9-247":{},"9-254":{},"9-261":{},"9-268":{},"9-276":{},"9-283":{},"9-290":{},"9-297":{},"9-304":{},"9-311":{},"9-318":{},"9-324":{},"9-328":{},"9-335":{},"9-342":{},"9-348":{},"9-352":{},"9-359":{},"9-366":{},"9-373":{},"9-380":{},"9-387":{},"9-394":{},"9-401":{},"9-407":{},"9-414":{},"9-421":{},"9-428":{},"9-435":{},"9-442":{},"9-449":{},"9-456":{},"9-463":{},"9-467":{},"9-474":{},"9-478":{},"9-485":{},"9-492":{},"9-499":{},"9-506":{},"9-510":{},"9-517":{},"9-524":{},"9-528":{},"9-535":{},"9-542":{},"9-549":{},"9-556":{},"9-563":{},"9-569":{},"9-573":{},"9-580":{},"9-587":{}},"name":{},"text":{"2":{},"19":{}},"component":{}}],["curl",{"_index":135,"title":{},"name":{},"text":{"1":{},"19":{}},"component":{}}],["curli",{"_index":437,"title":{},"name":{},"text":{"4":{},"18":{},"19":{}},"component":{}}],["current",{"_index":296,"title":{"6-10":{},"7-10":{},"28-2":{}},"name":{},"text":{"2":{},"3":{},"4":{},"5":{},"6":{},"7":{},"9":{},"14":{},"17":{},"20":{},"27":{},"30":{}},"component":{}}],["current_favorit",{"_index":1638,"title":{},"name":{},"text":{"16":{}},"component":{}}],["custom",{"_index":44,"title":{"14-4":{},"14-5":{}},"name":{},"text":{"1":{},"9":{},"12":{},"14":{},"17":{},"20":{}},"component":{}}],["customer_01",{"_index":725,"title":{},"name":{},"text":{"5":{}},"component":{}}],["customer_03",{"_index":726,"title":{},"name":{},"text":{"5":{}},"component":{}}],["customer_id",{"_index":587,"title":{},"name":{},"text":{"4":{},"6":{},"9":{},"12":{},"14":{},"19":{},"20":{},"28":{},"29":{}},"component":{}}],["customeraveragepurchas",{"_index":1561,"title":{},"name":{},"text":{"14":{}},"component":{}}],["customeraveragepurchase.tim",{"_index":1571,"title":{},"name":{},"text":{"14":{}},"component":{}}],["customer’",{"_index":1470,"title":{},"name":{},"text":{"12":{},"14":{}},"component":{}}],["cut",{"_index":1714,"title":{},"name":{},"text":{"19":{}},"component":{}}],["d",{"_index":189,"title":{},"name":{},"text":{"1":{},"5":{},"19":{}},"component":{}}],["dac8d5b303a2",{"_index":623,"title":{},"name":{},"text":{"4":{}},"component":{}}],["daili",{"_index":494,"title":{"9-69":{},"9-71":{},"9-75":{}},"name":{},"text":{"4":{},"9":{},"14":{},"27":{}},"component":{}}],["daily_averag",{"_index":2053,"title":{},"name":{},"text":{"28":{}},"component":{}}],["daily_sum",{"_index":1047,"title":{},"name":{},"text":{"9":{}},"component":{}}],["data",{"_index":73,"title":{"2":{},"11":{},"2-2":{},"2-3":{},"2-7":{},"2-8":{},"4-18":{},"14-1":{},"17-1":{},"19-3":{},"19-4":{},"20-4":{},"20-6":{},"20-7":{},"27-5":{}},"name":{"2":{},"11":{}},"text":{"1":{},"2":{},"3":{},"4":{},"5":{},"6":{},"8":{},"12":{},"16":{},"17":{},"19":{},"20":{},"21":{},"24":{},"25":{},"26":{},"27":{},"28":{},"29":{}},"component":{}}],["data_token",{"_index":75,"title":{},"name":{},"text":{"1":{}},"component":{}}],["data_token_id",{"_index":295,"title":{},"name":{},"text":{"2":{},"4":{},"20":{}},"component":{}}],["databas",{"_index":1452,"title":{},"name":{},"text":{"12":{},"22":{},"27":{}},"component":{}}],["datafram",{"_index":117,"title":{},"name":{},"text":{"1":{},"4":{},"17":{},"20":{}},"component":{}}],["dataset",{"_index":226,"title":{},"name":{},"text":{"2":{},"4":{},"5":{},"8":{},"12":{},"17":{},"19":{},"27":{},"28":{},"29":{},"30":{}},"component":{}}],["date",{"_index":224,"title":{},"name":{},"text":{"2":{},"3":{},"8":{},"9":{},"30":{}},"component":{}}],["datetim",{"_index":1464,"title":{},"name":{},"text":{"12":{}},"component":{}}],["day",{"_index":529,"title":{"9-26":{},"9-82":{},"9-89":{},"9-96":{},"9-103":{},"9-107":{},"9-110":{},"9-117":{},"9-471":{}},"name":{},"text":{"4":{},"8":{},"9":{},"14":{},"27":{},"29":{},"30":{}},"component":{}}],["day_of_month",{"_index":903,"title":{"9-79":{}},"name":{},"text":{"9":{}},"component":{}}],["day_of_month(input.tim",{"_index":1072,"title":{},"name":{},"text":{"9":{}},"component":{}}],["day_of_month0",{"_index":905,"title":{"9-86":{}},"name":{},"text":{"9":{}},"component":{}}],["day_of_month0(input.tim",{"_index":1076,"title":{},"name":{},"text":{"9":{}},"component":{}}],["day_of_year",{"_index":907,"title":{"9-93":{}},"name":{},"text":{"9":{}},"component":{}}],["day_of_year(input.tim",{"_index":1078,"title":{},"name":{},"text":{"9":{}},"component":{}}],["day_of_year0",{"_index":908,"title":{"9-100":{}},"name":{},"text":{"9":{}},"component":{}}],["day_of_year0(input.tim",{"_index":1086,"title":{},"name":{},"text":{"9":{}},"component":{}}],["days_between",{"_index":909,"title":{"9-114":{}},"name":{},"text":{"9":{}},"component":{}}],["days_between(input.tim",{"_index":1109,"title":{},"name":{},"text":{"9":{}},"component":{}}],["day’",{"_index":2052,"title":{},"name":{},"text":{"28":{}},"component":{}}],["dd61...70e9",{"_index":831,"title":{},"name":{},"text":{"7":{}},"component":{}}],["de",{"_index":1927,"title":{},"name":{},"text":{"27":{}},"component":{}}],["dead",{"_index":1935,"title":{},"name":{},"text":{"27":{}},"component":{}}],["deal",{"_index":837,"title":{"17-2":{}},"name":{},"text":{"8":{}},"component":{}}],["debug",{"_index":76,"title":{},"name":{},"text":{"1":{},"19":{}},"component":{}}],["decid",{"_index":2192,"title":{},"name":{},"text":{"30":{}},"component":{}}],["decim",{"_index":1388,"title":{},"name":{},"text":{"11":{}},"component":{}}],["decis",{"_index":1860,"title":{},"name":{},"text":{"27":{}},"component":{}}],["declar",{"_index":419,"title":{},"name":{},"text":{"4":{},"6":{},"7":{},"15":{},"16":{},"19":{},"21":{},"28":{}},"component":{}}],["deeper",{"_index":875,"title":{},"name":{},"text":{"8":{}},"component":{}}],["default",{"_index":98,"title":{"9-135":{}},"name":{},"text":{"1":{},"3":{},"4":{},"6":{},"8":{},"9":{},"11":{},"14":{},"16":{},"19":{},"20":{},"23":{},"26":{}},"component":{}}],["defin",{"_index":232,"title":{"30-4":{},"30-5":{}},"name":{},"text":{"2":{},"3":{},"6":{},"7":{},"10":{},"14":{},"16":{},"19":{},"20":{},"27":{},"28":{}},"component":{}}],["definit",{"_index":216,"title":{"29-2":{}},"name":{},"text":{"2":{},"3":{},"7":{},"15":{},"19":{},"27":{}},"component":{}}],["delet",{"_index":307,"title":{"3-9":{},"6-6":{},"6-8":{},"7-6":{},"7-8":{}},"name":{},"text":{"3":{},"6":{},"7":{},"19":{}},"component":{}}],["delta",{"_index":1445,"title":{},"name":{},"text":{"11":{}},"component":{}}],["demonstr",{"_index":1463,"title":{},"name":{},"text":{"12":{}},"component":{}}],["depend",{"_index":13,"title":{},"name":{},"text":{"1":{},"3":{},"4":{},"6":{},"7":{},"10":{},"12":{},"14":{},"16":{},"20":{},"27":{},"28":{},"29":{}},"component":{}}],["describ",{"_index":340,"title":{},"name":{},"text":{"3":{},"4":{},"6":{},"7":{},"8":{},"9":{},"10":{},"11":{},"12":{},"13":{},"14":{},"15":{},"16":{},"17":{},"18":{},"19":{},"20":{},"27":{},"28":{},"30":{}},"component":{}}],["descript",{"_index":771,"title":{},"name":{},"text":{"6":{},"7":{},"11":{}},"component":{}}],["design",{"_index":397,"title":{"16-7":{}},"name":{},"text":{"4":{},"10":{},"16":{},"17":{},"27":{},"28":{},"29":{},"30":{}},"component":{}}],["desir",{"_index":768,"title":{},"name":{},"text":{"6":{},"7":{}},"component":{}}],["destin",{"_index":303,"title":{"3-1":{}},"name":{},"text":{"3":{},"23":{}},"component":{}}],["destruct",{"_index":794,"title":{},"name":{},"text":{"6":{},"7":{}},"component":{}}],["detail",{"_index":293,"title":{"5-2":{},"5-7":{},"9-15":{}},"name":{},"text":{"2":{},"27":{},"28":{}},"component":{}}],["detect",{"_index":1527,"title":{},"name":{},"text":{"14":{},"28":{}},"component":{}}],["determin",{"_index":107,"title":{},"name":{},"text":{"1":{},"4":{},"9":{},"16":{},"18":{}},"component":{}}],["determinist",{"_index":690,"title":{},"name":{},"text":{"5":{},"16":{}},"component":{}}],["develop",{"_index":2063,"title":{},"name":{},"text":{"28":{}},"component":{}}],["developing:tables.adoc#cr",{"_index":1723,"title":{},"name":{},"text":{"19":{},"20":{}},"component":{}}],["deviat",{"_index":960,"title":{"9-489":{}},"name":{},"text":{"9":{}},"component":{}}],["df",{"_index":97,"title":{},"name":{},"text":{"1":{}},"component":{}}],["diagnos",{"_index":2202,"title":{},"name":{},"text":{"31":{}},"component":{}}],["didn’t",{"_index":1859,"title":{},"name":{},"text":{"27":{},"30":{}},"component":{}}],["differ",{"_index":254,"title":{"12-7":{},"13-2":{},"15-2":{}},"name":{},"text":{"2":{},"3":{},"4":{},"6":{},"8":{},"9":{},"10":{},"11":{},"12":{},"13":{},"14":{},"15":{},"16":{},"17":{},"19":{},"20":{},"21":{},"27":{},"28":{},"29":{},"30":{}},"component":{}}],["difficult",{"_index":1675,"title":{},"name":{},"text":{"17":{},"27":{},"28":{},"30":{}},"component":{}}],["digit",{"_index":1918,"title":{},"name":{},"text":{"27":{}},"component":{}}],["directli",{"_index":767,"title":{"27-6":{}},"name":{},"text":{"6":{},"7":{},"9":{}},"component":{}}],["discard",{"_index":1107,"title":{},"name":{},"text":{"9":{}},"component":{}}],["discret",{"_index":505,"title":{"10-1":{},"10-3":{}},"name":{},"text":{"4":{},"10":{},"13":{},"14":{}},"component":{}}],["discrete[a",{"_index":1366,"title":{},"name":{},"text":{"10":{}},"component":{}}],["discrete[b",{"_index":1367,"title":{},"name":{},"text":{"10":{}},"component":{}}],["discuss",{"_index":1889,"title":{},"name":{},"text":{"27":{}},"component":{}}],["disjunct",{"_index":986,"title":{},"name":{},"text":{"9":{}},"component":{}}],["disk",{"_index":259,"title":{},"name":{},"text":{"2":{},"28":{}},"component":{}}],["distanc",{"_index":537,"title":{},"name":{},"text":{"4":{}},"component":{}}],["distinct",{"_index":1355,"title":{},"name":{},"text":{"10":{}},"component":{}}],["distinguish",{"_index":752,"title":{},"name":{},"text":{"6":{},"19":{},"20":{}},"component":{}}],["distribut",{"_index":1830,"title":{},"name":{},"text":{"22":{},"23":{},"27":{}},"component":{}}],["div",{"_index":910,"title":{"9-121":{}},"name":{},"text":{"9":{}},"component":{}}],["div(2",{"_index":1622,"title":{},"name":{},"text":{"16":{}},"component":{}}],["diverg",{"_index":1655,"title":{},"name":{},"text":{"16":{}},"component":{}}],["divid",{"_index":457,"title":{},"name":{},"text":{"4":{},"9":{}},"component":{}}],["divis",{"_index":911,"title":{"9-124":{}},"name":{},"text":{"9":{}},"component":{}}],["do",{"_index":540,"title":{},"name":{},"text":{"4":{},"30":{}},"component":{}}],["doc",{"_index":213,"title":{},"name":{},"text":{"2":{},"20":{}},"component":{}}],["docs:data",{"_index":1004,"title":{},"name":{},"text":{"9":{}},"component":{}}],["docs:entities#cross",{"_index":1317,"title":{},"name":{},"text":{"9":{}},"component":{}}],["document",{"_index":410,"title":{},"name":{},"text":{"4":{},"27":{}},"component":{}}],["doe",{"_index":1459,"title":{},"name":{},"text":{"12":{}},"component":{}}],["doesn’t",{"_index":498,"title":{},"name":{},"text":{"4":{},"12":{},"17":{},"27":{}},"component":{}}],["dog",{"_index":1642,"title":{},"name":{},"text":{"16":{}},"component":{}}],["done",{"_index":1692,"title":{},"name":{},"text":{"18":{},"19":{},"30":{}},"component":{}}],["don’t",{"_index":738,"title":{},"name":{},"text":{"6":{},"11":{},"19":{},"20":{},"21":{},"27":{}},"component":{}}],["dot",{"_index":1603,"title":{},"name":{},"text":{"16":{}},"component":{}}],["doubl",{"_index":1391,"title":{},"name":{},"text":{"11":{}},"component":{}}],["down",{"_index":482,"title":{},"name":{},"text":{"4":{},"5":{},"9":{}},"component":{}}],["download",{"_index":30,"title":{},"name":{},"text":{"1":{},"19":{},"20":{}},"component":{}}],["downsid",{"_index":1958,"title":{},"name":{},"text":{"27":{}},"component":{}}],["dr",{"_index":165,"title":{},"name":{},"text":{"1":{},"19":{}},"component":{}}],["drag",{"_index":2193,"title":{},"name":{},"text":{"30":{}},"component":{}}],["draw",{"_index":2159,"title":{},"name":{},"text":{"30":{}},"component":{}}],["drawback",{"_index":1673,"title":{},"name":{},"text":{"17":{}},"component":{}}],["dri",{"_index":543,"title":{},"name":{},"text":{"4":{}},"component":{}}],["duckdb'",{"_index":1932,"title":{},"name":{},"text":{"27":{}},"component":{}}],["due",{"_index":2058,"title":{},"name":{},"text":{"28":{}},"component":{}}],["durat",{"_index":972,"title":{},"name":{},"text":{"9":{},"11":{},"30":{}},"component":{}}],["duration_",{"_index":1405,"title":{},"name":{},"text":{"11":{}},"component":{}}],["duration_m",{"_index":1406,"title":{},"name":{},"text":{"11":{}},"component":{}}],["duration_n",{"_index":1408,"title":{},"name":{},"text":{"11":{}},"component":{}}],["duration_u",{"_index":1407,"title":{},"name":{},"text":{"11":{}},"component":{}}],["dure",{"_index":1796,"title":{},"name":{},"text":{"20":{},"31":{}},"component":{}}],["e",{"_index":709,"title":{},"name":{},"text":{"5":{},"9":{}},"component":{}}],["e.g",{"_index":1509,"title":{},"name":{},"text":{"13":{}},"component":{}}],["e^pow",{"_index":980,"title":{},"name":{},"text":{"9":{}},"component":{}}],["ea",{"_index":1299,"title":{},"name":{},"text":{"9":{}},"component":{}}],["each",{"_index":110,"title":{},"name":{},"text":{"1":{},"2":{},"3":{},"4":{},"5":{},"6":{},"7":{},"8":{},"9":{},"10":{},"11":{},"12":{},"13":{},"14":{},"16":{},"17":{},"18":{},"19":{},"20":{},"27":{},"28":{},"30":{},"31":{}},"component":{}}],["earli",{"_index":1919,"title":{},"name":{},"text":{"27":{}},"component":{}}],["earlier",{"_index":1231,"title":{},"name":{},"text":{"9":{},"28":{}},"component":{}}],["earth",{"_index":1184,"title":{},"name":{},"text":{"9":{}},"component":{}}],["easi",{"_index":399,"title":{},"name":{},"text":{"4":{},"6":{},"13":{},"15":{},"16":{},"19":{},"20":{},"28":{},"29":{}},"component":{}}],["easier",{"_index":1651,"title":{},"name":{},"text":{"16":{},"19":{},"20":{},"21":{},"27":{},"28":{}},"component":{}}],["easili",{"_index":462,"title":{},"name":{},"text":{"4":{},"19":{},"28":{}},"component":{}}],["edg",{"_index":2007,"title":{},"name":{},"text":{"28":{}},"component":{}}],["effect",{"_index":1482,"title":{},"name":{},"text":{"12":{}},"component":{}}],["effici",{"_index":683,"title":{},"name":{},"text":{"5":{},"19":{},"27":{},"28":{}},"component":{}}],["eg",{"_index":1313,"title":{},"name":{},"text":{"9":{}},"component":{}}],["ekzs30ubhn0njtslkk",{"_index":1728,"title":{},"name":{},"text":{"19":{},"20":{},"29":{}},"component":{}}],["elimin",{"_index":449,"title":{},"name":{},"text":{"4":{}},"component":{}}],["else(0",{"_index":1504,"title":{},"name":{},"text":{"13":{}},"component":{}}],["else(42.0",{"_index":1146,"title":{},"name":{},"text":{"9":{}},"component":{}}],["else(default",{"_index":1132,"title":{},"name":{},"text":{"9":{}},"component":{}}],["else(input.b",{"_index":1137,"title":{},"name":{},"text":{"9":{}},"component":{}}],["emphas",{"_index":1628,"title":{},"name":{},"text":{"16":{},"27":{}},"component":{}}],["empti",{"_index":1242,"title":{},"name":{},"text":{"9":{}},"component":{}}],["enabl",{"_index":60,"title":{"20-3":{}},"name":{},"text":{"1":{},"2":{},"4":{},"20":{}},"component":{}}],["enclos",{"_index":1495,"title":{},"name":{},"text":{"12":{},"19":{}},"component":{}}],["encod",{"_index":301,"title":{},"name":{},"text":{"2":{},"19":{}},"component":{}}],["end",{"_index":855,"title":{},"name":{},"text":{"8":{},"9":{},"16":{},"20":{},"27":{},"28":{},"29":{}},"component":{}}],["end=6",{"_index":1627,"title":{},"name":{},"text":{"16":{}},"component":{}}],["endpoint",{"_index":34,"title":{},"name":{},"text":{"1":{},"2":{}},"component":{}}],["engin",{"_index":125,"title":{"31":{}},"name":{},"text":{"1":{},"12":{},"13":{},"15":{},"17":{},"19":{},"27":{},"28":{},"31":{}},"component":{}}],["engine.log",{"_index":200,"title":{},"name":{},"text":{"1":{},"19":{}},"component":{}}],["engine_stderr.txt",{"_index":2216,"title":{},"name":{},"text":{"31":{}},"component":{}}],["engine_stdout.txt",{"_index":2217,"title":{},"name":{},"text":{"31":{}},"component":{}}],["engine’",{"_index":1913,"title":{},"name":{},"text":{"27":{}},"component":{}}],["eniti",{"_index":1447,"title":{"12":{}},"name":{},"text":{},"component":{}}],["enough",{"_index":1984,"title":{},"name":{},"text":{"27":{}},"component":{}}],["ensur",{"_index":1243,"title":{},"name":{},"text":{"9":{},"14":{},"20":{},"27":{}},"component":{}}],["enter",{"_index":1792,"title":{},"name":{},"text":{"20":{}},"component":{}}],["entir",{"_index":675,"title":{},"name":{},"text":{"5":{},"9":{}},"component":{}}],["entiti",{"_index":111,"title":{"5-1":{},"5-2":{},"5-6":{},"5-7":{},"12-1":{},"12-2":{},"12-3":{},"12-4":{},"12-6":{},"12-7":{},"12-8":{},"13-2":{},"14-4":{},"14-5":{}},"name":{"12":{}},"text":{"1":{},"2":{},"3":{},"4":{},"5":{},"6":{},"7":{},"8":{},"9":{},"12":{},"13":{},"14":{},"19":{},"20":{},"29":{},"30":{}},"component":{}}],["entity(customer_id",{"_index":1465,"title":{},"name":{},"text":{"12":{}},"component":{}}],["entity(id",{"_index":1534,"title":{},"name":{},"text":{"14":{}},"component":{}}],["entity(product_id",{"_index":1481,"title":{},"name":{},"text":{"12":{}},"component":{}}],["entity_filt",{"_index":698,"title":{},"name":{},"text":{"5":{}},"component":{}}],["entity_id",{"_index":781,"title":{},"name":{},"text":{"6":{}},"component":{}}],["entity_key",{"_index":724,"title":{},"name":{},"text":{"5":{},"6":{}},"component":{}}],["entity_key_column_nam",{"_index":687,"title":{},"name":{},"text":{"5":{},"6":{},"19":{},"20":{},"29":{}},"component":{}}],["entityfilt",{"_index":723,"title":{},"name":{},"text":{"5":{}},"component":{}}],["entityfilter(entity_key",{"_index":727,"title":{},"name":{},"text":{"5":{}},"component":{}}],["entitykeycolumnnam",{"_index":777,"title":{},"name":{},"text":{"6":{},"19":{}},"component":{}}],["entitypercentfilt",{"_index":695,"title":{},"name":{},"text":{"5":{}},"component":{}}],["entitypercentfilter(filter_percentag",{"_index":699,"title":{},"name":{},"text":{"5":{}},"component":{}}],["entity’",{"_index":676,"title":{},"name":{},"text":{"5":{},"13":{}},"component":{}}],["environ",{"_index":270,"title":{},"name":{},"text":{"2":{}},"component":{}}],["eo",{"_index":1733,"title":{},"name":{},"text":{"19":{}},"component":{}}],["epoch",{"_index":1402,"title":{},"name":{},"text":{"11":{}},"component":{}}],["epxress",{"_index":324,"title":{},"name":{},"text":{"3":{}},"component":{}}],["eq",{"_index":912,"title":{"9-139":{}},"name":{},"text":{"9":{},"13":{}},"component":{}}],["equal",{"_index":913,"title":{"9-142":{},"9-184":{},"9-294":{},"9-384":{}},"name":{},"text":{"9":{},"11":{},"16":{}},"component":{}}],["equival",{"_index":1209,"title":{},"name":{},"text":{"9":{},"14":{},"16":{}},"component":{}}],["error",{"_index":760,"title":{},"name":{},"text":{"6":{},"17":{},"31":{}},"component":{}}],["escap",{"_index":1393,"title":{},"name":{},"text":{"11":{}},"component":{}}],["especi",{"_index":1361,"title":{},"name":{},"text":{"10":{}},"component":{}}],["etc",{"_index":1230,"title":{},"name":{},"text":{"9":{},"12":{},"28":{},"31":{}},"component":{}}],["etl",{"_index":1975,"title":{},"name":{},"text":{"27":{}},"component":{}}],["evalu",{"_index":38,"title":{},"name":{},"text":{"1":{},"9":{},"16":{}},"component":{}}],["even",{"_index":495,"title":{},"name":{},"text":{"4":{},"9":{}},"component":{}}],["event",{"_index":237,"title":{"4-5":{},"9-475":{},"17-1":{},"27-5":{},"27-6":{}},"name":{},"text":{"2":{},"4":{},"5":{},"6":{},"8":{},"9":{},"10":{},"13":{},"14":{},"17":{},"19":{},"20":{},"21":{},"27":{},"28":{},"29":{},"30":{}},"component":{}}],["event.dur",{"_index":1502,"title":{},"name":{},"text":{"13":{}},"component":{}}],["event_at",{"_index":776,"title":{},"name":{},"text":{"6":{}},"component":{}}],["event’",{"_index":2185,"title":{},"name":{},"text":{"30":{}},"component":{}}],["everyth",{"_index":1786,"title":{},"name":{},"text":{"20":{}},"component":{}}],["exampl",{"_index":133,"title":{"29":{},"8-5":{},"9-19":{},"9-26":{},"9-33":{},"9-40":{},"9-44":{},"9-51":{},"9-58":{},"9-65":{},"9-71":{},"9-75":{},"9-82":{},"9-89":{},"9-96":{},"9-103":{},"9-110":{},"9-117":{},"9-124":{},"9-131":{},"9-135":{},"9-142":{},"9-149":{},"9-156":{},"9-163":{},"9-170":{},"9-177":{},"9-184":{},"9-191":{},"9-195":{},"9-201":{},"9-205":{},"9-212":{},"9-219":{},"9-226":{},"9-233":{},"9-237":{},"9-244":{},"9-251":{},"9-258":{},"9-265":{},"9-272":{},"9-280":{},"9-287":{},"9-294":{},"9-301":{},"9-308":{},"9-315":{},"9-321":{},"9-325":{},"9-332":{},"9-339":{},"9-345":{},"9-349":{},"9-356":{},"9-363":{},"9-370":{},"9-377":{},"9-384":{},"9-391":{},"9-398":{},"9-404":{},"9-411":{},"9-418":{},"9-425":{},"9-432":{},"9-439":{},"9-446":{},"9-453":{},"9-460":{},"9-464":{},"9-471":{},"9-475":{},"9-482":{},"9-489":{},"9-496":{},"9-503":{},"9-507":{},"9-514":{},"9-521":{},"9-525":{},"9-532":{},"9-539":{},"9-546":{},"9-553":{},"9-560":{},"9-566":{},"9-570":{},"9-577":{},"9-584":{},"27-5":{},"30-6":{},"30-7":{}},"name":{},"text":{"1":{},"2":{},"3":{},"4":{},"5":{},"6":{},"7":{},"8":{},"9":{},"10":{},"11":{},"12":{},"13":{},"14":{},"16":{},"17":{},"18":{},"19":{},"20":{},"21":{},"27":{},"28":{},"29":{},"30":{},"31":{}},"component":{}}],["example.purchase_count",{"_index":2197,"title":{},"name":{},"text":{"30":{}},"component":{}}],["examples.queri",{"_index":2110,"title":{},"name":{},"text":{"29":{}},"component":{}}],["excel",{"_index":1931,"title":{},"name":{},"text":{"27":{}},"component":{}}],["except",{"_index":314,"title":{},"name":{},"text":{"3":{}},"component":{}}],["exclus",{"_index":1288,"title":{},"name":{},"text":{"9":{}},"component":{}}],["execut",{"_index":121,"title":{},"name":{},"text":{"1":{},"4":{},"19":{},"20":{},"21":{},"27":{},"29":{}},"component":{}}],["exempt",{"_index":1014,"title":{},"name":{},"text":{"9":{}},"component":{}}],["exercis",{"_index":1542,"title":{},"name":{},"text":{"14":{}},"component":{}}],["exist",{"_index":1167,"title":{},"name":{},"text":{"9":{},"10":{},"12":{},"27":{}},"component":{}}],["exp",{"_index":914,"title":{"9-146":{}},"name":{},"text":{"9":{}},"component":{}}],["exp(input.a",{"_index":1161,"title":{},"name":{},"text":{"9":{}},"component":{}}],["expect",{"_index":222,"title":{},"name":{},"text":{"2":{},"6":{},"9":{},"19":{},"20":{}},"component":{}}],["expens",{"_index":1947,"title":{},"name":{},"text":{"27":{}},"component":{}}],["experiment",{"_index":1222,"title":{},"name":{},"text":{"9":{}},"component":{}}],["explain",{"_index":405,"title":{},"name":{},"text":{"4":{}},"component":{}}],["explicit",{"_index":1629,"title":{},"name":{},"text":{"16":{}},"component":{}}],["explicitli",{"_index":787,"title":{},"name":{},"text":{"6":{},"7":{},"11":{},"27":{},"30":{}},"component":{}}],["explor",{"_index":1824,"title":{},"name":{},"text":{"21":{},"29":{},"30":{}},"component":{}}],["exponenti",{"_index":915,"title":{"9-149":{}},"name":{},"text":{"9":{}},"component":{}}],["export",{"_index":732,"title":{"6-10":{},"7-10":{}},"name":{"29":{}},"text":{"6":{},"7":{},"19":{},"24":{},"26":{}},"component":{}}],["expos",{"_index":2100,"title":{},"name":{},"text":{"29":{}},"component":{}}],["express",{"_index":326,"title":{"4-8":{},"10-1":{},"10-2":{},"10-3":{},"13-2":{}},"name":{},"text":{"3":{},"4":{},"5":{},"6":{},"7":{},"9":{},"10":{},"11":{},"12":{},"13":{},"14":{},"15":{},"16":{},"17":{},"20":{},"21":{},"27":{},"29":{}},"component":{}}],["expression'",{"_index":328,"title":{},"name":{},"text":{"3":{}},"component":{}}],["expression’",{"_index":1479,"title":{},"name":{},"text":{"12":{},"15":{},"16":{},"19":{}},"component":{}}],["extend",{"_index":557,"title":{"9-153":{},"18-2":{}},"name":{},"text":{"4":{},"9":{},"18":{},"20":{},"28":{}},"component":{}}],["extend($input",{"_index":1323,"title":{},"name":{},"text":{"9":{}},"component":{}}],["extend(exampl",{"_index":2198,"title":{},"name":{},"text":{"30":{}},"component":{}}],["extend(input",{"_index":1168,"title":{},"name":{},"text":{"9":{}},"component":{}}],["extend(lookup($input.ent",{"_index":2109,"title":{},"name":{},"text":{"29":{}},"component":{}}],["extend(new",{"_index":1166,"title":{},"name":{},"text":{"9":{}},"component":{}}],["extend(new_record",{"_index":1693,"title":{},"name":{},"text":{"18":{}},"component":{}}],["extend({ag",{"_index":1694,"title":{},"name":{},"text":{"18":{}},"component":{}}],["extend({tim",{"_index":1050,"title":{},"name":{},"text":{"9":{}},"component":{}}],["extens",{"_index":43,"title":{"5-4":{},"9-156":{}},"name":{},"text":{"1":{},"7":{},"27":{},"29":{}},"component":{}}],["extern",{"_index":309,"title":{},"name":{},"text":{"3":{},"20":{},"27":{},"28":{}},"component":{}}],["extract",{"_index":1289,"title":{},"name":{},"text":{"9":{}},"component":{}}],["extrapol",{"_index":1239,"title":{},"name":{},"text":{"9":{}},"component":{}}],["f",{"_index":710,"title":{},"name":{},"text":{"5":{},"19":{},"29":{},"31":{}},"component":{}}],["f1,2",{"_index":1719,"title":{},"name":{},"text":{"19":{}},"component":{}}],["f16",{"_index":1427,"title":{},"name":{},"text":{"11":{}},"component":{}}],["f2,3",{"_index":1715,"title":{},"name":{},"text":{"19":{}},"component":{}}],["f32",{"_index":1385,"title":{},"name":{},"text":{"11":{}},"component":{}}],["f64",{"_index":1159,"title":{},"name":{},"text":{"9":{},"11":{}},"component":{}}],["facilit",{"_index":2033,"title":{},"name":{},"text":{"28":{}},"component":{}}],["fact",{"_index":1516,"title":{},"name":{},"text":{"13":{},"17":{},"27":{},"28":{}},"component":{}}],["factor",{"_index":1654,"title":{},"name":{},"text":{"16":{}},"component":{}}],["fail",{"_index":758,"title":{},"name":{},"text":{"6":{}},"component":{}}],["failur",{"_index":1649,"title":{},"name":{},"text":{"16":{}},"component":{}}],["fals",{"_index":989,"title":{},"name":{},"text":{"9":{},"11":{},"14":{},"16":{},"30":{}},"component":{}}],["familiar",{"_index":1653,"title":{},"name":{},"text":{"16":{},"27":{}},"component":{}}],["faq",{"_index":411,"title":{"13":{}},"name":{"13":{},"27":{}},"text":{"4":{}},"component":{}}],["far",{"_index":1350,"title":{},"name":{},"text":{"10":{},"14":{},"30":{}},"component":{}}],["fashion",{"_index":692,"title":{},"name":{},"text":{"5":{}},"component":{}}],["faster",{"_index":672,"title":{},"name":{},"text":{"5":{},"20":{}},"component":{}}],["favor",{"_index":1928,"title":{},"name":{},"text":{"27":{}},"component":{}}],["fe6bed41fa29cea6ca85fe20bea6ef4a",{"_index":1808,"title":{},"name":{},"text":{"20":{}},"component":{}}],["fe6bed41fa29cea6ca85fe20bea6ef4b",{"_index":1812,"title":{},"name":{},"text":{"20":{}},"component":{}}],["featur",{"_index":159,"title":{"14-3":{},"14-6":{},"14-7":{},"29-2":{},"30-4":{}},"name":{},"text":{"1":{},"3":{},"4":{},"7":{},"12":{},"14":{},"15":{},"16":{},"17":{},"19":{},"20":{},"22":{},"25":{},"28":{},"29":{},"30":{}},"component":{}}],["feature_vector",{"_index":1844,"title":{},"name":{},"text":{"24":{},"26":{}},"component":{}}],["feature_vector_parquet_format",{"_index":1849,"title":{},"name":{},"text":{"26":{}},"component":{}}],["feature_vector_stag",{"_index":1851,"title":{},"name":{},"text":{"26":{}},"component":{}}],["featurevector",{"_index":1587,"title":{},"name":{},"text":{"14":{}},"component":{}}],["feature’",{"_index":2160,"title":{},"name":{},"text":{"30":{}},"component":{}}],["feed",{"_index":1878,"title":{},"name":{},"text":{"27":{}},"component":{}}],["feel",{"_index":1359,"title":{},"name":{},"text":{"10":{}},"component":{}}],["fenl",{"_index":54,"title":{"9":{},"13":{},"14":{},"15":{},"15-1":{},"15-2":{},"17-2":{}},"name":{"13":{},"14":{}},"text":{"1":{},"3":{},"4":{},"5":{},"7":{},"8":{},"10":{},"11":{},"12":{},"13":{},"14":{},"15":{},"16":{},"17":{},"19":{},"20":{},"24":{},"26":{},"29":{}},"component":{}}],["fenlmag",{"_index":64,"title":{"4-15":{},"4-16":{}},"name":{},"text":{"1":{},"4":{},"20":{},"29":{}},"component":{}}],["fenl’",{"_index":1375,"title":{},"name":{},"text":{"11":{},"16":{}},"component":{}}],["few",{"_index":1644,"title":{},"name":{},"text":{"16":{},"27":{},"31":{}},"component":{}}],["fewer",{"_index":1500,"title":{},"name":{},"text":{"13":{}},"component":{}}],["ff16bd01",{"_index":2220,"title":{},"name":{},"text":{"31":{}},"component":{}}],["field",{"_index":749,"title":{"9-226":{},"9-411":{},"9-439":{},"18-3":{},"18-4":{}},"name":{},"text":{"6":{},"7":{},"9":{},"10":{},"11":{},"14":{},"18":{},"19":{},"20":{},"30":{}},"component":{}}],["figur",{"_index":1793,"title":{},"name":{},"text":{"20":{},"28":{},"30":{}},"component":{}}],["file",{"_index":162,"title":{"2-1":{},"2-2":{},"2-3":{},"2-4":{},"6-7":{},"6-9":{},"6-10":{},"6-11":{},"7-7":{},"7-9":{},"7-10":{},"7-11":{}},"name":{},"text":{"1":{},"2":{},"4":{},"6":{},"7":{},"17":{},"19":{},"20":{},"24":{},"26":{},"28":{},"31":{}},"component":{}}],["file://${pwd}/purchase.parquet",{"_index":1729,"title":{},"name":{},"text":{"19":{}},"component":{}}],["file:///path/to/file.csv",{"_index":253,"title":{},"name":{},"text":{"2":{}},"component":{}}],["file:///path/to/file.parquet",{"_index":246,"title":{},"name":{},"text":{"2":{}},"component":{}}],["file://path/to/purchases.csv",{"_index":302,"title":{},"name":{},"text":{"2":{}},"component":{}}],["file_format",{"_index":1852,"title":{},"name":{},"text":{"26":{}},"component":{}}],["file_typ",{"_index":335,"title":{},"name":{},"text":{"3":{}},"component":{}}],["files'",{"_index":1811,"title":{},"name":{},"text":{"20":{}},"component":{}}],["file’",{"_index":238,"title":{},"name":{},"text":{"2":{},"19":{}},"component":{}}],["filter",{"_index":364,"title":{"4-2":{},"5-1":{},"5-2":{},"5-6":{},"5-7":{},"9-75":{},"9-205":{},"9-325":{},"9-349":{},"9-411":{},"9-570":{},"10-4":{}},"name":{},"text":{"3":{},"4":{},"5":{},"6":{},"7":{},"9":{},"10":{},"13":{},"19":{},"20":{},"27":{},"28":{}},"component":{}}],["filter_percentag",{"_index":696,"title":{},"name":{},"text":{"5":{}},"component":{}}],["final",{"_index":104,"title":{"17-4":{}},"name":{},"text":{"1":{},"3":{},"4":{},"17":{},"19":{},"20":{},"28":{},"29":{},"30":{}},"component":{}}],["find",{"_index":1863,"title":{},"name":{},"text":{"27":{},"28":{},"31":{}},"component":{}}],["finit",{"_index":877,"title":{},"name":{},"text":{"8":{},"10":{},"14":{}},"component":{}}],["fire",{"_index":1787,"title":{},"name":{},"text":{"20":{}},"component":{}}],["first",{"_index":61,"title":{"9-160":{},"9-163":{},"14-3":{}},"name":{},"text":{"1":{},"2":{},"4":{},"6":{},"7":{},"8":{},"9":{},"11":{},"12":{},"13":{},"19":{},"20":{},"22":{},"25":{},"28":{},"30":{}},"component":{}}],["first(input.key",{"_index":1052,"title":{},"name":{},"text":{"9":{}},"component":{}}],["first(input.valu",{"_index":1175,"title":{},"name":{},"text":{"9":{}},"component":{}}],["first_favorit",{"_index":1640,"title":{},"name":{},"text":{"16":{}},"component":{}}],["five",{"_index":1169,"title":{},"name":{},"text":{"9":{}},"component":{}}],["fix",{"_index":898,"title":{"9-26":{}},"name":{},"text":{"28":{}},"component":{}}],["flag",{"_index":185,"title":{},"name":{},"text":{"1":{},"6":{},"19":{},"20":{},"29":{}},"component":{}}],["flat",{"_index":1018,"title":{},"name":{},"text":{"9":{},"16":{}},"component":{}}],["float",{"_index":1387,"title":{},"name":{},"text":{"11":{}},"component":{}}],["float32",{"_index":1176,"title":{},"name":{},"text":{"9":{}},"component":{}}],["float64",{"_index":1177,"title":{},"name":{},"text":{"9":{}},"component":{}}],["floor",{"_index":916,"title":{"9-167":{},"9-170":{}},"name":{},"text":{"9":{}},"component":{}}],["focu",{"_index":1589,"title":{},"name":{},"text":{"15":{},"27":{},"28":{},"30":{}},"component":{}}],["focus",{"_index":1590,"title":{},"name":{},"text":{"15":{},"16":{},"21":{}},"component":{}}],["folder",{"_index":2207,"title":{},"name":{},"text":{"31":{}},"component":{}}],["follow",{"_index":163,"title":{},"name":{},"text":{"1":{},"2":{},"4":{},"6":{},"9":{},"10":{},"11":{},"13":{},"16":{},"17":{},"19":{},"20":{},"28":{},"31":{}},"component":{}}],["food",{"_index":485,"title":{},"name":{},"text":{"4":{}},"component":{}}],["forc",{"_index":763,"title":{},"name":{},"text":{"6":{},"27":{},"28":{}},"component":{}}],["forcefulli",{"_index":764,"title":{},"name":{},"text":{"6":{}},"component":{}}],["foreign",{"_index":987,"title":{},"name":{},"text":{"9":{},"12":{},"13":{},"14":{}},"component":{}}],["form",{"_index":1601,"title":{},"name":{},"text":{"16":{},"27":{}},"component":{}}],["format",{"_index":95,"title":{"2-1":{},"6-9":{},"7-9":{}},"name":{},"text":{"1":{},"2":{},"6":{},"9":{},"19":{},"20":{},"24":{},"26":{},"27":{},"28":{}},"component":{}}],["forward",{"_index":518,"title":{"14-6":{}},"name":{},"text":{"4":{},"9":{},"14":{},"15":{},"19":{},"30":{}},"component":{}}],["found",{"_index":803,"title":{},"name":{},"text":{"6":{},"19":{},"27":{}},"component":{}}],["foundat",{"_index":1910,"title":{},"name":{},"text":{"27":{}},"component":{}}],["four",{"_index":1683,"title":{},"name":{},"text":{"17":{},"30":{}},"component":{}}],["fraction",{"_index":1103,"title":{},"name":{},"text":{"9":{}},"component":{}}],["framework",{"_index":1999,"title":{"30-3":{}},"name":{},"text":{"28":{},"30":{}},"component":{}}],["fraud",{"_index":1526,"title":{},"name":{},"text":{"14":{},"17":{},"29":{}},"component":{}}],["fraudreport",{"_index":1528,"title":{},"name":{},"text":{"14":{},"17":{},"29":{}},"component":{}}],["fraudreport.purchase_id",{"_index":1544,"title":{},"name":{},"text":{"14":{}},"component":{}}],["frauds.parquet",{"_index":2097,"title":{},"name":{},"text":{"29":{}},"component":{}}],["frauds_url",{"_index":2092,"title":{},"name":{},"text":{"29":{}},"component":{}}],["fraudul",{"_index":1538,"title":{},"name":{},"text":{"14":{}},"component":{}}],["free",{"_index":1750,"title":{},"name":{},"text":{"19":{}},"component":{}}],["frequent",{"_index":1858,"title":{"27":{}},"name":{},"text":{},"component":{}}],["frustrat",{"_index":2158,"title":{},"name":{},"text":{"30":{}},"component":{}}],["full",{"_index":217,"title":{},"name":{},"text":{"2":{},"4":{},"15":{},"19":{},"27":{},"29":{}},"component":{}}],["fulli",{"_index":1951,"title":{},"name":{},"text":{"27":{}},"component":{}}],["fullpathtofil",{"_index":289,"title":{},"name":{},"text":{"2":{}},"component":{}}],["function",{"_index":288,"title":{"9":{},"9-1":{},"9-2":{},"9-4":{},"9-5":{},"9-6":{},"9-7":{},"9-8":{},"9-9":{},"9-10":{},"9-11":{},"9-12":{},"9-13":{},"9-14":{},"9-15":{},"11-7":{},"16-4":{}},"name":{},"text":{"2":{},"4":{},"6":{},"9":{},"11":{},"12":{},"13":{},"14":{},"16":{},"19":{},"20":{},"29":{},"30":{}},"component":{}}],["function’",{"_index":1497,"title":{},"name":{},"text":{"13":{}},"component":{}}],["fundament",{"_index":1864,"title":{},"name":{},"text":{"27":{}},"component":{}}],["further",{"_index":2051,"title":{},"name":{},"text":{"28":{}},"component":{}}],["futur",{"_index":1224,"title":{},"name":{},"text":{"9":{},"14":{},"15":{},"19":{}},"component":{}}],["game",{"_index":2148,"title":{},"name":{},"text":{"30":{}},"component":{}}],["gamedefeat",{"_index":2164,"title":{},"name":{},"text":{"30":{}},"component":{}}],["gameplay",{"_index":774,"title":{},"name":{},"text":{"6":{}},"component":{}}],["gamevictori",{"_index":2163,"title":{},"name":{},"text":{"30":{}},"component":{}}],["garbag",{"_index":2072,"title":{},"name":{},"text":{"28":{}},"component":{}}],["gb",{"_index":1938,"title":{},"name":{},"text":{"27":{}},"component":{}}],["gener",{"_index":176,"title":{"4-7":{}},"name":{},"text":{"1":{},"4":{},"5":{},"6":{},"8":{},"10":{},"11":{},"12":{},"13":{},"14":{},"16":{},"20":{},"27":{},"30":{},"31":{}},"component":{}}],["geometr",{"_index":1881,"title":{},"name":{},"text":{"27":{}},"component":{}}],["get",{"_index":1823,"title":{"21":{}},"name":{},"text":{"28":{}},"component":{}}],["github",{"_index":131,"title":{},"name":{},"text":{"1":{},"19":{},"20":{},"27":{}},"component":{}}],["give",{"_index":572,"title":{},"name":{},"text":{"4":{},"13":{},"28":{},"30":{}},"component":{}}],["given",{"_index":88,"title":{},"name":{},"text":{"1":{},"2":{},"4":{},"5":{},"6":{},"7":{},"9":{},"10":{},"11":{},"12":{},"14":{},"16":{},"17":{},"20":{},"29":{}},"component":{}}],["global",{"_index":534,"title":{},"name":{},"text":{"4":{}},"component":{}}],["go",{"_index":874,"title":{"14-7":{}},"name":{},"text":{"8":{},"19":{},"20":{}},"component":{}}],["goal",{"_index":1529,"title":{},"name":{},"text":{"14":{},"27":{},"29":{}},"component":{}}],["good",{"_index":796,"title":{},"name":{},"text":{"6":{},"7":{},"19":{},"27":{}},"component":{}}],["gpu’",{"_index":1900,"title":{},"name":{},"text":{"27":{}},"component":{}}],["granular",{"_index":679,"title":{},"name":{},"text":{"5":{},"27":{}},"component":{}}],["graph",{"_index":1872,"title":{},"name":{},"text":{"27":{},"28":{}},"component":{}}],["greater",{"_index":430,"title":{"9-177":{},"9-184":{}},"name":{},"text":{"4":{},"9":{},"14":{}},"component":{}}],["greatli",{"_index":2205,"title":{},"name":{},"text":{"31":{}},"component":{}}],["greedi",{"_index":1364,"title":{},"name":{},"text":{"10":{}},"component":{}}],["gremlin",{"_index":1870,"title":{},"name":{},"text":{"27":{}},"component":{}}],["grep",{"_index":1708,"title":{},"name":{},"text":{"19":{}},"component":{}}],["group",{"_index":440,"title":{"9-6":{}},"name":{},"text":{"4":{},"6":{},"9":{},"19":{},"28":{},"30":{}},"component":{}}],["grouping_id",{"_index":744,"title":{},"name":{},"text":{"6":{}},"component":{}}],["groupingid",{"_index":780,"title":{},"name":{},"text":{"6":{}},"component":{}}],["gt",{"_index":917,"title":{"9-174":{}},"name":{},"text":{"9":{}},"component":{}}],["gt(0",{"_index":1623,"title":{},"name":{},"text":{"16":{}},"component":{}}],["gte",{"_index":918,"title":{"9-181":{}},"name":{},"text":{"9":{}},"component":{}}],["guarante",{"_index":235,"title":{},"name":{},"text":{"2":{}},"component":{}}],["guid",{"_index":404,"title":{},"name":{"15":{}},"text":{"4":{},"16":{},"19":{},"28":{},"29":{}},"component":{}}],["guidelin",{"_index":1501,"title":{},"name":{},"text":{"13":{}},"component":{}}],["h",{"_index":170,"title":{},"name":{},"text":{"1":{}},"component":{}}],["hand",{"_index":1119,"title":{},"name":{},"text":{"9":{},"14":{},"16":{}},"component":{}}],["happen",{"_index":499,"title":{},"name":{},"text":{"4":{},"6":{},"7":{},"14":{},"16":{},"20":{},"21":{},"27":{},"28":{},"30":{}},"component":{}}],["happend",{"_index":1981,"title":{},"name":{},"text":{"27":{}},"component":{}}],["hard",{"_index":1856,"title":{"27-2":{}},"name":{},"text":{"27":{},"28":{},"30":{}},"component":{}}],["harder",{"_index":2055,"title":{},"name":{},"text":{"28":{}},"component":{}}],["hardwar",{"_index":1921,"title":{},"name":{},"text":{"27":{}},"component":{}}],["hash",{"_index":919,"title":{"9-188":{},"9-191":{},"9-195":{}},"name":{},"text":{"9":{}},"component":{}}],["hash(input.valu",{"_index":1181,"title":{},"name":{},"text":{"9":{}},"component":{}}],["hashabl",{"_index":1444,"title":{},"name":{},"text":{"11":{}},"component":{}}],["have",{"_index":555,"title":{},"name":{},"text":{"4":{},"10":{},"16":{},"27":{},"28":{}},"component":{}}],["header",{"_index":247,"title":{},"name":{},"text":{"2":{}},"component":{}}],["hear",{"_index":1888,"title":{},"name":{},"text":{"27":{}},"component":{}}],["hello",{"_index":1182,"title":{"19":{},"20":{}},"name":{"19":{},"20":{}},"text":{"9":{},"11":{},"21":{},"28":{}},"component":{}}],["help",{"_index":181,"title":{"30-2":{}},"name":{},"text":{"1":{},"4":{},"6":{},"7":{},"14":{},"17":{},"19":{},"20":{},"21":{},"27":{},"31":{}},"component":{}}],["here",{"_index":366,"title":{},"name":{},"text":{"3":{},"4":{},"5":{},"6":{},"7":{},"9":{},"20":{},"28":{},"31":{}},"component":{}}],["heredoc",{"_index":1740,"title":{},"name":{},"text":{"19":{}},"component":{}}],["here’",{"_index":1817,"title":{},"name":{},"text":{"20":{}},"component":{}}],["hi",{"_index":1183,"title":{},"name":{},"text":{"9":{}},"component":{}}],["high",{"_index":1929,"title":{},"name":{},"text":{"27":{},"28":{}},"component":{}}],["histor",{"_index":563,"title":{},"name":{},"text":{"4":{},"17":{},"27":{},"28":{},"30":{}},"component":{}}],["histori",{"_index":564,"title":{},"name":{},"text":{"4":{},"15":{},"19":{}},"component":{}}],["home",{"_index":2206,"title":{},"name":{},"text":{"31":{}},"component":{}}],["home/.cli.yaml",{"_index":188,"title":{},"name":{},"text":{"1":{}},"component":{}}],["home/therapon/.cache/kaskada/log",{"_index":2210,"title":{},"name":{},"text":{"31":{}},"component":{}}],["host",{"_index":1839,"title":{},"name":{},"text":{"24":{},"26":{}},"component":{}}],["hot",{"_index":1641,"title":{},"name":{},"text":{"16":{}},"component":{}}],["hour",{"_index":545,"title":{},"name":{},"text":{"4":{},"9":{},"20":{},"28":{},"30":{}},"component":{}}],["hourli",{"_index":547,"title":{"9-199":{},"9-201":{},"9-205":{},"9-460":{}},"name":{},"text":{"4":{},"9":{},"20":{}},"component":{}}],["hourly_big_purchas",{"_index":549,"title":{},"name":{},"text":{"4":{},"20":{}},"component":{}}],["hourly_sum",{"_index":1194,"title":{},"name":{},"text":{"9":{}},"component":{}}],["http",{"_index":286,"title":{},"name":{},"text":{"2":{}},"component":{}}],["https://api.github.com/repos/kaskada",{"_index":1706,"title":{},"name":{},"text":{"19":{}},"component":{}}],["https://docs.aws.amazon.com/amazonecs/latest/developerguide/task",{"_index":282,"title":{},"name":{},"text":{"2":{}},"component":{}}],["https://drive.google.com/uc?export=download&id=1sldiw9uc0rghi",{"_index":1727,"title":{},"name":{},"text":{"19":{},"20":{},"29":{}},"component":{}}],["https://drive.google.com/uc?export=download&id=1wxrw1zt1eepcbrw4nw9rcdhtqlatxtsr",{"_index":2093,"title":{},"name":{},"text":{"29":{}},"component":{}}],["https://github.com/kaskada",{"_index":145,"title":{},"name":{},"text":{"1":{}},"component":{}}],["human",{"_index":1737,"title":{},"name":{},"text":{"19":{}},"component":{}}],["hybrid",{"_index":1945,"title":{},"name":{},"text":{"27":{}},"component":{}}],["i.",{"_index":19,"title":{},"name":{},"text":{"1":{},"20":{},"28":{}},"component":{}}],["i/o",{"_index":2080,"title":{},"name":{},"text":{"28":{}},"component":{}}],["i16",{"_index":1425,"title":{},"name":{},"text":{"11":{}},"component":{}}],["i32",{"_index":1106,"title":{},"name":{},"text":{"9":{},"11":{}},"component":{}}],["i32::max",{"_index":1094,"title":{},"name":{},"text":{"9":{}},"component":{}}],["i64",{"_index":1383,"title":{},"name":{},"text":{"11":{},"14":{}},"component":{}}],["i8",{"_index":1382,"title":{},"name":{},"text":{"11":{}},"component":{}}],["iam",{"_index":279,"title":{},"name":{},"text":{"2":{}},"component":{}}],["id",{"_index":192,"title":{},"name":{},"text":{"1":{},"2":{},"4":{},"6":{},"9":{},"14":{},"20":{},"29":{}},"component":{}}],["idea",{"_index":797,"title":{},"name":{},"text":{"6":{},"7":{},"27":{},"28":{}},"component":{}}],["identifi",{"_index":260,"title":{},"name":{},"text":{"2":{},"5":{},"6":{},"9":{},"12":{},"13":{},"14":{},"19":{},"20":{},"24":{},"26":{}},"component":{}}],["idiomat",{"_index":750,"title":{},"name":{},"text":{"6":{},"7":{},"19":{},"20":{}},"component":{}}],["ie",{"_index":1472,"title":{},"name":{},"text":{"12":{},"13":{}},"component":{}}],["if($input",{"_index":1503,"title":{},"name":{},"text":{"13":{}},"component":{}}],["if(condit",{"_index":1212,"title":{},"name":{},"text":{"9":{},"13":{}},"component":{}}],["if(fals",{"_index":1605,"title":{},"name":{},"text":{"16":{}},"component":{}}],["if(input.condit",{"_index":1214,"title":{},"name":{},"text":{"9":{}},"component":{}}],["if(input.tax_categori",{"_index":1017,"title":{},"name":{},"text":{"9":{}},"component":{}}],["if(tot",{"_index":1492,"title":{},"name":{},"text":{"12":{}},"component":{}}],["ii",{"_index":1523,"title":{"14-5":{}},"name":{},"text":{},"component":{}}],["illustr",{"_index":1351,"title":{},"name":{},"text":{"10":{}},"component":{}}],["imagin",{"_index":2011,"title":{},"name":{},"text":{"28":{},"30":{}},"component":{}}],["immut",{"_index":369,"title":{},"name":{},"text":{"3":{},"6":{},"7":{}},"component":{}}],["implement",{"_index":1134,"title":{},"name":{},"text":{"9":{},"14":{},"27":{},"28":{},"30":{}},"component":{}}],["impli",{"_index":103,"title":{},"name":{},"text":{"1":{}},"component":{}}],["implic",{"_index":1911,"title":{},"name":{},"text":{"27":{}},"component":{}}],["implicit",{"_index":1475,"title":{},"name":{},"text":{"12":{},"16":{}},"component":{}}],["implicitli",{"_index":1160,"title":{},"name":{},"text":{"9":{},"11":{}},"component":{}}],["import",{"_index":26,"title":{},"name":{},"text":{"1":{},"2":{},"3":{},"4":{},"5":{},"6":{},"7":{},"8":{},"20":{},"27":{},"29":{}},"component":{}}],["impos",{"_index":1443,"title":{},"name":{},"text":{"11":{}},"component":{}}],["improv",{"_index":1885,"title":{},"name":{},"text":{"27":{}},"component":{}}],["includ",{"_index":51,"title":{},"name":{},"text":{"1":{},"2":{},"4":{},"5":{},"6":{},"8":{},"9":{},"11":{},"16":{},"19":{},"20":{},"31":{}},"component":{}}],["inclus",{"_index":703,"title":{},"name":{},"text":{"5":{},"9":{}},"component":{}}],["incompat",{"_index":1998,"title":{},"name":{},"text":{"28":{}},"component":{}}],["inconsist",{"_index":2031,"title":{},"name":{},"text":{"28":{}},"component":{}}],["incorpor",{"_index":838,"title":{},"name":{},"text":{"8":{}},"component":{}}],["incorrectli",{"_index":765,"title":{},"name":{},"text":{"6":{}},"component":{}}],["increas",{"_index":1901,"title":{},"name":{},"text":{"27":{}},"component":{}}],["increasingli",{"_index":1926,"title":{},"name":{},"text":{"27":{}},"component":{}}],["increment",{"_index":1685,"title":{},"name":{},"text":{"17":{}},"component":{}}],["independ",{"_index":1825,"title":{},"name":{},"text":{"21":{}},"component":{}}],["index",{"_index":1287,"title":{},"name":{"21":{}},"text":{"9":{}},"component":{}}],["index.html",{"_index":2014,"title":{},"name":{},"text":{"28":{}},"component":{}}],["indic",{"_index":992,"title":{},"name":{},"text":{"9":{},"16":{},"19":{},"20":{}},"component":{}}],["individu",{"_index":680,"title":{},"name":{},"text":{"5":{},"13":{},"14":{},"16":{}},"component":{}}],["inf",{"_index":802,"title":{},"name":{},"text":{"6":{},"19":{}},"component":{}}],["infer",{"_index":219,"title":{},"name":{},"text":{"2":{},"3":{},"6":{},"19":{},"20":{}},"component":{}}],["info",{"_index":2225,"title":{},"name":{},"text":{"31":{}},"component":{}}],["inform",{"_index":94,"title":{},"name":{},"text":{"1":{},"2":{},"6":{},"12":{},"13":{},"14":{},"15":{},"16":{},"17":{},"19":{},"20":{},"27":{},"31":{}},"component":{}}],["ingest",{"_index":1450,"title":{},"name":{},"text":{"12":{}},"component":{}}],["initi",{"_index":70,"title":{},"name":{},"text":{"1":{},"6":{},"19":{},"27":{}},"component":{}}],["inner",{"_index":488,"title":{},"name":{},"text":{"4":{}},"component":{}}],["input",{"_index":299,"title":{"9-21":{},"9-28":{},"9-35":{},"9-42":{},"9-46":{},"9-53":{},"9-60":{},"9-67":{},"9-73":{},"9-77":{},"9-84":{},"9-91":{},"9-98":{},"9-105":{},"9-112":{},"9-119":{},"9-126":{},"9-133":{},"9-137":{},"9-144":{},"9-151":{},"9-158":{},"9-165":{},"9-172":{},"9-179":{},"9-186":{},"9-193":{},"9-197":{},"9-203":{},"9-207":{},"9-214":{},"9-221":{},"9-228":{},"9-235":{},"9-239":{},"9-246":{},"9-253":{},"9-260":{},"9-267":{},"9-282":{},"9-289":{},"9-296":{},"9-303":{},"9-310":{},"9-317":{},"9-323":{},"9-327":{},"9-334":{},"9-341":{},"9-347":{},"9-351":{},"9-358":{},"9-365":{},"9-372":{},"9-379":{},"9-386":{},"9-393":{},"9-400":{},"9-406":{},"9-413":{},"9-420":{},"9-427":{},"9-434":{},"9-441":{},"9-448":{},"9-455":{},"9-462":{},"9-466":{},"9-473":{},"9-477":{},"9-484":{},"9-491":{},"9-498":{},"9-505":{},"9-509":{},"9-516":{},"9-523":{},"9-527":{},"9-534":{},"9-541":{},"9-548":{},"9-555":{},"9-562":{},"9-568":{},"9-572":{},"9-579":{},"9-586":{}},"name":{},"text":{"2":{},"4":{},"5":{},"6":{},"8":{},"9":{},"10":{},"11":{},"14":{},"16":{},"19":{},"20":{},"28":{},"30":{}},"component":{}}],["input.a",{"_index":995,"title":{},"name":{},"text":{"9":{}},"component":{}}],["input.b",{"_index":1124,"title":{},"name":{},"text":{"9":{}},"component":{}}],["input.d",{"_index":1110,"title":{},"name":{},"text":{"9":{}},"component":{}}],["input.n",{"_index":1046,"title":{},"name":{},"text":{"9":{}},"component":{}}],["input.tim",{"_index":1095,"title":{},"name":{},"text":{"9":{}},"component":{}}],["input.valu",{"_index":1016,"title":{},"name":{},"text":{"9":{}},"component":{}}],["insid",{"_index":1494,"title":{},"name":{},"text":{"12":{},"20":{},"21":{},"31":{}},"component":{}}],["insight",{"_index":1996,"title":{},"name":{},"text":{"28":{},"30":{}},"component":{}}],["inspect",{"_index":788,"title":{},"name":{},"text":{"6":{},"7":{},"20":{}},"component":{}}],["instal",{"_index":8,"title":{"1":{},"19-1":{},"20-1":{},"20-2":{}},"name":{"1":{}},"text":{"1":{},"19":{},"20":{},"21":{},"28":{}},"component":{}}],["instanc",{"_index":197,"title":{},"name":{},"text":{"1":{},"2":{},"9":{},"11":{},"12":{},"17":{},"19":{},"27":{}},"component":{}}],["instant",{"_index":2145,"title":{},"name":{},"text":{"30":{}},"component":{}}],["instantan",{"_index":506,"title":{},"name":{},"text":{"4":{},"27":{}},"component":{}}],["instead",{"_index":15,"title":{},"name":{},"text":{"1":{},"4":{},"9":{},"20":{}},"component":{}}],["instruct",{"_index":1842,"title":{},"name":{},"text":{"24":{},"26":{}},"component":{}}],["integ",{"_index":229,"title":{"9-195":{},"9-525":{}},"name":{},"text":{"2":{},"9":{},"11":{},"13":{}},"component":{}}],["integr",{"_index":1358,"title":{"22":{},"23":{},"24":{},"25":{},"26":{}},"name":{},"text":{"10":{}},"component":{}}],["intend",{"_index":1678,"title":{},"name":{},"text":{"17":{},"29":{}},"component":{}}],["intention",{"_index":1734,"title":{},"name":{},"text":{"19":{}},"component":{}}],["inter",{"_index":2004,"title":{},"name":{},"text":{"28":{}},"component":{}}],["interact",{"_index":35,"title":{"10-3":{}},"name":{},"text":{"1":{},"4":{},"5":{},"27":{},"29":{}},"component":{}}],["interavl_month",{"_index":1410,"title":{},"name":{},"text":{"11":{}},"component":{}}],["interest",{"_index":344,"title":{},"name":{},"text":{"3":{},"7":{}},"component":{}}],["interfac",{"_index":1680,"title":{},"name":{},"text":{"17":{}},"component":{}}],["intermedi",{"_index":1354,"title":{},"name":{},"text":{"10":{}},"component":{}}],["intern",{"_index":2078,"title":{},"name":{},"text":{"28":{}},"component":{}}],["interpret",{"_index":45,"title":{},"name":{},"text":{"1":{},"9":{},"10":{}},"component":{}}],["interv",{"_index":884,"title":{},"name":{},"text":{"8":{},"9":{},"11":{},"27":{},"29":{}},"component":{}}],["interval_day",{"_index":1093,"title":{},"name":{},"text":{"9":{},"11":{}},"component":{}}],["interval_month",{"_index":1409,"title":{},"name":{},"text":{"11":{}},"component":{}}],["introduc",{"_index":1607,"title":{},"name":{},"text":{"16":{}},"component":{}}],["introduct",{"_index":2044,"title":{},"name":{},"text":{"28":{}},"component":{}}],["intuit",{"_index":1594,"title":{},"name":{},"text":{"15":{},"27":{}},"component":{}}],["invalid",{"_index":1617,"title":{},"name":{},"text":{"16":{}},"component":{}}],["involv",{"_index":1362,"title":{},"name":{},"text":{"10":{},"27":{}},"component":{}}],["ipykernel",{"_index":1762,"title":{},"name":{},"text":{"20":{}},"component":{}}],["ipython",{"_index":3,"title":{"1-2":{},"5-4":{}},"name":{},"text":{"1":{},"20":{}},"component":{}}],["ipython/jupyt",{"_index":821,"title":{},"name":{},"text":{"7":{}},"component":{}}],["ipywidget",{"_index":1764,"title":{},"name":{},"text":{"20":{}},"component":{}}],["is_valid",{"_index":920,"title":{"9-216":{}},"name":{},"text":{"9":{}},"component":{}}],["is_valid(input",{"_index":1277,"title":{},"name":{},"text":{"9":{}},"component":{}}],["is_valid(input.valu",{"_index":1220,"title":{},"name":{},"text":{"9":{}},"component":{}}],["is_valid(purchas",{"_index":858,"title":{},"name":{},"text":{"8":{}},"component":{}}],["isn’t",{"_index":1983,"title":{},"name":{},"text":{"27":{}},"component":{}}],["issu",{"_index":1315,"title":{},"name":{},"text":{"9":{},"31":{}},"component":{}}],["item",{"_index":1015,"title":{},"name":{},"text":{"9":{},"12":{},"14":{}},"component":{}}],["iter",{"_index":349,"title":{},"name":{},"text":{"3":{},"4":{},"7":{},"19":{},"20":{},"27":{}},"component":{}}],["it’",{"_index":481,"title":{},"name":{},"text":{"4":{},"6":{},"7":{},"12":{},"13":{},"19":{},"20":{},"27":{},"28":{}},"component":{}}],["januari",{"_index":1403,"title":{},"name":{},"text":{"11":{}},"component":{}}],["job",{"_index":1973,"title":{},"name":{},"text":{"27":{},"28":{}},"component":{}}],["john",{"_index":1389,"title":{},"name":{},"text":{"11":{},"12":{},"18":{}},"component":{}}],["join",{"_index":380,"title":{"4-4":{},"13-2":{},"14-5":{},"17-5":{}},"name":{},"text":{"4":{},"9":{},"12":{},"14":{},"17":{},"28":{}},"component":{}}],["jordan",{"_index":1153,"title":{},"name":{},"text":{"9":{},"27":{}},"component":{}}],["json",{"_index":99,"title":{"9-223":{},"9-226":{}},"name":{},"text":{"1":{},"9":{},"19":{}},"component":{}}],["json(input.json_string).a",{"_index":1227,"title":{},"name":{},"text":{"9":{}},"component":{}}],["json_str",{"_index":1228,"title":{},"name":{},"text":{"9":{}},"component":{}}],["jupyt",{"_index":4,"title":{"20":{},"1-2":{},"5-4":{}},"name":{"20":{}},"text":{"1":{},"20":{},"21":{},"28":{}},"component":{}}],["jupyter_cli",{"_index":1766,"title":{},"name":{},"text":{"20":{}},"component":{}}],["jupyter_cor",{"_index":1768,"title":{},"name":{},"text":{"20":{}},"component":{}}],["jupyter_serv",{"_index":1770,"title":{},"name":{},"text":{"20":{}},"component":{}}],["jupyterlab",{"_index":1772,"title":{},"name":{},"text":{"20":{}},"component":{}}],["karen",{"_index":595,"title":{},"name":{},"text":{"4":{},"14":{}},"component":{}}],["kaskada",{"_index":1,"title":{"1":{},"28":{},"1-1":{},"1-2":{},"1-3":{},"6-11":{},"7-11":{},"20-2":{},"20-3":{},"27-3":{},"28-5":{},"30-2":{}},"name":{"28":{}},"text":{"1":{},"2":{},"3":{},"4":{},"5":{},"6":{},"7":{},"12":{},"17":{},"19":{},"20":{},"21":{},"27":{},"28":{},"29":{},"30":{},"31":{}},"component":{"1":{},"2":{},"3":{},"4":{},"5":{},"6":{},"7":{},"8":{},"9":{},"10":{},"11":{},"12":{},"13":{},"14":{},"15":{},"16":{},"17":{},"18":{},"19":{},"20":{},"21":{},"22":{},"23":{},"24":{},"25":{},"26":{},"27":{},"28":{},"29":{},"30":{},"31":{}}}],["kaskada.api.sess",{"_index":25,"title":{},"name":{},"text":{"1":{},"2":{},"3":{},"5":{},"6":{},"7":{},"20":{}},"component":{}}],["kaskada.slice_filt",{"_index":694,"title":{},"name":{},"text":{"5":{}},"component":{}}],["kaskada’",{"_index":49,"title":{},"name":{},"text":{"1":{},"4":{},"6":{},"12":{},"13":{},"19":{},"20":{},"21":{},"27":{},"28":{}},"component":{}}],["kda.set_default_slice(entity_filt",{"_index":718,"title":{},"name":{},"text":{"5":{}},"component":{}}],["kept",{"_index":310,"title":{},"name":{},"text":{"3":{},"30":{}},"component":{}}],["key",{"_index":234,"title":{"5-1":{},"5-2":{},"5-6":{},"5-7":{},"9-553":{},"12-2":{},"14-4":{}},"name":{},"text":{"2":{},"4":{},"5":{},"6":{},"7":{},"9":{},"11":{},"12":{},"13":{},"14":{},"16":{},"19":{},"20":{},"23":{},"24":{},"26":{}},"component":{}}],["key2",{"_index":442,"title":{},"name":{},"text":{"4":{}},"component":{}}],["keyword",{"_index":1434,"title":{},"name":{},"text":{"11":{}},"component":{}}],["kind",{"_index":255,"title":{},"name":{},"text":{"2":{},"6":{},"11":{},"27":{},"28":{}},"component":{}}],["kind=*kaskadav1alpha.t",{"_index":804,"title":{},"name":{},"text":{"6":{},"19":{}},"component":{}}],["kk_001",{"_index":598,"title":{},"name":{},"text":{"4":{},"14":{}},"component":{}}],["kk_002",{"_index":603,"title":{},"name":{},"text":{"4":{},"14":{}},"component":{}}],["kk_003",{"_index":606,"title":{},"name":{},"text":{"4":{},"14":{}},"component":{}}],["kk_004",{"_index":617,"title":{},"name":{},"text":{"4":{},"14":{}},"component":{}}],["kk_005",{"_index":624,"title":{},"name":{},"text":{"4":{}},"component":{}}],["kk_006",{"_index":637,"title":{},"name":{},"text":{"4":{}},"component":{}}],["know",{"_index":785,"title":{},"name":{},"text":{"6":{},"7":{},"13":{},"17":{},"19":{},"27":{},"28":{}},"component":{}}],["known",{"_index":878,"title":{},"name":{},"text":{"8":{},"17":{}},"component":{}}],["krabby_patti",{"_index":1255,"title":{},"name":{},"text":{"9":{},"12":{}},"component":{}}],["krusty_krab",{"_index":600,"title":{},"name":{},"text":{"4":{},"14":{}},"component":{}}],["l",{"_index":144,"title":{},"name":{},"text":{"1":{},"19":{}},"component":{}}],["label",{"_index":1747,"title":{"30-7":{}},"name":{},"text":{"19":{},"30":{}},"component":{}}],["lack",{"_index":2059,"title":{},"name":{},"text":{"28":{}},"component":{}}],["lag",{"_index":921,"title":{"9-230":{},"9-233":{},"9-237":{}},"name":{},"text":{"9":{}},"component":{}}],["lag(1",{"_index":1232,"title":{},"name":{},"text":{"9":{}},"component":{}}],["languag",{"_index":55,"title":{"15":{},"27-1":{},"27-2":{}},"name":{"15":{}},"text":{"1":{},"4":{},"15":{},"16":{},"17":{},"19":{},"20":{},"21":{},"27":{},"28":{}},"component":{}}],["language’",{"_index":423,"title":{},"name":{},"text":{"4":{}},"component":{}}],["langug",{"_index":408,"title":{},"name":{},"text":{"4":{}},"component":{}}],["larg",{"_index":667,"title":{},"name":{},"text":{"5":{},"24":{},"26":{},"27":{}},"component":{}}],["larger",{"_index":704,"title":{},"name":{},"text":{"5":{},"19":{},"27":{},"28":{}},"component":{}}],["largest",{"_index":974,"title":{},"name":{},"text":{"9":{}},"component":{}}],["largest_spend_over_2_purchas",{"_index":483,"title":{},"name":{},"text":{"4":{}},"component":{}}],["last",{"_index":922,"title":{"9-241":{},"9-244":{}},"name":{},"text":{"9":{},"16":{},"17":{},"28":{},"29":{},"30":{},"31":{}},"component":{}}],["last(input.valu",{"_index":1241,"title":{},"name":{},"text":{"9":{}},"component":{}}],["last(pageview.region",{"_index":561,"title":{},"name":{},"text":{"4":{},"20":{}},"component":{}}],["last(purchase.amount",{"_index":567,"title":{},"name":{},"text":{"4":{},"5":{}},"component":{}}],["last_purchas",{"_index":2035,"title":{},"name":{},"text":{"28":{}},"component":{}}],["last_purchase.timestamp",{"_index":2041,"title":{},"name":{},"text":{"28":{}},"component":{}}],["last_purchase.user_id",{"_index":2039,"title":{},"name":{},"text":{"28":{}},"component":{}}],["last_visit_region",{"_index":560,"title":{},"name":{},"text":{"4":{},"20":{}},"component":{}}],["lastnam",{"_index":1696,"title":{},"name":{},"text":{"18":{}},"component":{}}],["latenc",{"_index":321,"title":{},"name":{},"text":{"3":{},"22":{},"27":{}},"component":{}}],["later",{"_index":1582,"title":{},"name":{},"text":{"14":{},"30":{}},"component":{}}],["latest",{"_index":565,"title":{},"name":{},"text":{"4":{},"5":{},"9":{},"19":{},"20":{}},"component":{}}],["lay",{"_index":2082,"title":{},"name":{},"text":{"29":{}},"component":{}}],["lead",{"_index":1369,"title":{},"name":{},"text":{"10":{},"11":{}},"component":{}}],["leak",{"_index":1592,"title":{},"name":{},"text":{"15":{},"19":{},"27":{}},"component":{}}],["leakag",{"_index":521,"title":{},"name":{},"text":{"4":{},"14":{}},"component":{}}],["learn",{"_index":401,"title":{"27-2":{}},"name":{},"text":{"4":{},"17":{},"19":{},"20":{}},"component":{}}],["left",{"_index":1118,"title":{},"name":{},"text":{"9":{},"14":{},"16":{},"19":{}},"component":{}}],["len",{"_index":923,"title":{"9-248":{}},"name":{},"text":{"9":{}},"component":{}}],["len(",{"_index":1292,"title":{},"name":{},"text":{"9":{}},"component":{}}],["length",{"_index":924,"title":{"9-251":{}},"name":{},"text":{"9":{}},"component":{}}],["less",{"_index":931,"title":{"9-287":{},"9-294":{}},"name":{},"text":{"9":{},"27":{},"28":{}},"component":{}}],["lesson",{"_index":416,"title":{},"name":{},"text":{"4":{}},"component":{}}],["let",{"_index":2081,"title":{},"name":{},"text":{"28":{}},"component":{}}],["letter",{"_index":1413,"title":{},"name":{},"text":{"11":{}},"component":{}}],["let’",{"_index":1524,"title":{},"name":{},"text":{"14":{},"19":{},"20":{},"27":{},"28":{},"30":{}},"component":{}}],["level",{"_index":2000,"title":{},"name":{},"text":{"28":{}},"component":{}}],["leverag",{"_index":2073,"title":{},"name":{},"text":{"28":{}},"component":{}}],["lh",{"_index":1618,"title":{},"name":{},"text":{"16":{}},"component":{}}],["librari",{"_index":50,"title":{},"name":{},"text":{"1":{},"27":{}},"component":{}}],["life",{"_index":2047,"title":{},"name":{},"text":{"28":{}},"component":{}}],["lightli",{"_index":1861,"title":{},"name":{},"text":{"27":{}},"component":{}}],["like",{"_index":2154,"title":{},"name":{},"text":{"30":{}},"component":{}}],["limit",{"_index":647,"title":{"20-11":{}},"name":{},"text":{"4":{},"8":{},"9":{},"13":{},"17":{},"19":{},"20":{},"27":{},"28":{},"29":{}},"component":{}}],["line",{"_index":6,"title":{"1-3":{}},"name":{},"text":{"1":{},"17":{},"19":{},"20":{},"21":{},"28":{},"31":{}},"component":{}}],["linear",{"_index":1831,"title":{},"name":{},"text":{"22":{},"29":{}},"component":{}}],["linux",{"_index":1705,"title":{},"name":{},"text":{"19":{}},"component":{}}],["list",{"_index":9,"title":{"3-6":{},"6-3":{},"7-3":{}},"name":{},"text":{"1":{},"2":{},"3":{},"4":{},"6":{},"7":{},"19":{},"20":{}},"component":{}}],["listen",{"_index":1720,"title":{},"name":{},"text":{"19":{}},"component":{}}],["liter",{"_index":1316,"title":{},"name":{},"text":{"9":{}},"component":{}}],["littl",{"_index":1941,"title":{},"name":{},"text":{"27":{}},"component":{}}],["llo",{"_index":1296,"title":{},"name":{},"text":{"9":{}},"component":{}}],["lo",{"_index":1297,"title":{},"name":{},"text":{"9":{}},"component":{}}],["load",{"_index":66,"title":{"2":{},"2-2":{},"2-3":{},"2-7":{},"2-8":{},"19-3":{},"20-4":{},"20-6":{}},"name":{"2":{}},"text":{"1":{},"2":{},"4":{},"6":{},"19":{},"20":{},"21":{},"24":{},"26":{},"27":{}},"component":{}}],["load_ext",{"_index":65,"title":{},"name":{},"text":{"1":{},"20":{}},"component":{}}],["local",{"_index":21,"title":{"2-5":{},"29-3":{}},"name":{},"text":{"1":{},"2":{},"6":{},"7":{},"16":{},"19":{},"20":{},"21":{},"29":{}},"component":{}}],["localbuild",{"_index":27,"title":{},"name":{},"text":{"1":{},"2":{},"3":{},"5":{},"6":{},"7":{},"20":{}},"component":{}}],["localbuilder().build",{"_index":29,"title":{},"name":{},"text":{"1":{},"2":{},"3":{},"5":{},"6":{},"7":{},"20":{}},"component":{}}],["locat",{"_index":203,"title":{"2-4":{}},"name":{},"text":{"2":{},"6":{},"19":{},"31":{}},"component":{}}],["log",{"_index":190,"title":{"31":{}},"name":{"31":{}},"text":{"1":{},"27":{},"31":{}},"component":{}}],["logic",{"_index":348,"title":{"9-7":{},"9-258":{},"9-265":{}},"name":{},"text":{"3":{},"4":{},"7":{},"9":{},"16":{},"27":{},"28":{}},"component":{}}],["logical_and",{"_index":925,"title":{"9-255":{}},"name":{},"text":{"9":{}},"component":{}}],["logical_or",{"_index":926,"title":{"9-262":{}},"name":{},"text":{"9":{}},"component":{}}],["logisticregress",{"_index":2117,"title":{},"name":{},"text":{"29":{}},"component":{}}],["logisticregression(max_iter=1000",{"_index":2138,"title":{},"name":{},"text":{"29":{}},"component":{}}],["long",{"_index":2043,"title":{},"name":{},"text":{"28":{}},"component":{}}],["look",{"_index":515,"title":{},"name":{},"text":{"4":{},"9":{},"12":{},"13":{},"14":{},"19":{},"20":{},"27":{}},"component":{}}],["lookup",{"_index":512,"title":{"9-269":{},"9-272":{}},"name":{},"text":{"4":{},"5":{},"9":{},"12":{},"13":{},"14":{},"15":{}},"component":{}}],["lookup($input",{"_index":1488,"title":{},"name":{},"text":{"12":{}},"component":{}}],["lookup(key",{"_index":1512,"title":{},"name":{},"text":{"13":{}},"component":{}}],["lookup(product_id_by_custom",{"_index":1253,"title":{},"name":{},"text":{"9":{}},"component":{}}],["lookup(productreview.reviewer_id",{"_index":1519,"title":{},"name":{},"text":{"13":{}},"component":{}}],["lookup(purchase.customer_id",{"_index":1562,"title":{},"name":{},"text":{"14":{},"29":{}},"component":{}}],["lookup(purchase.product_id",{"_index":511,"title":{},"name":{},"text":{"4":{}},"component":{}}],["lookup(purchase.vendor_id",{"_index":1686,"title":{},"name":{},"text":{"17":{}},"component":{}}],["loos",{"_index":2200,"title":{},"name":{},"text":{"30":{}},"component":{}}],["lose",{"_index":2001,"title":{},"name":{},"text":{"28":{},"30":{}},"component":{}}],["loss_dur",{"_index":2183,"title":{},"name":{},"text":{"30":{}},"component":{}}],["lossi",{"_index":1868,"title":{},"name":{},"text":{"27":{}},"component":{}}],["lost",{"_index":795,"title":{},"name":{},"text":{"6":{},"27":{},"28":{},"30":{}},"component":{}}],["lot",{"_index":2026,"title":{},"name":{},"text":{"28":{},"30":{}},"component":{}}],["love",{"_index":1887,"title":{},"name":{},"text":{"27":{}},"component":{}}],["low",{"_index":320,"title":{},"name":{},"text":{"3":{},"22":{},"28":{}},"component":{}}],["lower",{"_index":929,"title":{"9-277":{},"9-280":{}},"name":{},"text":{"9":{},"19":{}},"component":{}}],["lt",{"_index":930,"title":{"9-284":{}},"name":{},"text":{"9":{}},"component":{}}],["lte",{"_index":932,"title":{"9-291":{}},"name":{},"text":{"9":{}},"component":{}}],["m",{"_index":138,"title":{},"name":{},"text":{"1":{},"3":{},"19":{}},"component":{}}],["machin",{"_index":1676,"title":{},"name":{},"text":{"17":{},"20":{},"27":{}},"component":{}}],["made",{"_index":798,"title":{},"name":{},"text":{"6":{},"7":{},"11":{},"17":{},"30":{}},"component":{}}],["magic",{"_index":42,"title":{"20-3":{}},"name":{},"text":{"1":{},"7":{},"29":{}},"component":{}}],["magnitud",{"_index":1897,"title":{},"name":{},"text":{"27":{}},"component":{}}],["main",{"_index":424,"title":{},"name":{},"text":{"4":{}},"component":{}}],["maintain",{"_index":2057,"title":{},"name":{},"text":{"28":{}},"component":{}}],["major",{"_index":1956,"title":{},"name":{},"text":{"27":{}},"component":{}}],["make",{"_index":398,"title":{},"name":{},"text":{"4":{},"6":{},"7":{},"11":{},"13":{},"14":{},"15":{},"16":{},"17":{},"19":{},"20":{},"21":{},"27":{},"28":{},"29":{},"30":{}},"component":{}}],["manag",{"_index":122,"title":{"31":{},"3-4":{},"6-1":{},"6-7":{},"7-1":{},"7-7":{},"19-2":{}},"name":{},"text":{"1":{},"2":{},"4":{},"5":{},"6":{},"7":{},"19":{},"29":{},"31":{}},"component":{}}],["manager.log",{"_index":199,"title":{},"name":{},"text":{"1":{},"19":{}},"component":{}}],["manager_stderr.txt",{"_index":2218,"title":{},"name":{},"text":{"31":{}},"component":{}}],["manager_stdout.txt",{"_index":2219,"title":{},"name":{},"text":{"31":{}},"component":{}}],["mani",{"_index":106,"title":{"20-11":{}},"name":{},"text":{"1":{},"4":{},"9":{},"10":{},"11":{},"12":{},"16":{},"17":{},"20":{},"27":{},"28":{},"30":{}},"component":{}}],["manipul",{"_index":1648,"title":{},"name":{},"text":{"16":{}},"component":{}}],["mar",{"_index":1965,"title":{},"name":{},"text":{"27":{}},"component":{}}],["match",{"_index":728,"title":{},"name":{},"text":{"5":{},"9":{}},"component":{}}],["materi",{"_index":305,"title":{"3":{},"3-4":{},"3-5":{},"3-6":{},"3-7":{},"3-8":{},"3-9":{}},"name":{"3":{}},"text":{"3":{},"6":{},"17":{},"22":{},"23":{},"25":{}},"component":{}}],["materializa",{"_index":325,"title":{},"name":{},"text":{"3":{}},"component":{}}],["materialization.create_materi",{"_index":361,"title":{},"name":{},"text":{"3":{},"23":{}},"component":{}}],["materialization.delete_materialization(\"purchasestat",{"_index":372,"title":{},"name":{},"text":{"3":{}},"component":{}}],["materialization.get_materialization(\"purchasestat",{"_index":368,"title":{},"name":{},"text":{"3":{}},"component":{}}],["materialization.list_materializations(\"purchas",{"_index":367,"title":{},"name":{},"text":{"3":{}},"component":{}}],["materialization.pulsardestination(ten",{"_index":360,"title":{},"name":{},"text":{"3":{},"23":{}},"component":{}}],["materialization_nam",{"_index":322,"title":{},"name":{},"text":{"3":{}},"component":{}}],["materializedfeatur",{"_index":1837,"title":{},"name":{},"text":{"23":{}},"component":{}}],["math",{"_index":895,"title":{"9-8":{}},"name":{},"text":{"9":{}},"component":{}}],["mathemat",{"_index":1356,"title":{},"name":{},"text":{"10":{}},"component":{}}],["matter",{"_index":1679,"title":{},"name":{},"text":{"17":{},"18":{},"27":{}},"component":{}}],["max",{"_index":356,"title":{"9-40":{},"9-298":{},"9-577":{}},"name":{},"text":{"3":{},"4":{},"5":{},"7":{},"9":{},"19":{},"23":{},"24":{},"26":{}},"component":{}}],["max(timestamp",{"_index":2037,"title":{},"name":{},"text":{"28":{}},"component":{}}],["max_amount",{"_index":354,"title":{},"name":{},"text":{"3":{},"4":{},"5":{},"7":{},"19":{},"23":{},"24":{},"26":{}},"component":{}}],["max_purchas",{"_index":1744,"title":{},"name":{},"text":{"19":{}},"component":{}}],["max_verified_review_to_d",{"_index":434,"title":{},"name":{},"text":{"4":{}},"component":{}}],["maximum",{"_index":445,"title":{"9-301":{}},"name":{},"text":{"4":{},"9":{}},"component":{}}],["mean",{"_index":504,"title":{"9-305":{},"9-308":{}},"name":{},"text":{"4":{},"8":{},"9":{},"12":{},"13":{},"14":{},"17":{},"27":{},"28":{},"29":{}},"component":{}}],["mean(differ",{"_index":1235,"title":{},"name":{},"text":{"9":{}},"component":{}}],["mean(input.n",{"_index":1276,"title":{},"name":{},"text":{"9":{}},"component":{}}],["mean_differ",{"_index":1234,"title":{},"name":{},"text":{"9":{}},"component":{}}],["mean_purchas",{"_index":2107,"title":{},"name":{},"text":{"29":{}},"component":{}}],["meaning",{"_index":1349,"title":{},"name":{},"text":{"10":{}},"component":{}}],["measur",{"_index":1914,"title":{},"name":{},"text":{"27":{}},"component":{}}],["memori",{"_index":1846,"title":{},"name":{},"text":{"25":{},"27":{},"28":{}},"component":{}}],["mental",{"_index":2061,"title":{},"name":{},"text":{"28":{}},"component":{}}],["mention",{"_index":1368,"title":{},"name":{},"text":{"10":{}},"component":{}}],["messag",{"_index":1836,"title":{},"name":{},"text":{"22":{},"25":{}},"component":{}}],["met",{"_index":1010,"title":{},"name":{},"text":{"9":{},"28":{}},"component":{}}],["method",{"_index":362,"title":{},"name":{},"text":{"3":{},"5":{},"6":{},"7":{},"9":{}},"component":{}}],["microsecond",{"_index":1399,"title":{},"name":{},"text":{"11":{}},"component":{}}],["millisecond",{"_index":1398,"title":{},"name":{},"text":{"11":{},"27":{}},"component":{}}],["min",{"_index":358,"title":{"9-40":{},"9-44":{},"9-312":{},"9-584":{}},"name":{},"text":{"3":{},"4":{},"5":{},"7":{},"9":{},"13":{},"19":{},"23":{},"24":{},"26":{}},"component":{}}],["min_amount",{"_index":357,"title":{},"name":{},"text":{"3":{},"4":{},"5":{},"7":{},"19":{},"23":{},"24":{},"26":{}},"component":{}}],["mind",{"_index":1645,"title":{},"name":{},"text":{"16":{}},"component":{}}],["minim",{"_index":1978,"title":{},"name":{},"text":{"27":{}},"component":{}}],["minimum",{"_index":657,"title":{"9-315":{}},"name":{},"text":{"4":{},"9":{}},"component":{}}],["minio",{"_index":265,"title":{},"name":{},"text":{"2":{}},"component":{}}],["minu",{"_index":1307,"title":{},"name":{},"text":{"9":{}},"component":{}}],["minut",{"_index":933,"title":{"9-319":{},"9-321":{},"9-325":{}},"name":{},"text":{"9":{},"20":{},"27":{},"28":{}},"component":{}}],["misc",{"_index":896,"title":{"9-9":{}},"name":{},"text":{"9":{}},"component":{}}],["miss",{"_index":1240,"title":{},"name":{},"text":{"9":{}},"component":{}}],["ml",{"_index":814,"title":{"30":{},"30-1":{},"30-2":{},"30-3":{}},"name":{"30":{}},"text":{"7":{},"30":{}},"component":{}}],["mobil",{"_index":2147,"title":{},"name":{},"text":{"30":{}},"component":{}}],["mode",{"_index":2003,"title":{},"name":{},"text":{"28":{}},"component":{}}],["model",{"_index":735,"title":{"11":{},"29":{},"30":{},"14-1":{},"29-3":{},"30-3":{}},"name":{"11":{},"30":{}},"text":{"6":{},"14":{},"16":{},"17":{},"19":{},"20":{},"27":{},"28":{},"29":{},"30":{}},"component":{}}],["model#numer",{"_index":1120,"title":{},"name":{},"text":{"9":{}},"component":{}}],["model#typ",{"_index":1005,"title":{},"name":{},"text":{"9":{}},"component":{}}],["model.fit(x_train_sc",{"_index":2139,"title":{},"name":{},"text":{"29":{}},"component":{}}],["model.score(x_validation_sc",{"_index":2140,"title":{},"name":{},"text":{"29":{}},"component":{}}],["model_featur",{"_index":359,"title":{},"name":{},"text":{"3":{},"23":{}},"component":{}}],["model’",{"_index":2162,"title":{},"name":{},"text":{"30":{}},"component":{}}],["modern",{"_index":1898,"title":{},"name":{},"text":{"27":{},"28":{}},"component":{}}],["modifi",{"_index":558,"title":{},"name":{},"text":{"4":{},"6":{},"7":{},"20":{}},"component":{}}],["modul",{"_index":701,"title":{},"name":{},"text":{"5":{}},"component":{}}],["moment",{"_index":220,"title":{},"name":{},"text":{"2":{}},"component":{}}],["month",{"_index":904,"title":{"9-82":{},"9-89":{},"9-332":{},"9-339":{},"9-353":{},"9-363":{}},"name":{},"text":{"9":{},"30":{}},"component":{}}],["month_of_year",{"_index":934,"title":{"9-329":{}},"name":{},"text":{"9":{}},"component":{}}],["month_of_year0",{"_index":935,"title":{"9-336":{}},"name":{},"text":{"9":{}},"component":{}}],["monthli",{"_index":936,"title":{"9-343":{},"9-345":{},"9-349":{}},"name":{},"text":{"9":{}},"component":{}}],["months_between",{"_index":937,"title":{"9-360":{}},"name":{},"text":{"9":{}},"component":{}}],["more",{"_index":214,"title":{},"name":{},"text":{"2":{},"4":{},"6":{},"9":{},"11":{},"12":{},"13":{},"14":{},"16":{},"18":{},"19":{},"20":{},"21":{},"27":{},"28":{},"30":{}},"component":{}}],["move",{"_index":464,"title":{},"name":{},"text":{"4":{},"9":{},"12":{},"30":{}},"component":{}}],["much",{"_index":740,"title":{},"name":{},"text":{"6":{},"19":{},"20":{},"27":{},"28":{}},"component":{}}],["mul",{"_index":938,"title":{"9-367":{}},"name":{},"text":{"9":{}},"component":{}}],["mul(2",{"_index":1620,"title":{},"name":{},"text":{"16":{}},"component":{}}],["multi",{"_index":1741,"title":{},"name":{},"text":{"19":{}},"component":{}}],["multipl",{"_index":209,"title":{"9-370":{}},"name":{},"text":{"2":{},"4":{},"6":{},"8":{},"9":{},"10":{},"11":{},"13":{},"16":{},"19":{},"20":{},"27":{},"29":{},"31":{}},"component":{}}],["mutabl",{"_index":793,"title":{},"name":{},"text":{"6":{},"7":{},"27":{}},"component":{}}],["n",{"_index":853,"title":{},"name":{},"text":{"8":{},"9":{}},"component":{}}],["name",{"_index":89,"title":{"16-6":{}},"name":{},"text":{"1":{},"3":{},"4":{},"6":{},"7":{},"9":{},"11":{},"12":{},"14":{},"15":{},"16":{},"18":{},"19":{},"20":{},"23":{},"29":{},"30":{},"31":{}},"component":{}}],["name=gameplay",{"_index":805,"title":{},"name":{},"text":{"6":{},"19":{}},"component":{}}],["name=purchas",{"_index":806,"title":{},"name":{},"text":{"6":{},"19":{}},"component":{}}],["namespac",{"_index":332,"title":{},"name":{},"text":{"3":{},"23":{}},"component":{}}],["nan",{"_index":1346,"title":{},"name":{},"text":{"9":{}},"component":{}}],["nano",{"_index":1805,"title":{},"name":{},"text":{"20":{}},"component":{}}],["nanosecond",{"_index":1400,"title":{},"name":{},"text":{"11":{}},"component":{}}],["nativ",{"_index":386,"title":{"4-9":{}},"name":{},"text":{},"component":{}}],["natur",{"_index":1559,"title":{},"name":{},"text":{"14":{},"27":{}},"component":{}}],["nbclient",{"_index":1774,"title":{},"name":{},"text":{"20":{}},"component":{}}],["nbconvert",{"_index":1776,"title":{},"name":{},"text":{"20":{}},"component":{}}],["nbformat",{"_index":1778,"title":{},"name":{},"text":{"20":{}},"component":{}}],["nearbi",{"_index":1661,"title":{},"name":{},"text":{"16":{}},"component":{}}],["nearest",{"_index":991,"title":{},"name":{},"text":{"9":{}},"component":{}}],["necessari",{"_index":790,"title":{},"name":{},"text":{"6":{},"7":{},"11":{},"12":{},"13":{},"16":{}},"component":{}}],["need",{"_index":59,"title":{},"name":{},"text":{"1":{},"4":{},"6":{},"7":{},"12":{},"14":{},"16":{},"19":{},"20":{},"21":{},"27":{},"28":{}},"component":{}}],["neg",{"_index":939,"title":{"9-374":{}},"name":{},"text":{"9":{},"12":{}},"component":{}}],["negat",{"_index":940,"title":{"9-377":{}},"name":{},"text":{"9":{}},"component":{}}],["neq",{"_index":941,"title":{"9-381":{}},"name":{},"text":{"9":{}},"component":{}}],["nest",{"_index":1226,"title":{},"name":{},"text":{"9":{},"11":{},"16":{}},"component":{}}],["network",{"_index":2005,"title":{},"name":{},"text":{"28":{}},"component":{}}],["never",{"_index":682,"title":{},"name":{},"text":{"5":{},"9":{},"11":{}},"component":{}}],["new",{"_index":371,"title":{"27-1":{}},"name":{},"text":{"3":{},"5":{},"6":{},"7":{},"9":{},"12":{},"13":{},"16":{},"18":{},"20":{},"27":{},"28":{},"30":{},"31":{}},"component":{}}],["newest",{"_index":885,"title":{},"name":{},"text":{"8":{}},"component":{}}],["next",{"_index":973,"title":{"28-6":{}},"name":{},"text":{"9":{},"11":{},"14":{},"20":{},"22":{},"25":{},"29":{}},"component":{}}],["node",{"_index":2006,"title":{},"name":{},"text":{"28":{}},"component":{}}],["non",{"_index":266,"title":{},"name":{},"text":{"2":{},"9":{},"12":{},"13":{},"14":{}},"component":{}}],["none",{"_index":677,"title":{},"name":{},"text":{"5":{}},"component":{}}],["noraml",{"_index":1976,"title":{},"name":{},"text":{"27":{}},"component":{}}],["normal",{"_index":1020,"title":{},"name":{},"text":{"9":{},"19":{}},"component":{}}],["nosql",{"_index":1829,"title":{},"name":{},"text":{"22":{}},"component":{}}],["not_the_answ",{"_index":1613,"title":{},"name":{},"text":{"16":{}},"component":{}}],["note",{"_index":659,"title":{},"name":{},"text":{"4":{},"6":{},"9":{},"11":{}},"component":{}}],["notebook",{"_index":37,"title":{},"name":{},"text":{"1":{},"20":{},"21":{}},"component":{}}],["noth",{"_index":1957,"title":{},"name":{},"text":{"27":{}},"component":{}}],["notic",{"_index":2187,"title":{},"name":{},"text":{"30":{}},"component":{}}],["notion",{"_index":2046,"title":{},"name":{},"text":{"28":{}},"component":{}}],["noun",{"_index":1449,"title":{},"name":{},"text":{"12":{}},"component":{}}],["now",{"_index":20,"title":{},"name":{},"text":{"1":{},"4":{},"14":{},"17":{},"19":{},"20":{},"28":{},"30":{}},"component":{}}],["null",{"_index":863,"title":{"9-398":{}},"name":{},"text":{"8":{},"9":{},"10":{},"11":{},"12":{},"13":{},"14":{},"16":{},"26":{}},"component":{}}],["null_if",{"_index":942,"title":{"9-395":{}},"name":{},"text":{"9":{}},"component":{}}],["null_if(!condit",{"_index":1210,"title":{},"name":{},"text":{"9":{}},"component":{}}],["number",{"_index":446,"title":{"9-26":{},"9-110":{}},"name":{},"text":{"4":{},"8":{},"9":{},"10":{},"11":{},"12":{},"13":{},"14":{},"19":{},"20":{},"26":{},"27":{}},"component":{}}],["numer",{"_index":722,"title":{"11-6":{}},"name":{},"text":{"5":{},"9":{},"11":{}},"component":{}}],["numeric/str",{"_index":730,"title":{},"name":{},"text":{"5":{}},"component":{}}],["o",{"_index":149,"title":{},"name":{},"text":{"1":{},"19":{}},"component":{}}],["object",{"_index":268,"title":{"3-3":{}},"name":{},"text":{"2":{},"6":{},"7":{},"9":{},"12":{},"19":{},"20":{}},"component":{}}],["object_stor",{"_index":334,"title":{},"name":{},"text":{"3":{}},"component":{}}],["observ",{"_index":431,"title":{},"name":{},"text":{"4":{},"27":{},"28":{},"30":{}},"component":{}}],["obtain",{"_index":1702,"title":{},"name":{},"text":{"19":{}},"component":{}}],["occur",{"_index":248,"title":{},"name":{},"text":{"2":{},"5":{},"6":{},"8":{},"9":{},"14":{},"17":{},"19":{},"20":{},"27":{},"30":{},"31":{}},"component":{}}],["occurr",{"_index":1442,"title":{},"name":{},"text":{"11":{},"27":{}},"component":{}}],["odd",{"_index":652,"title":{},"name":{},"text":{"4":{}},"component":{}}],["offer",{"_index":664,"title":{"28-3":{}},"name":{},"text":{"5":{},"30":{}},"component":{}}],["offlin",{"_index":2065,"title":{},"name":{},"text":{"28":{}},"component":{}}],["offset",{"_index":779,"title":{},"name":{},"text":{"6":{},"16":{}},"component":{}}],["olap",{"_index":2064,"title":{},"name":{},"text":{"28":{}},"component":{}}],["old",{"_index":1164,"title":{},"name":{},"text":{"9":{}},"component":{}}],["older",{"_index":1691,"title":{},"name":{},"text":{"18":{}},"component":{}}],["oldest",{"_index":886,"title":{},"name":{},"text":{"8":{}},"component":{}}],["omit",{"_index":1312,"title":{},"name":{},"text":{"9":{},"11":{},"12":{},"14":{},"16":{},"19":{}},"component":{}}],["on",{"_index":96,"title":{},"name":{},"text":{"1":{},"4":{},"5":{},"6":{},"9":{},"10":{},"11":{},"12":{},"17":{},"18":{},"27":{},"28":{},"29":{},"30":{}},"component":{}}],["onc",{"_index":720,"title":{},"name":{},"text":{"5":{},"7":{},"9":{},"14":{},"16":{},"19":{},"20":{},"29":{},"30":{}},"component":{}}],["open",{"_index":1754,"title":{},"name":{},"text":{"20":{},"22":{},"23":{},"31":{}},"component":{}}],["open('frauds.parquet",{"_index":2095,"title":{},"name":{},"text":{"29":{}},"component":{}}],["open('purchases.parquet",{"_index":2087,"title":{},"name":{},"text":{"29":{}},"component":{}}],["opensourc",{"_index":1845,"title":{},"name":{},"text":{"25":{}},"component":{}}],["oper",{"_index":384,"title":{"4-6":{},"9-3":{},"12-5":{},"16-2":{}},"name":{},"text":{"4":{},"7":{},"9":{},"10":{},"11":{},"12":{},"13":{},"14":{},"15":{},"16":{},"17":{},"20":{},"27":{},"28":{},"30":{}},"component":{}}],["operations[cross",{"_index":1318,"title":{},"name":{},"text":{"9":{}},"component":{}}],["operation’",{"_index":1363,"title":{},"name":{},"text":{"10":{}},"component":{}}],["oppos",{"_index":819,"title":{},"name":{},"text":{"7":{}},"component":{}}],["optim",{"_index":1891,"title":{},"name":{},"text":{"27":{},"28":{}},"component":{}}],["option",{"_index":84,"title":{"4-14":{},"4-16":{},"11-8":{}},"name":{},"text":{"1":{},"3":{},"6":{},"7":{},"11":{}},"component":{}}],["order",{"_index":467,"title":{},"name":{},"text":{"4":{},"6":{},"9":{},"11":{},"16":{},"18":{},"19":{},"21":{},"27":{},"28":{}},"component":{}}],["organ",{"_index":1448,"title":{},"name":{},"text":{"12":{},"19":{}},"component":{}}],["origin",{"_index":532,"title":{},"name":{},"text":{"4":{},"18":{},"20":{},"27":{},"30":{}},"component":{}}],["os",{"_index":147,"title":{},"name":{},"text":{"1":{},"20":{}},"component":{}}],["os=$(unam",{"_index":142,"title":{},"name":{},"text":{"1":{}},"component":{}}],["osx",{"_index":154,"title":{},"name":{},"text":{"1":{},"19":{}},"component":{}}],["other",{"_index":684,"title":{},"name":{},"text":{"5":{},"9":{},"31":{}},"component":{}}],["other_key",{"_index":1319,"title":{},"name":{},"text":{"9":{}},"component":{}}],["otherwis",{"_index":979,"title":{},"name":{},"text":{"9":{},"13":{},"14":{}},"component":{}}],["out",{"_index":808,"title":{},"name":{},"text":{"6":{},"7":{},"9":{},"19":{},"20":{},"29":{}},"component":{}}],["outcom",{"_index":2143,"title":{},"name":{},"text":{"30":{}},"component":{}}],["outer",{"_index":489,"title":{},"name":{},"text":{"4":{}},"component":{}}],["output",{"_index":77,"title":{"9-22":{},"9-29":{},"9-36":{},"9-43":{},"9-47":{},"9-54":{},"9-61":{},"9-68":{},"9-74":{},"9-78":{},"9-85":{},"9-92":{},"9-99":{},"9-106":{},"9-113":{},"9-120":{},"9-127":{},"9-134":{},"9-138":{},"9-145":{},"9-152":{},"9-159":{},"9-166":{},"9-173":{},"9-180":{},"9-187":{},"9-194":{},"9-198":{},"9-204":{},"9-208":{},"9-215":{},"9-222":{},"9-229":{},"9-236":{},"9-240":{},"9-247":{},"9-254":{},"9-261":{},"9-268":{},"9-276":{},"9-283":{},"9-290":{},"9-297":{},"9-304":{},"9-311":{},"9-318":{},"9-324":{},"9-328":{},"9-335":{},"9-342":{},"9-348":{},"9-352":{},"9-359":{},"9-366":{},"9-373":{},"9-380":{},"9-387":{},"9-394":{},"9-401":{},"9-407":{},"9-414":{},"9-421":{},"9-428":{},"9-435":{},"9-442":{},"9-449":{},"9-456":{},"9-463":{},"9-467":{},"9-474":{},"9-478":{},"9-485":{},"9-492":{},"9-499":{},"9-506":{},"9-510":{},"9-517":{},"9-524":{},"9-528":{},"9-535":{},"9-542":{},"9-549":{},"9-556":{},"9-563":{},"9-569":{},"9-573":{},"9-580":{},"9-587":{}},"name":{},"text":{"1":{},"8":{},"9":{},"10":{},"12":{},"18":{},"19":{},"20":{},"24":{},"26":{},"27":{},"31":{}},"component":{}}],["output_prefix_loc",{"_index":336,"title":{},"name":{},"text":{"3":{}},"component":{}}],["output’",{"_index":842,"title":{},"name":{},"text":{"8":{}},"component":{}}],["over",{"_index":400,"title":{"9-471":{},"9-475":{}},"name":{},"text":{"4":{},"8":{},"9":{},"10":{},"12":{},"13":{},"14":{},"17":{},"19":{},"20":{},"21":{},"24":{},"26":{},"27":{},"28":{},"30":{}},"component":{}}],["overflow",{"_index":1419,"title":{},"name":{},"text":{"11":{}},"component":{}}],["overrid",{"_index":1690,"title":{},"name":{},"text":{"18":{}},"component":{}}],["overview",{"_index":403,"title":{},"name":{},"text":{"4":{}},"component":{}}],["p90",{"_index":1895,"title":{},"name":{},"text":{"27":{}},"component":{}}],["p_avg_rat",{"_index":1487,"title":{},"name":{},"text":{"12":{}},"component":{}}],["p_count",{"_index":1476,"title":{},"name":{},"text":{"12":{}},"component":{}}],["p_total",{"_index":1585,"title":{},"name":{},"text":{"14":{}},"component":{}}],["packag",{"_index":1760,"title":{},"name":{},"text":{"20":{}},"component":{}}],["page",{"_index":1701,"title":{},"name":{},"text":{"19":{},"27":{},"28":{}},"component":{}}],["pageview",{"_index":458,"title":{},"name":{},"text":{"4":{},"28":{}},"component":{}}],["pageview.timestamp",{"_index":2040,"title":{},"name":{},"text":{"28":{}},"component":{}}],["pageview.user_id",{"_index":2038,"title":{},"name":{},"text":{"28":{}},"component":{}}],["pageviews_since_last_purchas",{"_index":469,"title":{},"name":{},"text":{"4":{}},"component":{}}],["painlessli",{"_index":541,"title":{},"name":{},"text":{"4":{}},"component":{}}],["pair",{"_index":1365,"title":{},"name":{},"text":{"10":{},"11":{}},"component":{}}],["panda",{"_index":1814,"title":{},"name":{},"text":{"20":{},"29":{}},"component":{}}],["paramet",{"_index":393,"title":{"4-14":{},"4-16":{},"9-17":{},"9-24":{},"9-31":{},"9-38":{},"9-49":{},"9-56":{},"9-63":{},"9-80":{},"9-87":{},"9-94":{},"9-101":{},"9-108":{},"9-115":{},"9-122":{},"9-129":{},"9-140":{},"9-147":{},"9-154":{},"9-161":{},"9-168":{},"9-175":{},"9-182":{},"9-189":{},"9-210":{},"9-217":{},"9-224":{},"9-231":{},"9-242":{},"9-249":{},"9-256":{},"9-263":{},"9-270":{},"9-278":{},"9-285":{},"9-292":{},"9-299":{},"9-306":{},"9-313":{},"9-330":{},"9-337":{},"9-354":{},"9-361":{},"9-368":{},"9-375":{},"9-382":{},"9-389":{},"9-396":{},"9-403":{},"9-409":{},"9-416":{},"9-423":{},"9-430":{},"9-437":{},"9-444":{},"9-451":{},"9-458":{},"9-469":{},"9-480":{},"9-487":{},"9-494":{},"9-501":{},"9-512":{},"9-519":{},"9-530":{},"9-537":{},"9-544":{},"9-551":{},"9-558":{},"9-575":{},"9-582":{},"11-8":{}},"name":{},"text":{"6":{},"8":{},"9":{},"11":{},"16":{},"19":{},"20":{}},"component":{}}],["paren",{"_index":1614,"title":{},"name":{},"text":{"16":{}},"component":{}}],["parquet",{"_index":100,"title":{"2-2":{}},"name":{},"text":{"1":{},"2":{},"3":{},"19":{},"20":{},"24":{},"26":{},"28":{}},"component":{}}],["pars",{"_index":1430,"title":{},"name":{},"text":{"11":{}},"component":{}}],["part",{"_index":746,"title":{"14-4":{},"14-5":{}},"name":{},"text":{"6":{},"7":{},"9":{},"18":{}},"component":{}}],["particular",{"_index":854,"title":{},"name":{},"text":{"8":{},"11":{},"12":{},"13":{},"14":{}},"component":{}}],["partit",{"_index":1682,"title":{},"name":{},"text":{"17":{},"28":{},"29":{}},"component":{}}],["pass",{"_index":1009,"title":{},"name":{},"text":{"9":{},"19":{},"28":{}},"component":{}}],["past",{"_index":523,"title":{},"name":{},"text":{"4":{},"14":{},"15":{},"17":{},"19":{},"27":{},"28":{}},"component":{}}],["path",{"_index":245,"title":{},"name":{},"text":{"2":{},"19":{},"28":{}},"component":{}}],["path/to/file.csv",{"_index":251,"title":{},"name":{},"text":{"2":{}},"component":{}}],["path/to/file.parquet",{"_index":244,"title":{},"name":{},"text":{"2":{}},"component":{}}],["patrick",{"_index":599,"title":{},"name":{},"text":{"4":{},"9":{},"12":{},"14":{},"19":{},"20":{}},"component":{}}],["pay",{"_index":2149,"title":{},"name":{},"text":{"30":{}},"component":{}}],["pennsylvania",{"_index":1455,"title":{},"name":{},"text":{"12":{}},"component":{}}],["per",{"_index":460,"title":{"12-4":{}},"name":{},"text":{"4":{},"5":{},"12":{},"31":{}},"component":{}}],["percent",{"_index":661,"title":{"5-1":{},"5-2":{}},"name":{},"text":{},"component":{}}],["percentag",{"_index":685,"title":{},"name":{},"text":{"5":{}},"component":{}}],["perform",{"_index":297,"title":{},"name":{},"text":{"2":{},"4":{},"9":{},"13":{},"16":{},"20":{},"27":{},"28":{}},"component":{}}],["period",{"_index":976,"title":{},"name":{},"text":{"9":{},"28":{}},"component":{}}],["permit",{"_index":285,"title":{},"name":{},"text":{"2":{}},"component":{}}],["persist",{"_index":374,"title":{},"name":{},"text":{"3":{},"7":{},"19":{},"20":{},"28":{}},"component":{}}],["physic",{"_index":1930,"title":{},"name":{},"text":{"27":{}},"component":{}}],["pick",{"_index":741,"title":{},"name":{},"text":{"6":{},"19":{},"20":{},"28":{}},"component":{}}],["piec",{"_index":1610,"title":{},"name":{},"text":{"16":{},"20":{}},"component":{}}],["pip",{"_index":11,"title":{},"name":{},"text":{"1":{},"20":{}},"component":{}}],["pip3",{"_index":12,"title":{},"name":{},"text":{"1":{},"20":{}},"component":{}}],["pipe",{"_index":477,"title":{"16-5":{}},"name":{},"text":{"4":{},"9":{},"11":{},"14":{},"16":{},"30":{}},"component":{}}],["pipelin",{"_index":383,"title":{"4-6":{}},"name":{},"text":{"20":{},"27":{}},"component":{}}],["pivot",{"_index":490,"title":{},"name":{},"text":{"4":{}},"component":{}}],["pizza",{"_index":1639,"title":{},"name":{},"text":{"16":{}},"component":{}}],["place",{"_index":161,"title":{},"name":{},"text":{"1":{},"7":{},"8":{},"16":{},"19":{}},"component":{}}],["plan",{"_index":799,"title":{},"name":{},"text":{"6":{},"7":{},"19":{}},"component":{}}],["platform",{"_index":1704,"title":{},"name":{},"text":{"19":{},"23":{}},"component":{}}],["play",{"_index":1667,"title":{},"name":{},"text":{"17":{},"30":{}},"component":{}}],["player",{"_index":2153,"title":{},"name":{},"text":{"30":{}},"component":{}}],["plu",{"_index":708,"title":{},"name":{},"text":{"5":{}},"component":{}}],["pm",{"_index":1269,"title":{},"name":{},"text":{"9":{}},"component":{}}],["point",{"_index":433,"title":{},"name":{},"text":{"4":{},"9":{},"10":{},"11":{},"14":{},"15":{},"17":{},"19":{},"21":{},"28":{},"30":{}},"component":{}}],["popul",{"_index":316,"title":{},"name":{},"text":{"3":{},"9":{}},"component":{}}],["popular",{"_index":1871,"title":{},"name":{},"text":{"27":{}},"component":{}}],["portion",{"_index":1612,"title":{},"name":{},"text":{"16":{}},"component":{}}],["posit",{"_index":1105,"title":{},"name":{},"text":{"9":{},"11":{},"16":{}},"component":{}}],["possibl",{"_index":1145,"title":{},"name":{},"text":{"9":{},"13":{},"16":{},"17":{},"28":{}},"component":{}}],["potenti",{"_index":1223,"title":{},"name":{},"text":{"9":{},"30":{}},"component":{}}],["power",{"_index":944,"title":{"9-404":{}},"name":{},"text":{"9":{},"27":{},"28":{}},"component":{}}],["powf",{"_index":943,"title":{"9-402":{}},"name":{},"text":{"9":{}},"component":{}}],["practic",{"_index":1980,"title":{},"name":{},"text":{"27":{}},"component":{}}],["practition",{"_index":1991,"title":{},"name":{},"text":{"27":{}},"component":{}}],["pre",{"_index":126,"title":{},"name":{},"text":{"1":{},"19":{},"27":{}},"component":{}}],["precis",{"_index":1421,"title":{},"name":{},"text":{"11":{}},"component":{}}],["precondit",{"_index":759,"title":{},"name":{},"text":{"6":{}},"component":{}}],["predic",{"_index":953,"title":{"9-464":{}},"name":{},"text":{"9":{},"10":{},"13":{},"27":{}},"component":{}}],["predict",{"_index":1530,"title":{"30-5":{}},"name":{},"text":{"14":{},"28":{},"29":{},"30":{}},"component":{}}],["predictor",{"_index":1583,"title":{},"name":{},"text":{"14":{},"29":{}},"component":{}}],["prefer",{"_index":852,"title":{},"name":{},"text":{"8":{},"9":{},"16":{}},"component":{}}],["prefix",{"_index":258,"title":{},"name":{},"text":{"2":{},"20":{}},"component":{}}],["preprocess",{"_index":2119,"title":{},"name":{},"text":{"29":{}},"component":{}}],["preprocessing.standardscaler().fit(x_train",{"_index":2133,"title":{},"name":{},"text":{"29":{}},"component":{}}],["prerequisit",{"_index":1753,"title":{},"name":{},"text":{"20":{}},"component":{}}],["present",{"_index":981,"title":{},"name":{},"text":{"9":{},"10":{}},"component":{}}],["preserv",{"_index":673,"title":{},"name":{},"text":{"5":{}},"component":{}}],["prev_valu",{"_index":1233,"title":{},"name":{},"text":{"9":{}},"component":{}}],["prevent",{"_index":157,"title":{},"name":{},"text":{"1":{},"15":{},"19":{}},"component":{}}],["preview",{"_index":78,"title":{"4-20":{}},"name":{},"text":{"1":{},"4":{},"20":{}},"component":{}}],["preview_row",{"_index":80,"title":{},"name":{},"text":{"1":{}},"component":{}}],["previou",{"_index":693,"title":{"9-233":{}},"name":{},"text":{"5":{},"9":{},"16":{},"19":{},"20":{},"28":{},"30":{}},"component":{}}],["previous",{"_index":711,"title":{},"name":{},"text":{"5":{},"6":{},"28":{},"30":{}},"component":{}}],["primarili",{"_index":1604,"title":{},"name":{},"text":{"16":{}},"component":{}}],["principl",{"_index":1600,"title":{"16-7":{}},"name":{},"text":{"16":{}},"component":{}}],["print",{"_index":140,"title":{},"name":{},"text":{"1":{},"6":{},"7":{}},"component":{}}],["prior",{"_index":1514,"title":{},"name":{},"text":{"13":{},"16":{}},"component":{}}],["prioriti",{"_index":1985,"title":{},"name":{},"text":{"27":{}},"component":{}}],["probabl",{"_index":712,"title":{},"name":{},"text":{"5":{},"12":{},"30":{}},"component":{}}],["problem",{"_index":2060,"title":{"29":{}},"name":{},"text":{"28":{},"29":{},"30":{},"31":{}},"component":{}}],["procduct",{"_index":516,"title":{},"name":{},"text":{"4":{}},"component":{}}],["process",{"_index":566,"title":{},"name":{},"text":{"4":{},"17":{},"20":{},"21":{},"27":{},"28":{},"30":{}},"component":{}}],["processor",{"_index":1890,"title":{},"name":{},"text":{"27":{},"28":{}},"component":{}}],["produc",{"_index":105,"title":{"10-4":{}},"name":{},"text":{"1":{},"4":{},"5":{},"8":{},"9":{},"10":{},"11":{},"12":{},"13":{},"14":{},"15":{},"16":{},"17":{},"18":{},"19":{},"20":{},"27":{},"28":{},"29":{}},"component":{}}],["product",{"_index":319,"title":{"14-7":{}},"name":{},"text":{"3":{},"9":{},"12":{},"13":{},"17":{}},"component":{}}],["product/1923.html",{"_index":2018,"title":{},"name":{},"text":{"28":{}},"component":{}}],["product_averag",{"_index":508,"title":{},"name":{},"text":{"4":{}},"component":{}}],["product_id",{"_index":1254,"title":{},"name":{},"text":{"9":{},"12":{},"13":{}},"component":{}}],["product_id_by_custom",{"_index":1249,"title":{},"name":{},"text":{"9":{}},"component":{}}],["productreview",{"_index":1469,"title":{},"name":{},"text":{"12":{}},"component":{}}],["productreview.product_id",{"_index":1517,"title":{},"name":{},"text":{"13":{}},"component":{}}],["productreview.reviewer_id",{"_index":1513,"title":{},"name":{},"text":{"13":{}},"component":{}}],["productreview.star",{"_index":1478,"title":{},"name":{},"text":{"12":{},"13":{}},"component":{}}],["productreviewbyreview",{"_index":1521,"title":{},"name":{},"text":{"13":{}},"component":{}}],["productreviewbyreviewer.star",{"_index":1515,"title":{},"name":{},"text":{"13":{}},"component":{}}],["productreviewsbycustom",{"_index":928,"title":{"9-275":{}},"name":{},"text":{"9":{}},"component":{}}],["productreviewsbycustomer.product_id",{"_index":1250,"title":{},"name":{},"text":{"9":{}},"component":{}}],["productreviewsbycustomer.star",{"_index":1252,"title":{},"name":{},"text":{"9":{}},"component":{}}],["productreviewsbyproduct",{"_index":927,"title":{"9-274":{}},"name":{},"text":{"9":{}},"component":{}}],["productreviewsbyproduct.star",{"_index":1248,"title":{},"name":{},"text":{"9":{}},"component":{}}],["products.html",{"_index":2016,"title":{},"name":{},"text":{"28":{}},"component":{}}],["product’",{"_index":514,"title":{},"name":{},"text":{"4":{}},"component":{}}],["project",{"_index":1687,"title":{"18-3":{}},"name":{},"text":{},"component":{}}],["promot",{"_index":1003,"title":{"11-5":{}},"name":{},"text":{"9":{},"11":{}},"component":{}}],["prompt",{"_index":1755,"title":{},"name":{},"text":{"20":{}},"component":{}}],["promql",{"_index":1873,"title":{},"name":{},"text":{"27":{}},"component":{}}],["properti",{"_index":674,"title":{},"name":{},"text":{"5":{}},"component":{}}],["protocol",{"_index":257,"title":{},"name":{},"text":{"2":{}},"component":{}}],["provid",{"_index":46,"title":{"9-135":{}},"name":{},"text":{"1":{},"2":{},"4":{},"5":{},"6":{},"8":{},"9":{},"11":{},"12":{},"13":{},"14":{},"15":{},"16":{},"17":{},"20":{},"21":{},"22":{},"24":{},"26":{},"27":{},"28":{},"29":{}},"component":{}}],["public",{"_index":267,"title":{},"name":{},"text":{"2":{},"3":{},"23":{}},"component":{}}],["pull",{"_index":1835,"title":{},"name":{},"text":{"22":{},"25":{}},"component":{}}],["pulsar",{"_index":304,"title":{"23":{},"3-2":{},"23-1":{}},"name":{"23":{}},"text":{"3":{},"22":{},"23":{},"25":{}},"component":{}}],["pulsar://127.0.0.1:6650",{"_index":330,"title":{},"name":{},"text":{"3":{},"23":{}},"component":{}}],["pulsarexampl",{"_index":323,"title":{},"name":{},"text":{"3":{}},"component":{}}],["purchas",{"_index":243,"title":{"14-3":{},"14-4":{},"14-5":{}},"name":{},"text":{"2":{},"3":{},"4":{},"6":{},"7":{},"8":{},"9":{},"12":{},"14":{},"17":{},"19":{},"20":{},"27":{},"28":{},"29":{},"30":{}},"component":{}}],["purchase.amount",{"_index":355,"title":{},"name":{},"text":{"3":{},"4":{},"5":{},"7":{},"8":{},"10":{},"12":{},"19":{},"23":{},"24":{},"26":{},"28":{},"29":{}},"component":{}}],["purchase.categori",{"_index":487,"title":{},"name":{},"text":{"4":{}},"component":{}}],["purchase.customer_id",{"_index":353,"title":{},"name":{},"text":{"3":{},"4":{},"5":{},"7":{},"14":{},"19":{},"23":{},"24":{},"26":{}},"component":{}}],["purchase.id",{"_index":2105,"title":{},"name":{},"text":{"29":{}},"component":{}}],["purchase.parquet",{"_index":1726,"title":{},"name":{},"text":{"19":{}},"component":{}}],["purchase.product_id",{"_index":1489,"title":{},"name":{},"text":{"12":{}},"component":{}}],["purchase.purchase_tim",{"_index":352,"title":{},"name":{},"text":{"3":{},"4":{},"5":{},"7":{},"19":{}},"component":{}}],["purchase.tot",{"_index":1549,"title":{},"name":{},"text":{"14":{}},"component":{}}],["purchase_count",{"_index":2196,"title":{},"name":{},"text":{"30":{}},"component":{}}],["purchase_id",{"_index":1539,"title":{},"name":{},"text":{"14":{},"29":{}},"component":{}}],["purchase_stat",{"_index":351,"title":{},"name":{},"text":{"3":{},"7":{}},"component":{}}],["purchase_stats.express",{"_index":822,"title":{},"name":{},"text":{"7":{}},"component":{}}],["purchase_tim",{"_index":586,"title":{},"name":{},"text":{"4":{},"6":{},"19":{},"20":{},"29":{}},"component":{}}],["purchase_tot",{"_index":2106,"title":{},"name":{},"text":{"29":{}},"component":{}}],["purchasebycustom",{"_index":1550,"title":{},"name":{},"text":{"14":{},"29":{}},"component":{}}],["purchasebycustomer.amount",{"_index":2104,"title":{},"name":{},"text":{"29":{}},"component":{}}],["purchasebycustomer.tot",{"_index":1554,"title":{},"name":{},"text":{"14":{}},"component":{}}],["purchases.parquet",{"_index":2090,"title":{},"name":{},"text":{"29":{}},"component":{}}],["purchases_in_last_day",{"_index":527,"title":{},"name":{},"text":{"4":{},"20":{}},"component":{}}],["purchases_now",{"_index":524,"title":{},"name":{},"text":{"4":{},"20":{}},"component":{}}],["purchases_path",{"_index":1809,"title":{},"name":{},"text":{"20":{}},"component":{}}],["purchases_per_page_view",{"_index":452,"title":{},"name":{},"text":{"4":{}},"component":{}}],["purchases_url",{"_index":2083,"title":{},"name":{},"text":{"29":{}},"component":{}}],["purchases_yesterday",{"_index":525,"title":{},"name":{},"text":{"4":{},"20":{}},"component":{}}],["purchasestat",{"_index":327,"title":{},"name":{},"text":{"3":{},"7":{}},"component":{}}],["purchasetot",{"_index":1548,"title":{},"name":{},"text":{"14":{}},"component":{}}],["purchasetotal.tim",{"_index":1568,"title":{},"name":{},"text":{"14":{}},"component":{}}],["purchase’",{"_index":1560,"title":{},"name":{},"text":{"14":{},"17":{},"20":{}},"component":{}}],["put",{"_index":1853,"title":{},"name":{},"text":{"26":{}},"component":{}}],["python",{"_index":2,"title":{"1-1":{},"2-7":{},"4-13":{},"4-14":{},"5-5":{}},"name":{},"text":{"1":{},"2":{},"3":{},"4":{},"5":{},"6":{},"7":{},"20":{},"21":{},"28":{},"29":{}},"component":{}}],["qtconsol",{"_index":1781,"title":{},"name":{},"text":{"20":{}},"component":{}}],["queri",{"_index":48,"title":{"4":{},"4-1":{},"4-11":{},"4-13":{},"4-15":{},"9-20":{},"9-27":{},"9-34":{},"9-41":{},"9-45":{},"9-52":{},"9-59":{},"9-66":{},"9-72":{},"9-76":{},"9-83":{},"9-90":{},"9-97":{},"9-104":{},"9-111":{},"9-118":{},"9-125":{},"9-132":{},"9-136":{},"9-143":{},"9-150":{},"9-157":{},"9-164":{},"9-171":{},"9-178":{},"9-185":{},"9-192":{},"9-196":{},"9-202":{},"9-206":{},"9-213":{},"9-220":{},"9-227":{},"9-234":{},"9-238":{},"9-245":{},"9-252":{},"9-259":{},"9-266":{},"9-273":{},"9-281":{},"9-288":{},"9-295":{},"9-302":{},"9-309":{},"9-316":{},"9-322":{},"9-326":{},"9-333":{},"9-340":{},"9-346":{},"9-350":{},"9-357":{},"9-364":{},"9-371":{},"9-378":{},"9-385":{},"9-392":{},"9-399":{},"9-405":{},"9-412":{},"9-419":{},"9-426":{},"9-433":{},"9-440":{},"9-447":{},"9-454":{},"9-461":{},"9-465":{},"9-472":{},"9-476":{},"9-483":{},"9-490":{},"9-497":{},"9-504":{},"9-508":{},"9-515":{},"9-522":{},"9-526":{},"9-533":{},"9-540":{},"9-547":{},"9-554":{},"9-561":{},"9-567":{},"9-571":{},"9-578":{},"9-585":{},"12-8":{},"19-4":{},"20-7":{},"20-8":{},"20-9":{},"27-1":{},"27-2":{}},"name":{"4":{}},"text":{"1":{},"2":{},"3":{},"4":{},"5":{},"7":{},"12":{},"13":{},"15":{},"17":{},"19":{},"20":{},"21":{},"22":{},"23":{},"24":{},"25":{},"26":{},"27":{},"28":{},"29":{},"30":{}},"component":{}}],["query.create_query(expression=queri",{"_index":569,"title":{},"name":{},"text":{"4":{}},"component":{}}],["query_result",{"_index":1820,"title":{},"name":{},"text":{"20":{}},"component":{}}],["query_result.datafram",{"_index":1821,"title":{},"name":{},"text":{"20":{}},"component":{}}],["query_result.express",{"_index":1822,"title":{},"name":{},"text":{"20":{}},"component":{}}],["queryabl",{"_index":721,"title":{},"name":{},"text":{"5":{}},"component":{}}],["queryrespons",{"_index":113,"title":{},"name":{},"text":{"1":{}},"component":{}}],["question",{"_index":414,"title":{"27":{}},"name":{},"text":{"4":{},"17":{},"28":{}},"component":{}}],["quick",{"_index":402,"title":{"14":{}},"name":{"14":{}},"text":{"4":{},"21":{},"28":{}},"component":{}}],["quickli",{"_index":538,"title":{},"name":{},"text":{"4":{},"21":{},"28":{}},"component":{}}],["quickstart",{"_index":376,"title":{"4-1":{}},"name":{},"text":{"29":{}},"component":{}}],["quid",{"_index":1588,"title":{"15":{}},"name":{},"text":{},"component":{}}],["quot",{"_index":1392,"title":{},"name":{},"text":{"11":{},"27":{}},"component":{}}],["r",{"_index":2084,"title":{},"name":{},"text":{"29":{}},"component":{}}],["rais",{"_index":1158,"title":{},"name":{},"text":{"9":{},"28":{}},"component":{}}],["ram",{"_index":1924,"title":{},"name":{},"text":{"27":{}},"component":{}}],["rand",{"_index":1334,"title":{},"name":{},"text":{"9":{}},"component":{}}],["rang",{"_index":1070,"title":{},"name":{},"text":{"9":{},"10":{},"16":{},"28":{},"29":{}},"component":{}}],["rate",{"_index":1246,"title":{},"name":{},"text":{"9":{},"12":{}},"component":{}}],["rational",{"_index":1658,"title":{},"name":{},"text":{"16":{}},"component":{}}],["raw",{"_index":1877,"title":{},"name":{},"text":{"27":{},"30":{}},"component":{}}],["re",{"_index":370,"title":{},"name":{},"text":{"3":{},"4":{},"5":{},"6":{},"7":{},"9":{},"15":{},"16":{},"20":{},"28":{},"29":{}},"component":{}}],["reach",{"_index":656,"title":{},"name":{},"text":{"4":{}},"component":{}}],["react",{"_index":496,"title":{},"name":{},"text":{"4":{},"27":{},"28":{},"30":{}},"component":{}}],["read",{"_index":249,"title":{},"name":{},"text":{"2":{},"4":{},"5":{},"15":{},"16":{},"19":{},"28":{}},"component":{}}],["readi",{"_index":1724,"title":{},"name":{},"text":{"19":{},"20":{},"29":{},"30":{}},"component":{}}],["readibl",{"_index":1738,"title":{},"name":{},"text":{"19":{}},"component":{}}],["real",{"_index":1491,"title":{"30":{},"30-1":{},"30-2":{},"30-3":{}},"name":{},"text":{"12":{},"22":{},"23":{},"25":{},"27":{},"28":{},"30":{}},"component":{}}],["realli",{"_index":1866,"title":{},"name":{},"text":{"27":{}},"component":{}}],["realtim",{"_index":2141,"title":{},"name":{"30":{}},"text":{},"component":{}}],["reason",{"_index":1660,"title":{},"name":{},"text":{"16":{},"17":{},"20":{},"21":{},"27":{},"28":{}},"component":{}}],["recal",{"_index":686,"title":{},"name":{},"text":{"5":{}},"component":{}}],["reccommend",{"_index":261,"title":{},"name":{},"text":{"2":{}},"component":{}}],["receiv",{"_index":56,"title":{},"name":{},"text":{"1":{},"9":{},"20":{}},"component":{}}],["recent",{"_index":644,"title":{},"name":{},"text":{"4":{},"8":{},"9":{},"10":{},"27":{},"28":{},"30":{}},"component":{}}],["recommend",{"_index":1748,"title":{},"name":{},"text":{"19":{},"29":{}},"component":{}}],["reconcil",{"_index":791,"title":{},"name":{},"text":{"6":{},"7":{}},"component":{}}],["record",{"_index":439,"title":{"18":{},"9-10":{},"9-156":{},"9-411":{},"9-439":{},"9-521":{},"11-3":{},"18-1":{},"18-2":{}},"name":{"18":{}},"text":{"4":{},"9":{},"11":{},"12":{},"14":{},"18":{},"19":{},"20":{},"27":{},"28":{},"30":{}},"component":{}}],["redi",{"_index":101,"title":{"25":{},"25-1":{}},"name":{"25":{}},"text":{"1":{},"25":{}},"component":{}}],["redshift",{"_index":1838,"title":{"24":{},"24-1":{}},"name":{"24":{}},"text":{"24":{}},"component":{}}],["reduc",{"_index":1746,"title":{},"name":{},"text":{"19":{},"27":{}},"component":{}}],["reduct",{"_index":1420,"title":{},"name":{},"text":{"11":{}},"component":{}}],["redund",{"_index":450,"title":{},"name":{},"text":{"4":{}},"component":{}}],["ref:computeservice_query[queri",{"_index":1634,"title":{},"name":{},"text":{"16":{}},"component":{}}],["ref:tableservice[t",{"_index":1632,"title":{},"name":{},"text":{"16":{}},"component":{}}],["ref:viewservice[view",{"_index":1633,"title":{},"name":{},"text":{"16":{}},"component":{}}],["refactor",{"_index":542,"title":{},"name":{},"text":{"4":{}},"component":{}}],["refer",{"_index":212,"title":{},"name":{},"text":{"2":{},"4":{},"6":{},"7":{},"10":{},"14":{},"16":{},"19":{},"20":{}},"component":{}}],["referenc",{"_index":1546,"title":{},"name":{},"text":{"14":{},"16":{}},"component":{}}],["reflect",{"_index":733,"title":{"6-11":{},"7-11":{}},"name":{},"text":{"12":{},"27":{},"28":{}},"component":{}}],["refund",{"_index":1968,"title":{},"name":{},"text":{"27":{}},"component":{}}],["regardless",{"_index":2188,"title":{},"name":{},"text":{"30":{}},"component":{}}],["region",{"_index":275,"title":{},"name":{},"text":{"2":{}},"component":{}}],["regress",{"_index":2115,"title":{},"name":{},"text":{"29":{}},"component":{}}],["regroup",{"_index":1321,"title":{},"name":{},"text":{"9":{}},"component":{}}],["rel",{"_index":1736,"title":{},"name":{},"text":{"19":{},"20":{},"28":{}},"component":{}}],["relat",{"_index":422,"title":{"27-4":{}},"name":{},"text":{"4":{},"5":{},"12":{},"14":{},"19":{},"28":{}},"component":{}}],["relationship",{"_index":1880,"title":{},"name":{},"text":{"27":{}},"component":{}}],["releas",{"_index":129,"title":{},"name":{},"text":{"1":{},"19":{},"20":{}},"component":{}}],["relev",{"_index":2203,"title":{},"name":{},"text":{"31":{}},"component":{}}],["remain",{"_index":1788,"title":{},"name":{},"text":{"20":{}},"component":{}}],["remot",{"_index":262,"title":{},"name":{},"text":{"2":{},"29":{}},"component":{}}],["remov",{"_index":160,"title":{"18-4":{}},"name":{},"text":{"1":{},"5":{},"9":{},"16":{},"18":{},"19":{}},"component":{}}],["remove_field",{"_index":945,"title":{"9-408":{}},"name":{},"text":{"9":{},"18":{}},"component":{}}],["remove_fields({nam",{"_index":1699,"title":{},"name":{},"text":{"18":{}},"component":{}}],["render",{"_index":57,"title":{},"name":{},"text":{"1":{},"20":{}},"component":{}}],["repeat",{"_index":92,"title":{"8-6":{}},"name":{},"text":{"1":{},"2":{},"4":{},"16":{},"20":{}},"component":{}}],["repeatedli",{"_index":1862,"title":{},"name":{},"text":{"27":{}},"component":{}}],["replac",{"_index":18,"title":{},"name":{},"text":{"1":{},"13":{},"20":{},"26":{}},"component":{}}],["report",{"_index":1531,"title":{},"name":{},"text":{"14":{},"17":{},"20":{},"29":{}},"component":{}}],["repositori",{"_index":132,"title":{},"name":{},"text":{"1":{}},"component":{}}],["repres",{"_index":666,"title":{},"name":{},"text":{"5":{},"9":{},"11":{},"12":{}},"component":{}}],["represent",{"_index":1869,"title":{},"name":{},"text":{"27":{}},"component":{}}],["request",{"_index":654,"title":{},"name":{},"text":{"4":{},"16":{},"17":{},"29":{}},"component":{}}],["request_detail",{"_index":583,"title":{},"name":{},"text":{"4":{},"20":{}},"component":{}}],["request_id",{"_index":584,"title":{},"name":{},"text":{"4":{},"20":{}},"component":{}}],["requests.get(frauds_url",{"_index":2094,"title":{},"name":{},"text":{"29":{}},"component":{}}],["requests.get(purchases_url",{"_index":2085,"title":{},"name":{},"text":{"29":{}},"component":{}}],["requir",{"_index":278,"title":{},"name":{},"text":{"2":{},"3":{},"5":{},"6":{},"7":{},"11":{},"13":{},"14":{},"16":{},"17":{},"19":{},"20":{},"27":{},"28":{}},"component":{}}],["reset",{"_index":475,"title":{},"name":{},"text":{"4":{},"9":{}},"component":{}}],["resolut",{"_index":1599,"title":{"16-6":{}},"name":{},"text":{"16":{},"27":{}},"component":{}}],["resourc",{"_index":184,"title":{"19-2":{}},"name":{},"text":{"1":{},"6":{},"7":{},"19":{}},"component":{}}],["resp",{"_index":568,"title":{},"name":{},"text":{"4":{}},"component":{}}],["respect",{"_index":466,"title":{},"name":{},"text":{"4":{}},"component":{}}],["respons",{"_index":365,"title":{},"name":{},"text":{"3":{},"7":{},"19":{},"20":{}},"component":{}}],["rest",{"_index":1815,"title":{},"name":{},"text":{"20":{}},"component":{}}],["restrict",{"_index":812,"title":{},"name":{},"text":{"7":{},"11":{}},"component":{}}],["result",{"_index":58,"title":{"4-19":{},"9-18":{},"9-25":{},"9-32":{},"9-39":{},"9-50":{},"9-57":{},"9-64":{},"9-70":{},"9-81":{},"9-88":{},"9-95":{},"9-102":{},"9-109":{},"9-116":{},"9-123":{},"9-130":{},"9-141":{},"9-148":{},"9-155":{},"9-162":{},"9-169":{},"9-176":{},"9-183":{},"9-190":{},"9-200":{},"9-211":{},"9-218":{},"9-225":{},"9-232":{},"9-243":{},"9-250":{},"9-257":{},"9-264":{},"9-271":{},"9-279":{},"9-286":{},"9-293":{},"9-300":{},"9-307":{},"9-314":{},"9-320":{},"9-331":{},"9-338":{},"9-344":{},"9-355":{},"9-362":{},"9-369":{},"9-376":{},"9-383":{},"9-390":{},"9-397":{},"9-410":{},"9-417":{},"9-424":{},"9-431":{},"9-438":{},"9-445":{},"9-452":{},"9-459":{},"9-470":{},"9-481":{},"9-488":{},"9-495":{},"9-502":{},"9-513":{},"9-520":{},"9-531":{},"9-538":{},"9-545":{},"9-552":{},"9-559":{},"9-565":{},"9-576":{},"9-583":{},"12-8":{},"17-4":{},"20-10":{},"20-12":{}},"name":{},"text":{"1":{},"2":{},"3":{},"4":{},"5":{},"6":{},"7":{},"8":{},"9":{},"10":{},"11":{},"12":{},"13":{},"14":{},"15":{},"16":{},"17":{},"18":{},"19":{},"20":{},"21":{},"22":{},"23":{},"24":{},"25":{},"26":{},"27":{},"28":{},"29":{},"30":{}},"component":{}}],["result_behavior",{"_index":82,"title":{},"name":{},"text":{"1":{}},"component":{}}],["result_behavior=\"fin",{"_index":570,"title":{},"name":{},"text":{"4":{}},"component":{}}],["result_url",{"_index":116,"title":{},"name":{},"text":{"1":{}},"component":{}}],["retain",{"_index":861,"title":{},"name":{},"text":{"8":{}},"component":{}}],["retriev",{"_index":1229,"title":{},"name":{},"text":{"9":{}},"component":{}}],["return",{"_index":108,"title":{"20-11":{}},"name":{},"text":{"1":{},"3":{},"4":{},"6":{},"7":{},"9":{},"12":{},"13":{},"19":{},"20":{},"24":{},"26":{},"27":{}},"component":{}}],["review",{"_index":444,"title":{},"name":{},"text":{"4":{},"9":{},"12":{},"13":{},"30":{}},"component":{}}],["review.star",{"_index":435,"title":{},"name":{},"text":{"4":{},"10":{}},"component":{}}],["reviewer_avg",{"_index":1518,"title":{},"name":{},"text":{"13":{}},"component":{}}],["reviewer_count",{"_index":1520,"title":{},"name":{},"text":{"13":{}},"component":{}}],["review’",{"_index":1508,"title":{},"name":{},"text":{"13":{}},"component":{}}],["rfc3330",{"_index":230,"title":{},"name":{},"text":{"2":{}},"component":{}}],["rfc3339",{"_index":1431,"title":{},"name":{},"text":{"11":{}},"component":{}}],["rh",{"_index":1619,"title":{},"name":{},"text":{"16":{}},"component":{}}],["rich",{"_index":1602,"title":{},"name":{},"text":{"16":{},"20":{},"27":{}},"component":{}}],["right",{"_index":350,"title":{},"name":{},"text":{"3":{},"6":{},"7":{},"9":{},"14":{},"16":{},"19":{},"20":{},"28":{}},"component":{}}],["rise",{"_index":2062,"title":{},"name":{},"text":{"28":{}},"component":{}}],["risk",{"_index":520,"title":{},"name":{},"text":{"4":{}},"component":{}}],["rld",{"_index":1294,"title":{},"name":{},"text":{"9":{}},"component":{}}],["roadmap",{"_index":1952,"title":{},"name":{},"text":{"27":{}},"component":{}}],["role",{"_index":280,"title":{},"name":{},"text":{"2":{},"17":{}},"component":{}}],["roles.html",{"_index":283,"title":{},"name":{},"text":{"2":{}},"component":{}}],["root",{"_index":957,"title":{"9-482":{}},"name":{},"text":{"9":{}},"component":{}}],["round",{"_index":946,"title":{"9-415":{},"9-418":{}},"name":{},"text":{"9":{}},"component":{}}],["row",{"_index":79,"title":{"4-7":{},"4-20":{},"20-11":{}},"name":{},"text":{"1":{},"2":{},"4":{},"5":{},"6":{},"9":{},"12":{},"13":{},"19":{},"20":{},"28":{},"30":{}},"component":{}}],["rth",{"_index":1295,"title":{},"name":{},"text":{"9":{}},"component":{}}],["rule",{"_index":1123,"title":{"11-5":{}},"name":{},"text":{"9":{},"11":{},"13":{}},"component":{}}],["rules[promot",{"_index":1006,"title":{},"name":{},"text":{"9":{}},"component":{}}],["run",{"_index":31,"title":{},"name":{},"text":{"1":{},"2":{},"4":{},"5":{},"6":{},"7":{},"19":{},"20":{},"21":{},"31":{}},"component":{}}],["runtim",{"_index":36,"title":{},"name":{},"text":{"1":{}},"component":{}}],["rust",{"_index":2070,"title":{},"name":{},"text":{"28":{}},"component":{}}],["ryan",{"_index":1028,"title":{},"name":{},"text":{"9":{}},"component":{}}],["s",{"_index":143,"title":{},"name":{},"text":{"1":{},"9":{},"19":{}},"component":{}}],["s/x86_64/amd64",{"_index":1712,"title":{},"name":{},"text":{"19":{}},"component":{}}],["s3",{"_index":206,"title":{"2-6":{}},"name":{},"text":{"2":{}},"component":{}}],["s3://mi",{"_index":337,"title":{},"name":{},"text":{"3":{}},"component":{}}],["sacrif",{"_index":1917,"title":{},"name":{},"text":{"27":{}},"component":{}}],["safe",{"_index":420,"title":{},"name":{},"text":{"4":{},"16":{}},"component":{}}],["safeti",{"_index":2071,"title":{},"name":{},"text":{"28":{}},"component":{}}],["same",{"_index":210,"title":{},"name":{},"text":{"2":{},"4":{},"5":{},"6":{},"7":{},"8":{},"9":{},"10":{},"11":{},"12":{},"13":{},"14":{},"16":{},"18":{},"20":{},"27":{},"28":{},"30":{}},"component":{}}],["sampl",{"_index":678,"title":{},"name":{},"text":{"5":{},"9":{},"20":{},"21":{}},"component":{}}],["save",{"_index":1725,"title":{},"name":{},"text":{"19":{}},"component":{}}],["saw",{"_index":2049,"title":{},"name":{},"text":{"28":{}},"component":{}}],["scalabl",{"_index":691,"title":{"27-3":{}},"name":{},"text":{"5":{},"22":{},"24":{},"26":{}},"component":{}}],["scalar",{"_index":1372,"title":{"11-2":{}},"name":{},"text":{"11":{}},"component":{}}],["scale",{"_index":1954,"title":{},"name":{},"text":{"27":{}},"component":{}}],["scaler",{"_index":2132,"title":{},"name":{},"text":{"29":{}},"component":{}}],["scaler.transform(x_train",{"_index":2135,"title":{},"name":{},"text":{"29":{}},"component":{}}],["scaler.transform(x_valid",{"_index":2137,"title":{},"name":{},"text":{"29":{}},"component":{}}],["schema",{"_index":218,"title":{},"name":{},"text":{"2":{},"6":{},"19":{},"20":{}},"component":{}}],["scope",{"_index":1473,"title":{},"name":{},"text":{"12":{},"13":{},"14":{}},"component":{}}],["scratch",{"_index":2042,"title":{},"name":{},"text":{"28":{}},"component":{}}],["script",{"_index":178,"title":{},"name":{},"text":{"1":{}},"component":{}}],["sea",{"_index":1458,"title":{},"name":{},"text":{"12":{}},"component":{}}],["search",{"_index":363,"title":{},"name":{},"text":{"3":{},"6":{},"7":{}},"component":{}}],["seattl",{"_index":1461,"title":{},"name":{},"text":{"12":{}},"component":{}}],["second",{"_index":618,"title":{"9-422":{},"9-432":{}},"name":{},"text":{"4":{},"8":{},"9":{},"11":{},"12":{},"13":{},"16":{},"20":{},"27":{},"28":{},"30":{}},"component":{}}],["seconds_between",{"_index":947,"title":{"9-429":{}},"name":{},"text":{"9":{}},"component":{}}],["secret",{"_index":273,"title":{},"name":{},"text":{"2":{}},"component":{}}],["section",{"_index":130,"title":{},"name":{},"text":{"1":{},"2":{},"16":{},"19":{},"20":{}},"component":{}}],["secur",{"_index":158,"title":{},"name":{},"text":{"1":{},"19":{}},"component":{}}],["sed",{"_index":1711,"title":{},"name":{},"text":{"19":{}},"component":{}}],["see",{"_index":171,"title":{},"name":{},"text":{"1":{},"2":{},"4":{},"6":{},"7":{},"9":{},"10":{},"16":{},"17":{},"19":{},"20":{},"27":{},"28":{},"30":{}},"component":{}}],["seem",{"_index":651,"title":{},"name":{},"text":{"4":{},"14":{},"28":{}},"component":{}}],["seemingli",{"_index":1681,"title":{},"name":{},"text":{"17":{}},"component":{}}],["seen",{"_index":849,"title":{},"name":{},"text":{"8":{},"10":{},"30":{}},"component":{}}],["segment",{"_index":2204,"title":{},"name":{},"text":{"31":{}},"component":{}}],["select",{"_index":949,"title":{"9-439":{},"18-3":{}},"name":{},"text":{"16":{},"18":{},"20":{},"26":{},"28":{}},"component":{}}],["select_field",{"_index":948,"title":{"9-436":{}},"name":{},"text":{"9":{},"18":{}},"component":{}}],["select_fields({nam",{"_index":1698,"title":{},"name":{},"text":{"18":{}},"component":{}}],["self",{"_index":1662,"title":{},"name":{},"text":{"16":{}},"component":{}}],["sell",{"_index":1532,"title":{},"name":{},"text":{"14":{}},"component":{}}],["semant",{"_index":1884,"title":{},"name":{},"text":{"27":{}},"component":{}}],["sens",{"_index":1357,"title":{},"name":{},"text":{"10":{},"27":{}},"component":{}}],["separ",{"_index":1826,"title":{},"name":{},"text":{"21":{},"29":{},"31":{}},"component":{}}],["sequenc",{"_index":888,"title":{},"name":{},"text":{"8":{},"16":{},"28":{},"30":{}},"component":{}}],["sequenti",{"_index":559,"title":{},"name":{},"text":{"4":{},"14":{},"20":{},"27":{},"28":{}},"component":{}}],["seri",{"_index":491,"title":{},"name":{},"text":{"4":{},"15":{},"19":{},"27":{}},"component":{}}],["serv",{"_index":123,"title":{},"name":{},"text":{"1":{},"19":{}},"component":{}}],["server",{"_index":191,"title":{},"name":{},"text":{"1":{},"6":{},"7":{},"27":{}},"component":{}}],["server’",{"_index":789,"title":{},"name":{},"text":{"6":{},"7":{}},"component":{}}],["servic",{"_index":32,"title":{},"name":{},"text":{"1":{},"2":{},"17":{},"19":{},"27":{}},"component":{}}],["session",{"_index":23,"title":{},"name":{},"text":{"1":{},"2":{},"3":{},"5":{},"6":{},"7":{},"20":{}},"component":{}}],["set",{"_index":182,"title":{},"name":{},"text":{"1":{},"2":{},"3":{},"4":{},"5":{},"6":{},"7":{},"8":{},"9":{},"10":{},"11":{},"12":{},"13":{},"14":{},"16":{},"17":{},"19":{},"20":{},"24":{},"26":{},"27":{},"29":{},"30":{}},"component":{}}],["set_default_slic",{"_index":716,"title":{},"name":{},"text":{"5":{}},"component":{}}],["setup",{"_index":1797,"title":{"29-1":{}},"name":{},"text":{"20":{}},"component":{}}],["sever",{"_index":1376,"title":{},"name":{},"text":{"11":{},"21":{}},"component":{}}],["sf_tut_stag",{"_index":1854,"title":{},"name":{},"text":{"26":{}},"component":{}}],["sf_tut_stage/.parquet",{"_index":1855,"title":{},"name":{},"text":{"26":{}},"component":{}}],["sh",{"_index":1717,"title":{},"name":{},"text":{"19":{}},"component":{}}],["share",{"_index":575,"title":{},"name":{},"text":{"4":{},"7":{},"19":{},"20":{},"27":{}},"component":{}}],["shell",{"_index":180,"title":{},"name":{},"text":{"1":{}},"component":{}}],["shift",{"_index":517,"title":{"9-446":{},"9-453":{},"14-6":{},"28-4":{},"30-6":{}},"name":{},"text":{"4":{},"9":{},"14":{},"20":{},"28":{},"29":{},"30":{}},"component":{}}],["shift_bi",{"_index":530,"title":{},"name":{},"text":{"4":{}},"component":{}}],["shift_by(days(1",{"_index":526,"title":{},"name":{},"text":{"4":{},"20":{}},"component":{}}],["shift_by(hours(1",{"_index":2054,"title":{},"name":{},"text":{"28":{},"30":{}},"component":{}}],["shift_to",{"_index":950,"title":{"9-443":{}},"name":{},"text":{"9":{}},"component":{}}],["shift_to(shiftedcustomeraveragetim",{"_index":1575,"title":{},"name":{},"text":{"14":{}},"component":{}}],["shift_to(shiftedpurchasetim",{"_index":1573,"title":{},"name":{},"text":{"14":{}},"component":{}}],["shift_to(time_of($input",{"_index":2108,"title":{},"name":{},"text":{"29":{}},"component":{}}],["shift_until",{"_index":951,"title":{"9-450":{}},"name":{},"text":{"9":{}},"component":{}}],["shiftedcustomeraveragepurchas",{"_index":1574,"title":{},"name":{},"text":{"14":{}},"component":{}}],["shiftedcustomeraveragetim",{"_index":1570,"title":{},"name":{},"text":{"14":{}},"component":{}}],["shiftedpurchasetim",{"_index":1567,"title":{},"name":{},"text":{"14":{}},"component":{}}],["shiftedpurchasetot",{"_index":1572,"title":{},"name":{},"text":{"14":{}},"component":{}}],["shorter",{"_index":1291,"title":{},"name":{},"text":{"9":{}},"component":{}}],["shouldn’t",{"_index":2068,"title":{},"name":{},"text":{"28":{}},"component":{}}],["show",{"_index":93,"title":{},"name":{},"text":{"1":{},"9":{},"11":{},"28":{},"29":{},"30":{}},"component":{}}],["shown",{"_index":782,"title":{},"name":{},"text":{"6":{},"7":{},"9":{},"10":{},"11":{},"19":{},"20":{}},"component":{}}],["side",{"_index":993,"title":{},"name":{},"text":{"9":{},"14":{}},"component":{}}],["sign",{"_index":1384,"title":{},"name":{},"text":{"11":{},"17":{}},"component":{}}],["signatur",{"_index":1373,"title":{"11-7":{}},"name":{},"text":{"11":{}},"component":{}}],["significantli",{"_index":671,"title":{},"name":{},"text":{"5":{},"13":{},"28":{}},"component":{}}],["signups_per_hour",{"_index":500,"title":{},"name":{},"text":{"4":{}},"component":{}}],["simd",{"_index":2075,"title":{},"name":{},"text":{"28":{}},"component":{}}],["similar",{"_index":172,"title":{},"name":{},"text":{"1":{},"3":{},"14":{},"16":{},"19":{},"20":{},"27":{}},"component":{}}],["similarli",{"_index":1320,"title":{},"name":{},"text":{"9":{},"10":{},"16":{}},"component":{}}],["simpl",{"_index":388,"title":{"4-10":{},"14-2":{}},"name":{},"text":{"4":{},"10":{},"11":{},"13":{},"14":{},"16":{},"17":{},"20":{},"21":{},"27":{},"28":{},"29":{},"30":{}},"component":{}}],["simpli",{"_index":889,"title":{},"name":{},"text":{"8":{}},"component":{}}],["simplifi",{"_index":47,"title":{},"name":{},"text":{"1":{},"12":{},"28":{}},"component":{}}],["since(daili",{"_index":1049,"title":{},"name":{},"text":{"9":{}},"component":{}}],["since(hourli",{"_index":1195,"title":{},"name":{},"text":{"9":{}},"component":{}}],["since(yearli",{"_index":868,"title":{},"name":{},"text":{"8":{},"9":{}},"component":{}}],["singl",{"_index":441,"title":{},"name":{},"text":{"4":{},"11":{},"17":{},"18":{},"19":{},"20":{},"27":{},"28":{},"30":{}},"component":{}}],["sink",{"_index":1833,"title":{},"name":{},"text":{"22":{},"25":{}},"component":{}}],["size",{"_index":658,"title":{},"name":{},"text":{"4":{},"11":{},"27":{},"29":{}},"component":{}}],["sklearn",{"_index":2118,"title":{},"name":{},"text":{"29":{}},"component":{}}],["sklearn.linear_model",{"_index":2116,"title":{},"name":{},"text":{"29":{}},"component":{}}],["slice",{"_index":663,"title":{"5":{}},"name":{"5":{}},"text":{"5":{}},"component":{}}],["slide",{"_index":954,"title":{"9-468":{},"9-471":{},"9-475":{}},"name":{},"text":{"9":{},"11":{}},"component":{}}],["sliding(2",{"_index":857,"title":{},"name":{},"text":{"8":{},"9":{}},"component":{}}],["sliding(3",{"_index":1267,"title":{},"name":{},"text":{"9":{}},"component":{}}],["sliding(n",{"_index":859,"title":{},"name":{},"text":{"8":{}},"component":{}}],["slightli",{"_index":2029,"title":{},"name":{},"text":{"28":{}},"component":{}}],["small",{"_index":1735,"title":{},"name":{},"text":{"19":{},"20":{}},"component":{}}],["smaller",{"_index":668,"title":{},"name":{},"text":{"5":{},"16":{}},"component":{}}],["smallest",{"_index":982,"title":{},"name":{},"text":{"9":{},"11":{}},"component":{}}],["smith",{"_index":1697,"title":{},"name":{},"text":{"18":{}},"component":{}}],["snowflak",{"_index":1847,"title":{"26":{},"26-1":{}},"name":{"26":{}},"text":{"26":{}},"component":{}}],["softwar",{"_index":1751,"title":{},"name":{},"text":{"20":{}},"component":{}}],["solut",{"_index":1986,"title":{"28-3":{},"28-4":{}},"name":{},"text":{"27":{}},"component":{}}],["solv",{"_index":1664,"title":{"17-1":{}},"name":{},"text":{"28":{}},"component":{}}],["someth",{"_index":497,"title":{},"name":{},"text":{"4":{},"12":{},"13":{},"14":{},"28":{}},"component":{}}],["sophist",{"_index":1818,"title":{},"name":{},"text":{"20":{}},"component":{}}],["sort",{"_index":1949,"title":{},"name":{},"text":{"27":{}},"component":{}}],["sourc",{"_index":507,"title":{},"name":{},"text":{"4":{},"6":{},"17":{},"19":{},"20":{},"22":{},"23":{},"27":{},"28":{}},"component":{}}],["span",{"_index":2098,"title":{},"name":{},"text":{"29":{},"30":{}},"component":{}}],["spec",{"_index":731,"title":{"6-7":{},"6-9":{},"6-10":{},"6-11":{},"7-7":{},"7-9":{},"7-10":{},"7-11":{}},"name":{},"text":{"6":{},"7":{},"19":{}},"component":{}}],["spec.yaml",{"_index":800,"title":{},"name":{},"text":{"6":{},"7":{},"19":{}},"component":{}}],["special",{"_index":1606,"title":{},"name":{},"text":{"16":{},"20":{},"27":{}},"component":{}}],["specif",{"_index":292,"title":{"28-4":{}},"name":{},"text":{"2":{},"4":{},"6":{},"7":{},"9":{},"10":{},"11":{},"12":{},"14":{},"18":{},"21":{},"27":{},"28":{},"30":{}},"component":{}}],["specifi",{"_index":179,"title":{},"name":{},"text":{"1":{},"2":{},"4":{},"6":{},"7":{},"9":{},"11":{},"18":{},"19":{},"20":{},"30":{}},"component":{}}],["spend",{"_index":1902,"title":{},"name":{},"text":{"27":{},"28":{}},"component":{}}],["spend_since_last_review",{"_index":471,"title":{},"name":{},"text":{"4":{}},"component":{}}],["spent",{"_index":2182,"title":{},"name":{},"text":{"30":{}},"component":{}}],["spongebob",{"_index":628,"title":{},"name":{},"text":{"4":{}},"component":{}}],["spooki",{"_index":535,"title":{},"name":{},"text":{"4":{}},"component":{}}],["sql",{"_index":1563,"title":{},"name":{},"text":{"14":{},"17":{},"24":{},"26":{},"27":{},"28":{}},"component":{}}],["sql’",{"_index":2008,"title":{},"name":{},"text":{"28":{}},"component":{}}],["sqrt",{"_index":955,"title":{"9-479":{}},"name":{},"text":{"9":{}},"component":{}}],["sqrt(input.a",{"_index":1279,"title":{},"name":{},"text":{"9":{}},"component":{}}],["squar",{"_index":956,"title":{"9-482":{}},"name":{},"text":{"9":{}},"component":{}}],["squidward",{"_index":1257,"title":{},"name":{},"text":{"9":{},"12":{}},"component":{}}],["stage",{"_index":1850,"title":{},"name":{},"text":{"26":{}},"component":{}}],["standard",{"_index":959,"title":{"9-489":{}},"name":{},"text":{"9":{},"13":{},"16":{},"27":{},"31":{}},"component":{}}],["star",{"_index":447,"title":{},"name":{},"text":{"4":{},"9":{},"12":{},"13":{}},"component":{}}],["start",{"_index":196,"title":{"14":{},"21":{}},"name":{"14":{}},"text":{"1":{},"3":{},"4":{},"6":{},"7":{},"9":{},"11":{},"12":{},"14":{},"16":{},"19":{},"20":{},"21":{},"27":{},"28":{},"29":{},"30":{},"31":{}},"component":{}}],["start=0",{"_index":1626,"title":{},"name":{},"text":{"16":{}},"component":{}}],["state",{"_index":377,"title":{"4-3":{}},"name":{},"text":{"4":{},"6":{},"7":{},"12":{},"17":{},"19":{},"21":{},"31":{}},"component":{}}],["statement",{"_index":1008,"title":{},"name":{},"text":{"9":{}},"component":{}}],["static",{"_index":1867,"title":{},"name":{},"text":{"27":{}},"component":{}}],["statist",{"_index":345,"title":{},"name":{},"text":{"3":{},"5":{},"7":{}},"component":{}}],["stddev",{"_index":958,"title":{"9-486":{}},"name":{},"text":{"9":{}},"component":{}}],["stddev(input.valu",{"_index":1282,"title":{},"name":{},"text":{"9":{}},"component":{}}],["stdin",{"_index":1742,"title":{},"name":{},"text":{"19":{}},"component":{}}],["stdout",{"_index":1732,"title":{},"name":{},"text":{"19":{}},"component":{}}],["step",{"_index":1722,"title":{"28-6":{},"30-4":{},"30-5":{},"30-6":{},"30-7":{}},"name":{},"text":{"19":{},"20":{},"28":{},"30":{}},"component":{}}],["stop",{"_index":876,"title":{},"name":{},"text":{"8":{},"20":{}},"component":{}}],["storag",{"_index":204,"title":{"2-5":{},"2-6":{}},"name":{},"text":{"2":{},"6":{},"19":{},"28":{}},"component":{}}],["store",{"_index":207,"title":{"3-3":{}},"name":{},"text":{"2":{},"3":{},"6":{},"14":{},"19":{},"20":{},"25":{},"27":{},"28":{},"29":{},"30":{}},"component":{}}],["stori",{"_index":2152,"title":{},"name":{},"text":{"30":{}},"component":{}}],["stream",{"_index":840,"title":{"17-3":{}},"name":{},"text":{"8":{},"10":{},"16":{},"17":{},"23":{},"27":{},"28":{}},"component":{}}],["string",{"_index":187,"title":{"9-11":{},"9-191":{},"9-251":{}},"name":{},"text":{"1":{},"2":{},"3":{},"5":{},"6":{},"7":{},"9":{},"11":{},"12":{},"14":{},"16":{},"18":{},"19":{},"20":{},"29":{}},"component":{}}],["strive",{"_index":1659,"title":{},"name":{},"text":{"16":{}},"component":{}}],["structur",{"_index":734,"title":{},"name":{},"text":{"6":{},"15":{},"19":{},"20":{},"25":{}},"component":{}}],["style",{"_index":883,"title":{},"name":{},"text":{"8":{}},"component":{}}],["sub",{"_index":961,"title":{"9-493":{}},"name":{},"text":{"9":{},"19":{}},"component":{}}],["subexpress",{"_index":1636,"title":{},"name":{},"text":{"16":{}},"component":{}}],["subsequ",{"_index":90,"title":{},"name":{},"text":{"1":{},"5":{},"7":{},"13":{},"20":{}},"component":{}}],["subset",{"_index":669,"title":{},"name":{},"text":{"5":{}},"component":{}}],["subsort",{"_index":231,"title":{},"name":{},"text":{"2":{},"6":{},"9":{}},"component":{}}],["subsort_column_nam",{"_index":743,"title":{},"name":{},"text":{"6":{},"20":{},"29":{}},"component":{}}],["subsort_id",{"_index":589,"title":{},"name":{},"text":{"4":{},"6":{},"19":{},"20":{},"29":{}},"component":{}}],["subsortcolumnnam",{"_index":778,"title":{},"name":{},"text":{"6":{}},"component":{}}],["substitut",{"_index":827,"title":{},"name":{},"text":{"7":{}},"component":{}}],["substr",{"_index":962,"title":{"9-500":{},"9-503":{},"9-507":{}},"name":{},"text":{"9":{},"16":{}},"component":{}}],["substring(",{"_index":1615,"title":{},"name":{},"text":{"16":{}},"component":{}}],["substring(\"input",{"_index":1616,"title":{},"name":{},"text":{"16":{}},"component":{}}],["substring(start",{"_index":1293,"title":{},"name":{},"text":{"9":{}},"component":{}}],["substring(zipcod",{"_index":1625,"title":{},"name":{},"text":{"16":{}},"component":{}}],["subtract",{"_index":531,"title":{"9-496":{}},"name":{},"text":{"4":{},"9":{}},"component":{}}],["success",{"_index":807,"title":{},"name":{},"text":{"6":{},"16":{},"19":{}},"component":{}}],["successfulli",{"_index":1432,"title":{},"name":{},"text":{"11":{}},"component":{}}],["succinctli",{"_index":1593,"title":{},"name":{},"text":{"15":{}},"component":{}}],["such",{"_index":264,"title":{},"name":{},"text":{"2":{},"4":{},"9":{},"10":{},"11":{},"14":{},"18":{},"19":{},"27":{},"29":{}},"component":{}}],["suffici",{"_index":1916,"title":{},"name":{},"text":{"27":{}},"component":{}}],["suffix",{"_index":963,"title":{"9-503":{}},"name":{},"text":{},"component":{}}],["suit",{"_index":2101,"title":{},"name":{},"text":{"29":{}},"component":{}}],["sum",{"_index":843,"title":{"9-511":{},"9-514":{}},"name":{},"text":{"8":{},"9":{},"10":{},"12":{},"13":{},"28":{},"30":{}},"component":{}}],["sum($input.n",{"_index":1325,"title":{},"name":{},"text":{"9":{}},"component":{}}],["sum(amount",{"_index":2028,"title":{},"name":{},"text":{"28":{}},"component":{}}],["sum(gamevictory.dur",{"_index":2184,"title":{},"name":{},"text":{"30":{}},"component":{}}],["sum(input.n",{"_index":1048,"title":{},"name":{},"text":{"9":{}},"component":{}}],["sum(input.valu",{"_index":1300,"title":{},"name":{},"text":{"9":{}},"component":{}}],["sum(window",{"_index":862,"title":{},"name":{},"text":{"8":{}},"component":{}}],["sum(window=sliding(2",{"_index":486,"title":{},"name":{},"text":{"4":{}},"component":{}}],["sum_n_by_other_key",{"_index":1324,"title":{},"name":{},"text":{"9":{}},"component":{}}],["summar",{"_index":1423,"title":{},"name":{},"text":{"11":{}},"component":{}}],["summari",{"_index":970,"title":{},"name":{},"text":{"9":{}},"component":{}}],["suppli",{"_index":762,"title":{},"name":{},"text":{"6":{},"24":{},"26":{}},"component":{}}],["support",{"_index":41,"title":{"3-1":{}},"name":{},"text":{"1":{},"2":{},"3":{},"5":{},"9":{},"13":{},"16":{},"27":{},"28":{}},"component":{}}],["surpris",{"_index":1360,"title":{},"name":{},"text":{"10":{},"19":{}},"component":{}}],["surprisingli",{"_index":2045,"title":{},"name":{},"text":{"28":{}},"component":{}}],["swipe",{"_index":1970,"title":{},"name":{},"text":{"27":{}},"component":{}}],["switch",{"_index":1007,"title":{},"name":{},"text":{"9":{}},"component":{}}],["sync",{"_index":183,"title":{},"name":{},"text":{"1":{},"6":{},"7":{},"19":{}},"component":{}}],["synonym",{"_index":811,"title":{},"name":{},"text":{"7":{}},"component":{}}],["syntax",{"_index":375,"title":{"16":{},"4-1":{},"4-10":{},"16-5":{},"16-7":{}},"name":{"16":{}},"text":{"4":{},"9":{},"11":{},"14":{},"15":{},"16":{},"19":{},"27":{}},"component":{}}],["system",{"_index":256,"title":{},"name":{},"text":{"2":{},"6":{},"7":{},"11":{},"12":{},"17":{},"19":{},"20":{},"27":{},"28":{},"31":{}},"component":{}}],["system—​th",{"_index":1757,"title":{},"name":{},"text":{"20":{}},"component":{}}],["t",{"_index":757,"title":{},"name":{},"text":{"6":{}},"component":{}}],["t1",{"_index":1100,"title":{},"name":{},"text":{"9":{}},"component":{}}],["t2",{"_index":1101,"title":{},"name":{},"text":{"9":{}},"component":{}}],["tabl",{"_index":201,"title":{"2":{},"6":{},"2-2":{},"2-3":{},"2-7":{},"2-8":{},"4-2":{},"4-12":{},"4-17":{},"6-1":{},"6-2":{},"6-3":{},"6-4":{},"6-5":{},"6-6":{},"6-7":{},"6-8":{},"6-9":{},"6-10":{},"9-21":{},"9-28":{},"9-35":{},"9-42":{},"9-46":{},"9-53":{},"9-60":{},"9-67":{},"9-73":{},"9-77":{},"9-84":{},"9-91":{},"9-98":{},"9-105":{},"9-112":{},"9-119":{},"9-126":{},"9-133":{},"9-137":{},"9-144":{},"9-151":{},"9-158":{},"9-165":{},"9-172":{},"9-179":{},"9-186":{},"9-193":{},"9-197":{},"9-203":{},"9-207":{},"9-214":{},"9-221":{},"9-228":{},"9-235":{},"9-239":{},"9-246":{},"9-253":{},"9-260":{},"9-267":{},"9-274":{},"9-275":{},"9-282":{},"9-289":{},"9-296":{},"9-303":{},"9-310":{},"9-317":{},"9-323":{},"9-327":{},"9-334":{},"9-341":{},"9-347":{},"9-351":{},"9-358":{},"9-365":{},"9-372":{},"9-379":{},"9-386":{},"9-393":{},"9-400":{},"9-406":{},"9-413":{},"9-420":{},"9-427":{},"9-434":{},"9-441":{},"9-448":{},"9-455":{},"9-462":{},"9-466":{},"9-473":{},"9-477":{},"9-484":{},"9-491":{},"9-498":{},"9-505":{},"9-509":{},"9-516":{},"9-523":{},"9-527":{},"9-534":{},"9-541":{},"9-548":{},"9-555":{},"9-562":{},"9-568":{},"9-572":{},"9-579":{},"9-586":{},"11-6":{},"12-5":{},"19-3":{},"20-4":{},"20-5":{},"20-10":{}},"name":{"6":{}},"text":{"2":{},"3":{},"4":{},"5":{},"6":{},"7":{},"9":{},"10":{},"11":{},"12":{},"13":{},"14":{},"17":{},"19":{},"20":{},"24":{},"26":{},"27":{},"28":{},"29":{},"30":{}},"component":{}}],["table'",{"_index":748,"title":{},"name":{},"text":{"6":{},"19":{},"20":{}},"component":{}}],["table.create_t",{"_index":747,"title":{},"name":{},"text":{"6":{},"20":{},"29":{}},"component":{}}],["table.delete_table(t",{"_index":756,"title":{},"name":{},"text":{"6":{}},"component":{}}],["table.get_table(t",{"_index":755,"title":{},"name":{},"text":{"6":{}},"component":{}}],["table.list_t",{"_index":754,"title":{},"name":{},"text":{"6":{}},"component":{}}],["table.load",{"_index":241,"title":{},"name":{},"text":{"2":{}},"component":{}}],["table.load('fraudreport",{"_index":2096,"title":{},"name":{},"text":{"29":{}},"component":{}}],["table.load('purchas",{"_index":2089,"title":{},"name":{},"text":{"29":{}},"component":{}}],["table.load('purchasebycustom",{"_index":2091,"title":{},"name":{},"text":{"29":{}},"component":{}}],["table.load(table_nam",{"_index":291,"title":{},"name":{},"text":{"2":{},"20":{}},"component":{}}],["table[numer",{"_index":1122,"title":{},"name":{},"text":{"9":{}},"component":{}}],["table_id",{"_index":1801,"title":{},"name":{},"text":{"20":{}},"component":{}}],["table_nam",{"_index":242,"title":{},"name":{},"text":{"2":{},"6":{},"20":{},"29":{}},"component":{}}],["tablefoo",{"_index":1435,"title":{},"name":{},"text":{"11":{}},"component":{}}],["tablenam",{"_index":773,"title":{},"name":{},"text":{"6":{},"19":{}},"component":{}}],["tables’",{"_index":792,"title":{},"name":{},"text":{"6":{}},"component":{}}],["table’",{"_index":729,"title":{},"name":{},"text":{"5":{},"6":{},"14":{},"19":{},"20":{}},"component":{}}],["tabular",{"_index":1499,"title":{},"name":{},"text":{"13":{},"17":{}},"component":{}}],["tack",{"_index":1909,"title":{},"name":{},"text":{"27":{}},"component":{}}],["tag",{"_index":994,"title":{},"name":{},"text":{"9":{}},"component":{}}],["tail",{"_index":2226,"title":{},"name":{},"text":{"31":{}},"component":{}}],["take",{"_index":528,"title":{},"name":{},"text":{"4":{},"6":{},"7":{},"8":{},"9":{},"10":{},"11":{},"12":{},"13":{},"17":{},"20":{},"27":{},"28":{}},"component":{}}],["taken",{"_index":1012,"title":{},"name":{},"text":{"9":{}},"component":{}}],["talk",{"_index":2151,"title":{},"name":{},"text":{"30":{}},"component":{}}],["target",{"_index":1522,"title":{"14-2":{}},"name":{},"text":{"14":{},"29":{},"30":{}},"component":{}}],["task",{"_index":2102,"title":{},"name":{},"text":{"29":{}},"component":{}}],["tax",{"_index":1013,"title":{},"name":{},"text":{"9":{}},"component":{}}],["tax_categori",{"_index":1022,"title":{},"name":{},"text":{"9":{}},"component":{}}],["technolog",{"_index":1993,"title":{"28-4":{}},"name":{},"text":{},"component":{}}],["tell",{"_index":736,"title":{},"name":{},"text":{"6":{},"11":{},"14":{},"19":{},"20":{}},"component":{}}],["tempor",{"_index":468,"title":{"17":{},"17-5":{}},"name":{"17":{}},"text":{"4":{},"8":{},"12":{},"14":{},"15":{},"17":{},"19":{},"27":{},"28":{}},"component":{}}],["temporari",{"_index":820,"title":{},"name":{},"text":{"7":{},"26":{}},"component":{}}],["temporarili",{"_index":833,"title":{},"name":{},"text":{"7":{}},"component":{}}],["tenant",{"_index":331,"title":{},"name":{},"text":{"3":{},"23":{}},"component":{}}],["tenni",{"_index":1962,"title":{},"name":{},"text":{"27":{}},"component":{}}],["terabyt",{"_index":1925,"title":{},"name":{},"text":{"27":{}},"component":{}}],["termin",{"_index":17,"title":{},"name":{},"text":{"1":{},"20":{}},"component":{}}],["test",{"_index":1219,"title":{},"name":{},"text":{"9":{},"20":{}},"component":{}}],["that’",{"_index":1939,"title":{},"name":{},"text":{"27":{}},"component":{}}],["the_answ",{"_index":1611,"title":{},"name":{},"text":{"16":{}},"component":{}}],["themselv",{"_index":887,"title":{},"name":{},"text":{"8":{},"19":{}},"component":{}}],["theori",{"_index":406,"title":{},"name":{},"text":{"4":{}},"component":{}}],["there’",{"_index":476,"title":{},"name":{},"text":{"4":{},"27":{}},"component":{}}],["they’r",{"_index":167,"title":{},"name":{},"text":{"1":{},"14":{},"16":{},"19":{},"27":{},"28":{}},"component":{}}],["they’v",{"_index":1471,"title":{},"name":{},"text":{"12":{}},"component":{}}],["thing",{"_index":688,"title":{},"name":{},"text":{"5":{},"6":{},"9":{},"11":{},"12":{},"19":{},"20":{},"21":{},"27":{},"28":{},"30":{}},"component":{}}],["think",{"_index":480,"title":{},"name":{},"text":{"4":{},"8":{},"16":{},"28":{},"30":{}},"component":{}}],["third",{"_index":2157,"title":{},"name":{},"text":{"30":{}},"component":{}}],["those",{"_index":890,"title":{},"name":{},"text":{"8":{},"27":{},"30":{}},"component":{}}],["though",{"_index":1624,"title":{},"name":{},"text":{"16":{}},"component":{}}],["thought",{"_index":1353,"title":{},"name":{},"text":{"10":{},"11":{},"12":{}},"component":{}}],["thousand",{"_index":653,"title":{},"name":{},"text":{"4":{}},"component":{}}],["three",{"_index":119,"title":{},"name":{},"text":{"1":{},"19":{}},"component":{}}],["through",{"_index":465,"title":{},"name":{},"text":{"4":{},"9":{},"14":{},"15":{},"19":{},"27":{},"28":{}},"component":{}}],["throughout",{"_index":1912,"title":{},"name":{},"text":{"27":{}},"component":{}}],["throughput",{"_index":1892,"title":{},"name":{},"text":{"27":{}},"component":{}}],["thu",{"_index":670,"title":{},"name":{},"text":{"5":{},"9":{}},"component":{}}],["thursday",{"_index":1964,"title":{},"name":{},"text":{"27":{}},"component":{}}],["tick",{"_index":493,"title":{"9-12":{}},"name":{},"text":{"4":{},"9":{}},"component":{}}],["tigani",{"_index":1933,"title":{},"name":{},"text":{"27":{}},"component":{}}],["time",{"_index":225,"title":{"30":{},"4-9":{},"9-13":{},"9-521":{},"9-525":{},"14-6":{},"17-2":{},"30-1":{},"30-2":{},"30-3":{},"30-5":{}},"name":{},"text":{"2":{},"3":{},"4":{},"5":{},"6":{},"7":{},"8":{},"9":{},"10":{},"11":{},"12":{},"13":{},"14":{},"15":{},"16":{},"17":{},"19":{},"20":{},"21":{},"22":{},"23":{},"25":{},"27":{},"28":{},"29":{},"30":{},"31":{}},"component":{}}],["time_column",{"_index":223,"title":{},"name":{},"text":{"2":{}},"component":{}}],["time_column_nam",{"_index":737,"title":{},"name":{},"text":{"6":{},"19":{},"20":{},"29":{}},"component":{}}],["time_of",{"_index":964,"title":{"9-518":{}},"name":{},"text":{"9":{}},"component":{}}],["time_of($input",{"_index":1051,"title":{},"name":{},"text":{"9":{},"29":{}},"component":{}}],["time_of(input",{"_index":1304,"title":{},"name":{},"text":{"9":{}},"component":{}}],["time_of(input.integ",{"_index":1305,"title":{},"name":{},"text":{"9":{}},"component":{}}],["timecolumnnam",{"_index":775,"title":{},"name":{},"text":{"6":{},"19":{}},"component":{}}],["timedelta",{"_index":971,"title":{},"name":{},"text":{"9":{},"11":{}},"component":{}}],["timelin",{"_index":391,"title":{"4-12":{},"20-10":{},"27-4":{},"28-1":{},"28-3":{}},"name":{},"text":{"4":{},"20":{},"27":{},"28":{},"30":{}},"component":{}}],["timeseri",{"_index":1857,"title":{"27-4":{}},"name":{},"text":{"27":{},"28":{}},"component":{}}],["timestamp",{"_index":228,"title":{},"name":{},"text":{"2":{},"6":{},"8":{},"9":{},"11":{},"19":{},"20":{},"28":{}},"component":{}}],["timestamp_",{"_index":1394,"title":{},"name":{},"text":{"11":{}},"component":{}}],["timestamp_m",{"_index":1395,"title":{},"name":{},"text":{"11":{}},"component":{}}],["timestamp_n",{"_index":1303,"title":{},"name":{},"text":{"9":{},"11":{},"14":{},"29":{}},"component":{}}],["timestamp_u",{"_index":1396,"title":{},"name":{},"text":{"11":{}},"component":{}}],["titl",{"_index":1934,"title":{},"name":{},"text":{"27":{}},"component":{}}],["tl",{"_index":193,"title":{},"name":{},"text":{"1":{},"2":{}},"component":{}}],["today",{"_index":1936,"title":{},"name":{},"text":{"27":{}},"component":{}}],["togeth",{"_index":479,"title":{},"name":{},"text":{"4":{},"10":{},"27":{},"28":{}},"component":{}}],["token",{"_index":74,"title":{"4-18":{}},"name":{},"text":{"1":{},"2":{},"4":{},"20":{}},"component":{}}],["tolower($0",{"_index":141,"title":{},"name":{},"text":{"1":{}},"component":{}}],["tool",{"_index":173,"title":{},"name":{},"text":{"1":{},"28":{}},"component":{}}],["topic_nam",{"_index":333,"title":{},"name":{},"text":{"3":{},"23":{}},"component":{}}],["total",{"_index":867,"title":{"14-3":{}},"name":{},"text":{"8":{},"12":{},"14":{}},"component":{}}],["touch",{"_index":1819,"title":{},"name":{},"text":{"20":{}},"component":{}}],["toward",{"_index":1104,"title":{},"name":{},"text":{"9":{}},"component":{}}],["tr",{"_index":1713,"title":{},"name":{},"text":{"19":{}},"component":{}}],["tradeoff",{"_index":1893,"title":{},"name":{},"text":{"27":{}},"component":{}}],["tradit",{"_index":1671,"title":{},"name":{},"text":{"17":{}},"component":{}}],["train",{"_index":1566,"title":{"30":{},"29-3":{},"30-3":{}},"name":{"29":{},"30":{}},"text":{"14":{},"17":{},"29":{},"30":{}},"component":{}}],["training.dataframe.drop(['_tim",{"_index":2121,"title":{},"name":{},"text":{"29":{}},"component":{}}],["training['target",{"_index":2127,"title":{},"name":{},"text":{"29":{}},"component":{}}],["trainingexampl",{"_index":1584,"title":{},"name":{},"text":{"14":{}},"component":{}}],["traitlet",{"_index":1783,"title":{},"name":{},"text":{"20":{}},"component":{}}],["transact",{"_index":648,"title":{},"name":{},"text":{"4":{},"12":{},"14":{}},"component":{}}],["transfer",{"_index":1813,"title":{},"name":{},"text":{"20":{},"29":{}},"component":{}}],["transform",{"_index":753,"title":{},"name":{},"text":{"6":{},"13":{},"14":{},"16":{},"19":{},"20":{},"27":{},"28":{}},"component":{}}],["translat",{"_index":2067,"title":{},"name":{},"text":{"28":{}},"component":{}}],["travel",{"_index":387,"title":{"4-9":{},"14-6":{}},"name":{},"text":{"12":{},"14":{},"15":{},"19":{},"28":{}},"component":{}}],["treat",{"_index":745,"title":{},"name":{},"text":{"6":{},"11":{},"27":{},"30":{}},"component":{}}],["tri",{"_index":169,"title":{},"name":{},"text":{"1":{},"16":{},"19":{},"27":{},"30":{}},"component":{}}],["troubleshoot",{"_index":2201,"title":{},"name":{},"text":{"31":{}},"component":{}}],["true",{"_index":195,"title":{},"name":{},"text":{"1":{},"2":{},"6":{},"9":{},"10":{},"11":{},"13":{},"14":{},"16":{},"30":{}},"component":{}}],["tutori",{"_index":1749,"title":{},"name":{},"text":{"19":{},"21":{}},"component":{}}],["twice",{"_index":2099,"title":{},"name":{},"text":{"29":{},"30":{}},"component":{}}],["two",{"_index":562,"title":{"9-131":{}},"name":{},"text":{"4":{},"8":{},"9":{},"11":{},"12":{},"13":{},"14":{},"16":{},"17":{},"18":{},"27":{},"28":{},"29":{},"30":{},"31":{}},"component":{}}],["type",{"_index":211,"title":{"11-1":{},"11-4":{},"11-5":{},"11-6":{},"11-9":{}},"name":{},"text":{"2":{},"4":{},"5":{},"6":{},"7":{},"9":{},"11":{},"12":{},"13":{},"14":{},"16":{},"18":{},"20":{},"26":{},"27":{},"28":{},"30":{}},"component":{}}],["typic",{"_index":2009,"title":{},"name":{},"text":{"28":{}},"component":{}}],["u16",{"_index":1426,"title":{},"name":{},"text":{"11":{}},"component":{}}],["u32",{"_index":1069,"title":{},"name":{},"text":{"9":{},"11":{}},"component":{}}],["u64",{"_index":1180,"title":{},"name":{},"text":{"9":{},"11":{}},"component":{}}],["u8",{"_index":1378,"title":{},"name":{},"text":{"11":{}},"component":{}}],["ubuntu",{"_index":1756,"title":{},"name":{},"text":{"20":{}},"component":{}}],["unaffect",{"_index":1643,"title":{},"name":{},"text":{"16":{}},"component":{}}],["unam",{"_index":1710,"title":{},"name":{},"text":{"19":{}},"component":{}}],["unari",{"_index":1597,"title":{"16-2":{}},"name":{},"text":{},"component":{}}],["unavail",{"_index":834,"title":{},"name":{},"text":{"7":{}},"component":{}}],["unblock",{"_index":156,"title":{},"name":{},"text":{"1":{},"19":{}},"component":{}}],["unbound",{"_index":879,"title":{},"name":{},"text":{"8":{}},"component":{}}],["unchang",{"_index":2002,"title":{},"name":{},"text":{"28":{}},"component":{}}],["under",{"_index":772,"title":{},"name":{},"text":{"6":{},"7":{}},"component":{}}],["underli",{"_index":312,"title":{},"name":{},"text":{"3":{}},"component":{}}],["understand",{"_index":539,"title":{},"name":{},"text":{"4":{},"16":{},"19":{},"27":{},"28":{},"30":{}},"component":{}}],["undesir",{"_index":1370,"title":{},"name":{},"text":{"10":{}},"component":{}}],["unexpect",{"_index":1886,"title":{},"name":{},"text":{"27":{}},"component":{}}],["unfortun",{"_index":1979,"title":{},"name":{},"text":{"27":{},"28":{}},"component":{}}],["unicod",{"_index":1390,"title":{},"name":{},"text":{"11":{}},"component":{}}],["uniqu",{"_index":236,"title":{},"name":{},"text":{"2":{},"12":{},"20":{}},"component":{}}],["unit",{"_index":1108,"title":{},"name":{},"text":{"9":{}},"component":{}}],["unix",{"_index":1401,"title":{},"name":{},"text":{"11":{},"31":{}},"component":{}}],["unlik",{"_index":492,"title":{},"name":{},"text":{"4":{},"9":{}},"component":{}}],["unnam",{"_index":1412,"title":{},"name":{},"text":{"11":{}},"component":{}}],["unread",{"_index":2032,"title":{},"name":{},"text":{"28":{}},"component":{}}],["unshift",{"_index":533,"title":{},"name":{},"text":{"4":{}},"component":{}}],["unsign",{"_index":1380,"title":{},"name":{},"text":{"11":{}},"component":{}}],["until",{"_index":952,"title":{"9-453":{}},"name":{},"text":{"9":{},"30":{}},"component":{}}],["unusu",{"_index":1994,"title":{},"name":{},"text":{"28":{}},"component":{}}],["up",{"_index":311,"title":{"19-5":{}},"name":{},"text":{"3":{},"4":{},"8":{},"9":{},"11":{},"12":{},"13":{},"14":{},"16":{},"17":{},"19":{},"20":{},"21":{},"27":{},"28":{},"30":{}},"component":{}}],["updat",{"_index":306,"title":{"3-8":{},"6-5":{},"6-8":{},"6-11":{},"7-5":{},"7-8":{},"7-11":{}},"name":{},"text":{"3":{},"6":{},"7":{},"10":{}},"component":{}}],["update_tim",{"_index":1807,"title":{},"name":{},"text":{"20":{}},"component":{}}],["upgrad",{"_index":1785,"title":{},"name":{},"text":{"20":{},"30":{}},"component":{}}],["upload",{"_index":713,"title":{},"name":{},"text":{"5":{},"6":{},"19":{},"20":{}},"component":{}}],["upper",{"_index":965,"title":{"9-529":{},"9-532":{}},"name":{},"text":{"9":{},"19":{}},"component":{}}],["url",{"_index":1843,"title":{},"name":{},"text":{"24":{},"26":{}},"component":{}}],["us",{"_index":0,"title":{"1-1":{},"1-2":{},"1-3":{},"4-18":{},"4-19":{},"4-20":{},"12-3":{}},"name":{},"text":{"1":{},"2":{},"3":{},"4":{},"5":{},"6":{},"7":{},"8":{},"9":{},"11":{},"12":{},"13":{},"14":{},"15":{},"16":{},"17":{},"18":{},"19":{},"20":{},"21":{},"22":{},"24":{},"25":{},"26":{},"27":{},"28":{},"29":{},"30":{},"31":{}},"component":{}}],["usag",{"_index":174,"title":{"5-3":{}},"name":{},"text":{"1":{},"5":{},"29":{}},"component":{}}],["user",{"_index":346,"title":{},"name":{},"text":{"3":{},"6":{},"7":{},"12":{},"14":{},"16":{},"17":{},"27":{},"28":{},"30":{}},"component":{}}],["user_id",{"_index":2036,"title":{},"name":{},"text":{"28":{}},"component":{}}],["user’",{"_index":459,"title":{},"name":{},"text":{"4":{},"31":{}},"component":{}}],["usual",{"_index":1987,"title":{},"name":{},"text":{"27":{}},"component":{}}],["utc",{"_index":978,"title":{},"name":{},"text":{"9":{},"11":{},"27":{}},"component":{}}],["util",{"_index":717,"title":{},"name":{},"text":{"5":{}},"component":{}}],["uuid",{"_index":2209,"title":{},"name":{},"text":{"31":{}},"component":{}}],["v",{"_index":826,"title":{},"name":{},"text":{"7":{},"20":{}},"component":{}}],["valid",{"_index":813,"title":{"9-219":{}},"name":{},"text":{"7":{},"8":{},"9":{},"11":{},"16":{},"29":{}},"component":{}}],["validation.drop(['_tim",{"_index":2129,"title":{},"name":{},"text":{"29":{}},"component":{}}],["validation['target",{"_index":2131,"title":{},"name":{},"text":{"29":{}},"component":{}}],["valu",{"_index":109,"title":{"9-131":{},"9-135":{},"9-233":{},"10-4":{},"14-2":{},"17-3":{}},"name":{},"text":{"1":{},"2":{},"4":{},"6":{},"7":{},"8":{},"9":{},"10":{},"11":{},"12":{},"13":{},"14":{},"15":{},"16":{},"17":{},"18":{},"19":{},"20":{},"22":{},"24":{},"26":{},"27":{},"28":{},"30":{}},"component":{}}],["valuabl",{"_index":1684,"title":{},"name":{},"text":{"17":{},"31":{}},"component":{}}],["value2",{"_index":443,"title":{},"name":{},"text":{"4":{}},"component":{}}],["value’",{"_index":1510,"title":{},"name":{},"text":{"13":{}},"component":{}}],["var",{"_index":83,"title":{},"name":{},"text":{"1":{},"7":{},"20":{},"29":{}},"component":{}}],["varchar",{"_index":1848,"title":{},"name":{},"text":{"26":{}},"component":{}}],["vari",{"_index":1758,"title":{},"name":{},"text":{"20":{}},"component":{}}],["variabl",{"_index":114,"title":{"9-110":{},"20-12":{}},"name":{},"text":{"1":{},"2":{},"4":{},"7":{},"20":{},"29":{}},"component":{}}],["varianc",{"_index":966,"title":{"9-536":{},"9-539":{}},"name":{},"text":{"9":{}},"component":{}}],["variance(input.valu",{"_index":1308,"title":{},"name":{},"text":{"9":{}},"component":{}}],["varieti",{"_index":318,"title":{},"name":{},"text":{"3":{},"16":{}},"component":{}}],["variou",{"_index":1135,"title":{},"name":{},"text":{"9":{},"10":{},"28":{}},"component":{}}],["vast",{"_index":1955,"title":{},"name":{},"text":{"27":{}},"component":{}}],["vector",{"_index":317,"title":{"14-7":{}},"name":{},"text":{"3":{},"4":{},"14":{}},"component":{}}],["vendor",{"_index":1451,"title":{},"name":{},"text":{"12":{},"14":{},"17":{}},"component":{}}],["vendor_id",{"_index":588,"title":{},"name":{},"text":{"4":{},"14":{}},"component":{}}],["verbos",{"_index":2056,"title":{},"name":{},"text":{"28":{}},"component":{}}],["veri",{"_index":1883,"title":{},"name":{},"text":{"27":{},"28":{},"31":{}},"component":{}}],["verifi",{"_index":68,"title":{},"name":{},"text":{"1":{},"4":{},"19":{},"20":{}},"component":{}}],["version",{"_index":1703,"title":{},"name":{},"text":{"19":{},"20":{}},"component":{}}],["version=0.4.1",{"_index":136,"title":{},"name":{},"text":{"1":{}},"component":{}}],["vertic",{"_index":1953,"title":{},"name":{},"text":{"27":{}},"component":{}}],["vi",{"_index":832,"title":{},"name":{},"text":{"7":{}},"component":{}}],["via",{"_index":1832,"title":{},"name":{},"text":{"22":{},"25":{}},"component":{}}],["victori",{"_index":2156,"title":{},"name":{},"text":{"30":{}},"component":{}}],["view",{"_index":71,"title":{"7":{},"4-2":{},"4-17":{},"7-1":{},"7-2":{},"7-3":{},"7-4":{},"7-5":{},"7-6":{},"7-7":{},"7-8":{},"7-9":{},"7-10":{}},"name":{"7":{}},"text":{"1":{},"4":{},"6":{},"7":{},"19":{},"20":{},"27":{},"28":{},"29":{},"31":{}},"component":{}}],["view'",{"_index":828,"title":{},"name":{},"text":{"7":{}},"component":{}}],["view.create_view",{"_index":815,"title":{},"name":{},"text":{"7":{},"29":{}},"component":{}}],["view.delete_view(\"purchasestat",{"_index":825,"title":{},"name":{},"text":{"7":{}},"component":{}}],["view.get_view(\"purchasestat",{"_index":824,"title":{},"name":{},"text":{"7":{}},"component":{}}],["view.list_views(\"purchas",{"_index":823,"title":{},"name":{},"text":{"7":{}},"component":{}}],["view_id",{"_index":830,"title":{},"name":{},"text":{"7":{}},"component":{}}],["view_nam",{"_index":816,"title":{},"name":{},"text":{"7":{},"29":{}},"component":{}}],["view’",{"_index":810,"title":{},"name":{},"text":{"7":{}},"component":{}}],["visibl",{"_index":1484,"title":{},"name":{},"text":{"12":{},"16":{}},"component":{}}],["visit",{"_index":1700,"title":{},"name":{},"text":{"19":{},"28":{}},"component":{}}],["visual",{"_index":1882,"title":{},"name":{},"text":{"27":{},"30":{}},"component":{}}],["vs",{"_index":1879,"title":{},"name":{},"text":{"27":{},"28":{}},"component":{}}],["walk",{"_index":1525,"title":{},"name":{},"text":{"14":{},"19":{},"30":{}},"component":{}}],["want",{"_index":574,"title":{"27-6":{}},"name":{},"text":{"4":{},"13":{},"14":{},"15":{},"16":{},"19":{},"28":{},"29":{},"30":{}},"component":{}}],["warehous",{"_index":1840,"title":{},"name":{},"text":{"24":{},"26":{}},"component":{}}],["warn",{"_index":1221,"title":{},"name":{},"text":{"9":{},"31":{}},"component":{}}],["washington",{"_index":1462,"title":{},"name":{},"text":{"12":{}},"component":{}}],["way",{"_index":421,"title":{},"name":{},"text":{"4":{},"5":{},"9":{},"10":{},"13":{},"14":{},"16":{},"17":{},"19":{},"20":{},"21":{},"27":{},"28":{}},"component":{}}],["wb').write(r.cont",{"_index":2088,"title":{},"name":{},"text":{"29":{}},"component":{}}],["web",{"_index":2012,"title":{},"name":{},"text":{"28":{}},"component":{}}],["websit",{"_index":2034,"title":{},"name":{},"text":{"28":{}},"component":{}}],["weenie_hut",{"_index":629,"title":{},"name":{},"text":{"4":{}},"component":{}}],["well",{"_index":573,"title":{},"name":{},"text":{"4":{},"17":{},"18":{},"30":{}},"component":{}}],["we’d",{"_index":341,"title":{},"name":{},"text":{"3":{},"7":{},"27":{},"30":{}},"component":{}}],["we’ll",{"_index":339,"title":{},"name":{},"text":{"3":{},"7":{},"12":{},"14":{},"19":{},"20":{},"29":{},"30":{}},"component":{}}],["we’r",{"_index":343,"title":{},"name":{},"text":{"3":{},"7":{},"19":{},"20":{},"27":{},"28":{},"29":{},"30":{}},"component":{}}],["we’v",{"_index":455,"title":{},"name":{},"text":{"4":{},"14":{},"19":{},"20":{},"27":{},"29":{}},"component":{}}],["wh_001",{"_index":627,"title":{},"name":{},"text":{"4":{}},"component":{}}],["wh_002",{"_index":634,"title":{},"name":{},"text":{"4":{}},"component":{}}],["whatev",{"_index":769,"title":{},"name":{},"text":{"6":{},"7":{}},"component":{}}],["what’",{"_index":2142,"title":{},"name":{},"text":{"30":{}},"component":{}}],["when(cad",{"_index":552,"title":{},"name":{},"text":{"4":{},"20":{}},"component":{}}],["when(condit",{"_index":1311,"title":{},"name":{},"text":{"9":{},"13":{}},"component":{}}],["when(count(gamedefeat",{"_index":2189,"title":{},"name":{},"text":{"30":{}},"component":{}}],["when(daili",{"_index":503,"title":{},"name":{},"text":{"4":{},"9":{},"28":{}},"component":{}}],["when(event.kind",{"_index":1505,"title":{},"name":{},"text":{"13":{}},"component":{}}],["when(hourli",{"_index":1208,"title":{},"name":{},"text":{"9":{}},"component":{}}],["when(input.condit",{"_index":1314,"title":{},"name":{},"text":{"9":{}},"component":{}}],["when(purchase.amount",{"_index":426,"title":{},"name":{},"text":{"4":{},"20":{}},"component":{}}],["when(purchase.categori",{"_index":484,"title":{},"name":{},"text":{"4":{}},"component":{}}],["when(purchase.customer_id",{"_index":1743,"title":{},"name":{},"text":{"19":{},"20":{}},"component":{}}],["when(review.verifi",{"_index":436,"title":{},"name":{},"text":{"4":{}},"component":{}}],["when(time_of($input",{"_index":2111,"title":{},"name":{},"text":{"29":{}},"component":{}}],["when(yearli",{"_index":1345,"title":{},"name":{},"text":{"9":{}},"component":{}}],["whenev",{"_index":1371,"title":{},"name":{},"text":{"10":{}},"component":{}}],["wherea",{"_index":1498,"title":{},"name":{},"text":{"13":{}},"component":{}}],["whether",{"_index":1211,"title":{},"name":{},"text":{"9":{}},"component":{}}],["whole",{"_index":1102,"title":{},"name":{},"text":{"9":{}},"component":{}}],["whose",{"_index":428,"title":{},"name":{},"text":{"4":{},"8":{},"12":{},"14":{}},"component":{}}],["widen",{"_index":1424,"title":{},"name":{},"text":{"11":{}},"component":{}}],["wider",{"_index":1428,"title":{},"name":{},"text":{"11":{}},"component":{}}],["width",{"_index":1266,"title":{},"name":{},"text":{"9":{}},"component":{}}],["will",{"_index":1940,"title":{},"name":{},"text":{"27":{}},"component":{}}],["win",{"_index":2150,"title":{},"name":{},"text":{"30":{}},"component":{}}],["window",{"_index":382,"title":{"8":{},"4-5":{},"8-2":{},"8-5":{},"9-14":{},"9-71":{},"9-201":{},"9-321":{},"9-345":{},"9-566":{}},"name":{"8":{}},"text":{"4":{},"8":{},"9":{},"11":{},"14":{},"17":{},"20":{},"27":{},"28":{}},"component":{}}],["window=nul",{"_index":1438,"title":{},"name":{},"text":{"11":{}},"component":{}}],["window=since(daili",{"_index":502,"title":{},"name":{},"text":{"4":{},"14":{}},"component":{}}],["window=since(gamevictori",{"_index":2190,"title":{},"name":{},"text":{"30":{}},"component":{}}],["window=since(purchas",{"_index":470,"title":{},"name":{},"text":{"4":{}},"component":{}}],["window=since(review",{"_index":472,"title":{},"name":{},"text":{"4":{}},"component":{}}],["wish",{"_index":240,"title":{},"name":{},"text":{"2":{},"9":{}},"component":{}}],["with_key",{"_index":742,"title":{"9-550":{}},"name":{},"text":{"6":{},"9":{},"19":{},"20":{}},"component":{}}],["with_key($input.customer_id",{"_index":1551,"title":{},"name":{},"text":{"14":{}},"component":{}}],["with_key($input.other_key",{"_index":1322,"title":{},"name":{},"text":{"9":{}},"component":{}}],["with_key(productreview.product_id",{"_index":1480,"title":{},"name":{},"text":{"12":{}},"component":{}}],["with_key(purchase.customer_id",{"_index":1552,"title":{},"name":{},"text":{"14":{}},"component":{}}],["with_key(review.product_id",{"_index":509,"title":{},"name":{},"text":{"4":{}},"component":{}}],["within",{"_index":1035,"title":{},"name":{},"text":{"9":{},"11":{},"14":{},"16":{},"18":{},"20":{},"21":{},"29":{}},"component":{}}],["without",{"_index":287,"title":{},"name":{},"text":{"2":{},"4":{},"6":{},"7":{},"10":{},"11":{},"12":{},"18":{},"19":{},"20":{},"27":{},"28":{}},"component":{}}],["withtabl",{"_index":1635,"title":{},"name":{},"text":{"16":{}},"component":{}}],["witten",{"_index":395,"title":{},"name":{},"text":{"4":{}},"component":{}}],["wo",{"_index":1298,"title":{},"name":{},"text":{"9":{}},"component":{}}],["won’t",{"_index":1496,"title":{},"name":{},"text":{"12":{}},"component":{}}],["work",{"_index":69,"title":{"18":{},"12-7":{}},"name":{"18":{}},"text":{"1":{},"4":{},"10":{},"14":{},"17":{},"19":{},"20":{},"27":{},"28":{}},"component":{}}],["worker",{"_index":1946,"title":{},"name":{},"text":{"27":{}},"component":{}}],["workload",{"_index":1906,"title":{},"name":{},"text":{"27":{}},"component":{}}],["world",{"_index":689,"title":{"19":{},"20":{}},"name":{"19":{},"20":{}},"text":{"5":{},"6":{},"9":{},"12":{},"17":{},"19":{},"20":{},"21":{},"27":{},"28":{}},"component":{}}],["worri",{"_index":739,"title":{},"name":{},"text":{"6":{},"19":{},"20":{}},"component":{}}],["write",{"_index":53,"title":{"20-8":{},"22-1":{},"23-1":{},"24-1":{},"25-1":{},"26-1":{}},"name":{},"text":{"1":{},"4":{},"13":{},"14":{},"15":{},"16":{},"19":{},"20":{},"28":{}},"component":{}}],["written",{"_index":308,"title":{},"name":{},"text":{"3":{},"11":{},"17":{},"22":{},"23":{},"25":{},"28":{}},"component":{}}],["x",{"_index":151,"title":{},"name":{},"text":{"1":{},"9":{},"19":{}},"component":{}}],["x_train",{"_index":2120,"title":{},"name":{},"text":{"29":{}},"component":{}}],["x_train_scal",{"_index":2134,"title":{},"name":{},"text":{"29":{}},"component":{}}],["x_valid",{"_index":2128,"title":{},"name":{},"text":{"29":{}},"component":{}}],["x_validation_sc",{"_index":2136,"title":{},"name":{},"text":{"29":{}},"component":{}}],["xarg",{"_index":1716,"title":{},"name":{},"text":{"19":{}},"component":{}}],["xattr",{"_index":164,"title":{},"name":{},"text":{"1":{},"19":{}},"component":{}}],["y",{"_index":1140,"title":{},"name":{},"text":{"9":{}},"component":{}}],["y_train",{"_index":2126,"title":{},"name":{},"text":{"29":{}},"component":{}}],["y_valid",{"_index":2130,"title":{},"name":{},"text":{"29":{}},"component":{}}],["yaml",{"_index":766,"title":{},"name":{},"text":{"6":{},"7":{},"19":{}},"component":{}}],["yea",{"_index":1333,"title":{},"name":{},"text":{"9":{}},"component":{}}],["year",{"_index":418,"title":{"9-96":{},"9-103":{},"9-332":{},"9-339":{},"9-557":{},"9-560":{}},"name":{},"text":{"4":{},"8":{},"9":{},"29":{},"30":{}},"component":{}}],["year(input.tim",{"_index":1327,"title":{},"name":{},"text":{"9":{}},"component":{}}],["yearli",{"_index":866,"title":{"9-564":{},"9-566":{},"9-570":{}},"name":{},"text":{"8":{},"9":{}},"component":{}}],["yearly_sum",{"_index":1335,"title":{},"name":{},"text":{"9":{}},"component":{}}],["yesterday",{"_index":1982,"title":{},"name":{},"text":{"27":{},"30":{}},"component":{}}],["yield",{"_index":1244,"title":{},"name":{},"text":{"9":{}},"component":{}}],["you’d",{"_index":786,"title":{},"name":{},"text":{"6":{},"7":{},"19":{},"20":{},"28":{}},"component":{}}],["you’ll",{"_index":118,"title":{},"name":{},"text":{"1":{},"19":{},"20":{}},"component":{}}],["you’r",{"_index":155,"title":{},"name":{},"text":{"1":{},"7":{},"19":{},"27":{},"29":{}},"component":{}}],["you’v",{"_index":394,"title":{},"name":{},"text":{"4":{},"7":{},"19":{}},"component":{}}],["zero",{"_index":906,"title":{"9-89":{},"9-103":{},"9-339":{}},"name":{},"text":{"9":{},"12":{},"14":{}},"component":{}}],["zip",{"_index":968,"title":{"9-577":{},"9-584":{}},"name":{},"text":{},"component":{}}],["zip_max",{"_index":967,"title":{"9-574":{}},"name":{},"text":{"9":{}},"component":{}}],["zip_max(input.a",{"_index":1347,"title":{},"name":{},"text":{"9":{}},"component":{}}],["zip_min",{"_index":969,"title":{"9-581":{}},"name":{},"text":{"9":{}},"component":{}}],["zip_min(input.a",{"_index":1348,"title":{},"name":{},"text":{"9":{}},"component":{}}]],"pipeline":["stemmer"]},"store":{"documents":{"1":{"id":1,"text":"Listing 1. Installing Kaskada using pip pip install kaskada Pip and pip3 Depending on you Python installation and configuration you may have pip3 instead of pip available in your terminal. If you do have pip3 replace pip with pip3 in your command, i.e., pip3 install kaskada Kaskada is now installed. Kaskada can be used locally by creating a local session. Listing 2. Creating a local Kaskada session in Python from kaskada.api.session import LocalBuilder session = LocalBuilder().build() Creating a local session will download and run the Kaskada service, and configure the client to use the local endpoint. IPython is an interactive Python runtime used by Jupyter and other notebooks to evaluate Python code blocks. IPython supports \"magic extensions\" for customizing how code blocks are interpreted. Kaskada provides a magic extension that simplifies querying Kaskada. Kaskada’s python library includes notebook customizations that allow us to write queries in the Fenl language but also receive and render the results of our queries in our notebooks. We need to enable these customizations first before we can use them. Listing 3. Enable fenlmagic in this notebook %load_ext fenlmagic This will load the extension into the IPython context. You can verify the install worked by initializing the extension: %%fenl? %fenl [--as-view AS_VIEW] [--data-token DATA_TOKEN] [--debug DEBUG] [--output OUTPUT] [--preview-rows PREVIEW_ROWS] [--result-behavior RESULT_BEHAVIOR] [--var VAR] fenl query magic optional arguments: --as-view AS_VIEW adds the body as a view with the given name to all subsequent fenl queries. --data-token DATA_TOKEN A data token to run queries against. Enables repeatable queries. --debug DEBUG Shows debugging information --output OUTPUT Output format for the query results. One of \"df\" (default), \"json\", \"parquet\" or \"redis-bulk\". \"redis- bulk\" implies --result-behavior \"final-results\" --preview-rows PREVIEW_ROWS Produces a preview of the data with at least this many rows. --result-behavior RESULT_BEHAVIOR Determines which results are returned. Either \"all- results\" (default), or \"final-results\" which returns only the final values for each entity. --var VAR Assigns the QueryResponse to a local variable with the given name. The QueryResponse contains result_url, query and dataframe. To use Kaskada on the command line, you’ll need to install three components: The Kaskada command-line executable The Kaskada manager, which serves the Kaskada API The Kaskada engine, which executes queries Each of these are available as pre-compiled binaries in the Releases section of Kaskada’s Github repository. This example assumes you have installed curl. VERSION=0.4.1 ARCH=$(uname -m | awk '{print tolower($0)}') OS=$(uname -s | awk '{print tolower($0)}') curl -L \"https://github.com/kaskada-ai/kaskada/releases/download/engine%40v$VERSION/kaskada-cli-$OS-$ARCH\" -o kaskada-cli curl -L \"https://github.com/kaskada-ai/kaskada/releases/download/engine%40v$VERSION/kaskada-engine-$OS-$ARCH\" -o kaskada-engine curl -L \"https://github.com/kaskada-ai/kaskada/releases/download/engine%40v$VERSION/kaskada-manager-$OS-$ARCH\" -o kaskada-manager chmod +x kaskada-* Authorizing applications on OSX If you’re using OSX, you may need to unblock the applications. OSX prevents applications you download from running as a security feature. You can remove the block placed on the file when it was downloaded with the following command: xattr -dr com.apple.quarantine You should now be able to run all three components. To verify they’re installed correctly and executable, try running the following command: ./kaskada-cli -h You should see output similar to the following: A CLI tool for interacting with the Kaskada API Usage: cli [command] Available Commands: completion Generate the autocompletion script for the specified shell help Help about any command load A set of commands for loading data into kaskada query A set of commands for running queries on kaskada sync A set of commands for interacting with kaskada resources as code Flags: --config string config file (default is $HOME/.cli.yaml) -d, --debug get debug log output -h, --help help for cli --kaskada-api-server string Kaskada API Server --kaskada-client-id string Kaskada Client ID --use-tls Use TLS when connecting to the Kaskada API (default true) You can start a local instance of the Kaskada service by running the manager and engine: ./kaskada-manager 2>&1 > manager.log 2>&1 & ./kaskada-engine serve > engine.log 2>&1 &","title":"Installing Kaskada","component":"kaskada","version":"main","name":"installing","url":"/kaskada/main/installing.html","titles":[{"text":"Using Kaskada with Python","hash":"using-kaskada-with-python","id":1},{"text":"Using Kaskada with IPython (Jupyter)","hash":"using-kaskada-with-ipython-jupyter","id":2},{"text":"Using Kaskada with the command line (CLI)","hash":"using-kaskada-with-the-command-line-cli","id":3}]},"2":{"id":2,"text":"Kaskada stores data in tables. Tables consist of multiple rows, and each row is a value of the same type. The Tables section of the reference docs has more information about managing tables. A table must be created before data can be loaded into it. Any data loaded into a table must include all columns used in the table definition. The full schema of a table is inferred from the data loaded into it. At the moment, all data loaded into a table must have the same schema. Additionally, it expects the following: The time_column (and all other date-time columns in your dataset) should be a type that can be cast to a timestamp, for example an integer or RFC3330-formatted string. If a subsort column is defined, the combination of the entity key column, time column and subsort column should guarantee that each row is unique. Events stored as a Parquet file can be loaded into a table by providing the file’s location. The given location must be accessible to the Kaskada instance you wish to load the file into. Listing 1. Loading a Parquet file using Python from kaskada import table from kaskada.api.session import LocalBuilder session = LocalBuilder().build() table.load( table_name = \"Purchase\", file = \"/path/to/file.parquet\", ) Listing 2. Loading a Parquet file using the CLI kaskada-cli load \\ --table Purchase \\ --file-path file:///path/to/file.parquet \\ --file-type parquet Events stored as a CSV file can be loaded into a table by providing the file’s location. The given location must be accessible to the Kaskada instance you wish to load the file into. CSV files must include a header row, which is used to infer the file’s schema. CSV type inference occurs when data is loaded. The schema is inferred by reading the first 1000 rows. Listing 3. Loading a CSV file using Python from kaskada import table from kaskada.api.session import LocalBuilder session = LocalBuilder().build() table.load( table_name = \"Purchase\", file = \"/path/to/file.csv\", ) Listing 4. Loading a CSV file using the CLI kaskada-cli load \\ --table Purchase \\ --file-path file:///path/to/file.csv \\ --file-type csv Kaskada supports loading files from different kinds of file storage. The file storage system is specified with the file path protocol prefix, for example file: or s3:. Data can be loaded from the local disk using the file: protocol. When loading from disk, the file path must identify a file accessible to the Kaskada service. Local storage is not reccommended when using a remote Kaskada service. Data can be loaded from AWS S3 (or compatible stores such as Minio) using the s3: protocol. When loading non-public objects from S3, the Kaskada service must be configured with credentials. Credentials are configured using environment variables. The following environment variables are used to configure credentials: AWS_ACCESS_KEY_ID: AWS credential key. AWS_SECRET_ACCESS_KEY: AWS credential secret. AWS_DEFAULT_REGION: The AWS S3 region to use if not specified. AWS_ENDPOINT: The S3 endpoint to connect to. AWS_SESSION_TOKEN: The session token. Session tokens are required for credentials created by assuming an IAM role. AWS_CONTAINER_CREDENTIALS_RELATIVE_URI: https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-iam-roles.html AWS_ALLOW_HTTP: Set to “true” to permit HTTP connections without TLS Data can be loaded into a table using the table.load() function from kaskada import table from kaskada.api.session import LocalBuilder session = LocalBuilder().build() fullPathToFile = \"/content/drive/place/thing/purchases.parquet\" table.load(table_name = \"Purchases\", file = fullPathToFile) Required format The files must be in a specific format. See Expected File Format for details. This loads the contents of the file to the Purchases table. The result of running load is a data_token_id. The data token ID is a unique reference to the data currently stored in the system. Data tokens enable repeatable queries: queries performed against the same data token always run on the same input data. data_token_id: \"aa2***a6b9\" Files can be loaded into a table using the CLI. When loading files with the CLI, the given path must be local to the Kaskada service. The file must be encoded as either CSV or Parquet. kaskada-cli load \\ --table Purchase \\ --file-type csv \\ --file-path file://path/to/purchases.csv The result of running cli load is a data_token_id`. The data token ID is a unique reference to the data currently stored in the system. data_token_id: \"aa2***a6b9\"","title":"Loading Data into a Table","component":"kaskada","version":"main","name":"loading-data","url":"/kaskada/main/loading-data.html","titles":[{"text":"File Format","hash":"file-format","id":1},{"text":"Loading data from Parquet files into a table","hash":"loading-data-from-parquet-files-into-a-table","id":2},{"text":"Loading data from CSV files into a table","hash":"loading-data-from-csv-files-into-a-table","id":3},{"text":"File Location","hash":"file-location","id":4},{"text":"Local Storage","hash":"local-storage","id":5},{"text":"AWS S3 Storage","hash":"aws-s3-storage","id":6},{"text":"Loading data into a table with Python","hash":"loading-data-into-a-table-with-python","id":7},{"text":"Loading data into a table with the CLI","hash":"loading-data-into-a-table-with-the-cli","id":8}]},"3":{"id":3,"text":"The results of a Fenl query can be written to an external data store and kept up to date as the data underlying the query changes using materializations. A materialization is similar to a query, except that the results are updated any time data is added to a table used by the query. Materializations can be used to populate feature vectors in a variety of feature stores to be used in production for low-latency inference. Kaskada supports materializing into different external data stores. Example configuration: materializations: # The name of the materialization - materialization_name: PulsarExample # The epxression to materializa expression: PurchaseStats # Where the expression's final results will be written pulsar: broker_service_url: pulsar://127.0.0.1:6650 tenant: public namespace: default topic_name: pulsar-example Example configuration: materializations: - materialization_name: PulsarExample expression: PurchaseStats object_store: file_type: parquet output_prefix_location: s3://my-bucket/path/to/results/ To create a materialization, we’ll start by describing the expression we’d like to materialize. In this case, we’re interested in some purchase statistics for each user. This definition depends on business logic and might require some iteration to get just right. Listing 1. with Python: from kaskada import materialization from kaskada.api.session import LocalBuilder session = LocalBuilder().build() purchase_stats = \"\"\" { time: Purchase.purchase_time, entity: Purchase.customer_id, max_amount: Purchase.amount | max(), min_amount: Purchase.amount | min(), } \"\"\" tenant = \"public\" namespace = \"default\" topic_name = \"model_features\" broker_service_url = \"pulsar://127.0.0.1:6650\" destination = materialization.PulsarDestination(tenant, namespace, topic_name, broker_service_url) materialization.create_materialization( name = \"PurchaseStats\", destination = destination, query = purchase_stats, ) The list materializations method returns all materializations defined for your user. An optional search string can filter the response set. Here is an example of listing tables: Listing 2. with Python: from kaskada import materialization from kaskada.api.session import LocalBuilder session = LocalBuilder().build() materialization.list_materializations(\"Purchase\") You can get a materialization using its name: Listing 3. with Python: from kaskada import materialization from kaskada.api.session import LocalBuilder session = LocalBuilder().build() materialization.get_materialization(\"PurchaseStats\") Materializations are currently immutable. Updating a materialization requires deleting that materialization and then re-creating it with a new expression. You can delete a materialization using its name: Listing 4. with Python: from kaskada import materialization from kaskada.api.session import LocalBuilder session = LocalBuilder().build() materialization.delete_materialization(\"PurchaseStats\") Listing 5. with the CLI: ./kaskada-cli materialization delete -m PurchaseStats Deleting a materialization does not delete any data persisted in the external data store.","title":"Materializations","component":"kaskada","version":"main","name":"materializations","url":"/kaskada/main/developing/materializations.html","titles":[{"text":"Supported Destinations","hash":"supported-destinations","id":1},{"text":"Pulsar","hash":"pulsar","id":2},{"text":"Object Store","hash":"object-store","id":3},{"text":"Managing Materializations","hash":"managing-materializations","id":4},{"text":"Creating a Materialization","hash":"creating-a-materialization","id":5},{"text":"List Materializations","hash":"list-materializations","id":6},{"text":"Get Materialization","hash":"get-materialization","id":7},{"text":"Updating a Materialization","hash":"updating-a-materialization","id":8},{"text":"Deleting a materialization","hash":"deleting-a-materialization","id":9}]},"4":{"id":4,"text":"Kaskada computes results from the data you’ve loaded by executing queries. A query describes a computation to perform and configures how the query should be executed. Kaskada queries are witten in a language called Fenl, which is designed to make it easy to describe computations over events. To learn more about Fenl: The Quick Start is an overview of the query language. The Language Guide explains the design and theory behind the languge. The Function Catalog documents the operations and functions provided by Fenl. The FAQ answers some comment questions about using Fenl. Kaskada’s query language builds on the lessons of 50+ years of query language design to provide a declarative, composable, easy-to-read, and type-safe way of describing computations related to time. The following is a quick overview of the query language’s main features and syntax. Kaskada queries are built by composing simple expressions. Every expression returns a timeline. Purchase | when(Purchase.amount > 10) In this example we start with the expression Purchase (the timeline of all purchase events) then filter it using when(). The result is a timeline of purchase events whose amount is greater than 10. Aggregate events to produce a continuous timeline whose value can be observed at arbitrary points in time. { max_verified_review_to_date: Review.stars | when(Review.verified) | max() } What are the curly brackets for? Every query needs to return a Record. Records allow one or more values to be grouped into a single row. You can create a record using the syntax {key: value, key2: value2}. In this example we first filter the timeline of Review events to only include verified reviews, then aggregate the filtered results using the max() aggregation. The resulting timeline describes the maximum number of stars as-of every point in time. Every expression is associated with an entity, allowing tables and expressions to be automatically joined. Entities eliminate redundant boilerplate code. { purchases_per_page_view: count(Purchase) / count(Pageview) } Here we’ve used the count() aggregation to divide the number of purchases up to each point in time by the number of pageviews up to the same point in time. The result is a timeline describing how each user’s purchase-per-pageview changes over time. Since both the Purchase and Pageview tables have the same entity, we can easily combine them. Collect events as you move through time, and aggregate them with respect to other events. Ordered aggregation makes it easy to describe temporal interactions. { pageviews_since_last_purchase: count(Pageview, window=since(Purchase)), spend_since_last_review: count(Purchase, window=since(Review)), } By default, aggregations are applied from the beginning of time, but here we’ve used the since() window function to configure the aggregation to reset each time there’s a Purchase or Review, respectively. Pipe syntax allows multiple operations to be chained together. Write your operations in the same order you think about them. It’s timelines all the way down, making it easy to aggregate the results of aggregations. { largest_spend_over_2_purchases: purchase.amount | when(Purchase.category == \"food\") | sum(window=sliding(2, Purchase.category == \"food\")) # Inner aggregation | max() # Outer aggregation } Pivot from events to time-series. Unlike grouped aggregates, tick generators such as daily() produce rows even when there’s no input, allowing you to react when something doesn’t happen. { signups_per_hour: count(Signups, window=since(daily())) | when(daily()) | mean() } Observe the value of aggregations at arbitrary points in time. Timelines are either “discrete” (instantaneous values or events) or “continuous” (values produced by a stateful aggregations). Continuous timelines let you combine aggregates computed from different event sources. let product_average = Review.stars | with_key(Review.product_id) | mean() in { average_product_review: product_average | lookup(Purchase.product_id)) } In this example the lookup() function is used to observe a value computed for a different entity. The variable product_average computes the average review using the product’s ID as entity. The lookup starts with each purchase, then looks up the current value of the product’s average review, for the procduct ID specified in the purchase. Shifting values forward (but not backward) in time, allows you to combine different temporal contexts without the risk of temporal leakage. Shifted values make it easy to compare a value “now” to a value from the past. let purchases_now = count(Purchase) let purchases_yesterday = purchases_now | shift_by(days(1)) in { purchases_in_last_day: purchases_now - purchases_yesterday } In this example we take the timeline produced by purchases_now and move it forward in time by one day using the shift_by() function. We then subtract the shifted value from the original, unshifted value It is functions all the way down. No global state, no dependencies to manage, and no spooky action at a distance. Quickly understand what a query is doing, and painlessly refactor to make it DRY. # How many big purchases happen each hour and where? let cadence = hourly() # Anything can be named and re-used let hourly_big_purchases = Purchase | when(Purchase.amount > 10) # Filter anywhere | count(window=since(cadence)) # Aggregate anything | when(cadence) # No choosing between “when” & “having” in {hourly_big_purchases} # Records are just another type | extend({ # …modify them sequentially last_visit_region: last(Pageview.region) }) A given query can be computed in different ways. You can either return a table describing each change in the timeline, or a table describing the \"final\" value of the timeline. Every query produces a timeline which may be returned in two different ways — the final results (at a specific time) or all historic results. The \"result behavior\" configures which results are produced. Queries for historic results return the full history of how the values changed over time for each entity. Queries for final results return the latest result for each entity at the specified time (default is after all events have been processed). You determine which type of query to execute using the \"result behavior\" configuration at query time. By default, historical results are returned. To return final results, you must configure the final-results behavior: Listing 1. Final queries with fenlmagic %%fenl --result-behavior final-results { time: Purchase.purchase_time, entity: Purchase.customer_id, max_amount: Purchase.amount | max(), min_amount: Purchase.amount | min(), } Listing 2. Final queries with Python from kaskada import compute query = \"\"\"{ time: Purchase.purchase_time, entity: Purchase.customer_id, max_amount: last(Purchase.amount) | max(), min_amount: Purchase.amount | min() }\"\"\" resp = query.create_query(expression=query, result_behavior=\"final-results\") Listing 3. Final queries in the CLI ./kaskada-cli query run --result-behavior final-results 100) Views may reference other views, so we could give this expression a name and create a view for it as well if we wanted to. Views are useful any time you need to share or re-use expressions: Cleaning operations Common business logic Final feature vectors For more help with tables and views, see Working with Tables and Working with Views. --data-token: Enables repeatable queries. Queries performed against the same data token always run on the same input data. use the data token id returned after loading the first file, and results only include rows from the first file %%fenl --data-token bdc9e595-a8a0-448c-9a95-c2e3d886b633 purchases data_token_id: \"bdc9e595-a8a0-448c-9a95-c2e3d886b633\" request_details { request_id: \"3f737ff336666515a54dd29a9c5ace3a\" } id purchase_time customer_id vendor_id amount subsort_id 0 cb_001 2020-01-01 00:00:00 karen chum_bucket 9 0 1 kk_001 2020-01-01 00:00:00 patrick krusty_krab 3 1 2 cb_002 2020-01-02 00:00:00 karen chum_bucket 2 2 3 kk_002 2020-01-02 00:00:00 patrick krusty_krab 5 3 4 cb_003 2020-01-03 00:00:00 karen chum_bucket 4 4 5 kk_003 2020-01-03 00:00:00 patrick krusty_krab 12 5 6 cb_004 2020-01-04 00:00:00 patrick chum_bucket 5000 6 7 cb_005 2020-01-04 00:00:00 karen chum_bucket 3 7 8 cb_006 2020-01-05 00:00:00 karen chum_bucket 5 8 9 kk_004 2020-01-05 00:00:00 patrick krusty_krab 9 9 use the data token id returned after loading the second file, and results rows from both files %%fenl --data-token 24c83cac-8cf4-4a45-98f0-dac8d5b303a2 purchases data_token_id: \"24c83cac-8cf4-4a45-98f0-dac8d5b303a2\" request_details { request_id: \"3f737ff336666515a54dd29a9c5ace3a\" } id purchase_time customer_id vendor_id amount subsort_id 0 cb_001 2020-01-01 00:00:00 karen chum_bucket 9 0 1 kk_001 2020-01-01 00:00:00 patrick krusty_krab 3 1 2 cb_002 2020-01-02 00:00:00 karen chum_bucket 2 2 3 kk_002 2020-01-02 00:00:00 patrick krusty_krab 5 3 4 cb_003 2020-01-03 00:00:00 karen chum_bucket 4 4 5 kk_003 2020-01-03 00:00:00 patrick krusty_krab 12 5 6 cb_004 2020-01-04 00:00:00 patrick chum_bucket 5000 6 7 cb_005 2020-01-04 00:00:00 karen chum_bucket 3 7 8 cb_006 2020-01-05 00:00:00 karen chum_bucket 5 8 9 kk_004 2020-01-05 00:00:00 patrick krusty_krab 9 9 10 kk_005 2020-01-06 00:00:00 patrick krusty_krab 2 0 11 wh_001 2020-01-06 00:00:00 spongebob weenie_hut 7 1 12 cb_007 2020-01-07 00:00:00 spongebob chum_bucket 34 2 13 wh_002 2020-01-08 00:00:00 karen weenie_hut 8 3 14 kk_006 2020-01-08 00:00:00 patrick krusty_krab 9 4 --result-behavior: Determines which results are returned. use all-results (default) to return all the results for each entity: %%fenl --result-behavior all-results purchases data_token_id: \"7bd4e740-9e63-418e-ba9b-5582db010959\" request_details { request_id: \"1badb8b0e220e26cc15b93b234ac3c14\" } id purchase_time customer_id vendor_id amount subsort_id 0 cb_001 2020-01-01 00:00:00 karen chum_bucket 9 0 1 kk_001 2020-01-01 00:00:00 patrick krusty_krab 3 1 2 cb_002 2020-01-02 00:00:00 karen chum_bucket 2 2 3 kk_002 2020-01-02 00:00:00 patrick krusty_krab 5 3 4 cb_003 2020-01-03 00:00:00 karen chum_bucket 4 4 5 kk_003 2020-01-03 00:00:00 patrick krusty_krab 12 5 6 cb_004 2020-01-04 00:00:00 patrick chum_bucket 5000 6 7 cb_005 2020-01-04 00:00:00 karen chum_bucket 3 7 8 cb_006 2020-01-05 00:00:00 karen chum_bucket 5 8 9 kk_004 2020-01-05 00:00:00 patrick krusty_krab 9 9 10 kk_005 2020-01-06 00:00:00 patrick krusty_krab 2 0 11 wh_001 2020-01-06 00:00:00 spongebob weenie_hut 7 1 12 cb_007 2020-01-07 00:00:00 spongebob chum_bucket 34 2 13 wh_002 2020-01-08 00:00:00 karen weenie_hut 8 3 14 kk_006 2020-01-08 00:00:00 patrick krusty_krab 9 4 use final-results to return only the most recent event for each entity %%fenl --result-behavior final-results purchases data_token_id: \"7bd4e740-9e63-418e-ba9b-5582db010959\" request_details { request_id: \"145bc51d9bac47f17fd202e5785e58b7\" } id purchase_time customer_id vendor_id amount subsort_id 0 kk_006 2020-01-08 00:00:00 patrick krusty_krab 9 4 1 wh_002 2020-01-08 00:00:00 karen weenie_hut 8 3 2 cb_007 2020-01-07 00:00:00 spongebob chum_bucket 34 2 --preview-rows: Produces a preview of the data with approximately this many rows. Setting a limit allows you to quickly iterate on features and verify your results before running them over your full dataset set to 50 on the transactions table to return a preview of at least 50 rows %%fenl --preview-rows 50 transactions Returns a dataframe of 71599 rows, instead of the full dataset of 100000 rows. It may seem odd that many thousands of rows were returned when only 50 were requested. This happens because query operates on batches and will return the results of all batches processed in order to reach the minimum set of rows requested. In this case, compute processed only a single batch, but the batch had a size of 71599 rows. Note: Using --preview-rows with --result-behavior final-results will cause the full dataset to be processed, as all inputs must be processed to produce final results.","title":"Queries","component":"kaskada","version":"main","name":"queries","url":"/kaskada/main/developing/queries.html","titles":[{"text":"Query syntax quickstart","hash":"query-syntax-quickstart","id":1},{"text":"Viewing and filtering the contents of a table","hash":"viewing-and-filtering-the-contents-of-a-table","id":2},{"text":"Stateful aggregations","hash":"stateful-aggregations","id":3},{"text":"Automatic joins","hash":"automatic-joins","id":4},{"text":"Event-based windowing","hash":"event-based-windowing","id":5},{"text":"Pipelined operations","hash":"pipelined-operations","id":6},{"text":"Row generators","hash":"row-generators","id":7},{"text":"Continuous expressions","hash":"continuous-expressions","id":8},{"text":"Native time travel","hash":"native-time-travel","id":9},{"text":"Simple, composable syntax","hash":"simple-composable-syntax","id":10},{"text":"Configuring how queries are computed","hash":"configuring-how-queries-are-computed","id":11},{"text":"Configuring how timelines are converted into tables","hash":"configuring-how-timelines-are-converted-into-tables","id":12},{"text":"Querying with Python","hash":"querying-with-python","id":13},{"text":"Optional Parameters (with Python)","hash":"optional-parameters-with-python","id":14},{"text":"Querying with fenlmagic","hash":"querying-with-fenlmagic","id":15},{"text":"Optional Parameters (with fenlmagic)","hash":"optional-parameters-with-fenlmagic","id":16},{"text":"Tables and Views","hash":"tables-and-views","id":17},{"text":"Using --data-token","hash":"using-data-token","id":18},{"text":"Using --result-behavior","hash":"using-result-behavior","id":19},{"text":"Using --preview-rows","hash":"using-preview-rows","id":20}]},"5":{"id":5,"text":"Kaskada offers the ability to interact with slices of datasets. A slice represents a way to filter a large dataset to create a smaller dataset. By slicing a large dataset, queries may access a subset of the data and thus run significantly faster. Slices preserve the statistical properties of the entire dataset. In general, slices either include all of a given entity’s data or none of it - sampling occurs at the granularity of individual entities. Slicing only ever affects the produced set of results - never the data used to produce a given result. As a result, some expressions like lookup cannot slice as efficiently as others because the entire dataset may be required to produce any result. This filter type slices the input dataset down to a percentage of the entity keys. Recall that Kaskada manages data with tables, and creating a table requires an entity_key_column_name. An entity key is a key associated with each row. The entity should identify a thing in the world related to each event. This filter will read every row and remove rows based on the entity key column in a deterministic and scalable fashion. The filter only runs on the new data when adding additional data to the table. Re-computation of previous sliced data is not required. Here is an example of creating an entity key filter in Python: from kaskada.slice_filters import EntityPercentFilter filter_percentage = 12.34 entity_filter = EntityPercentFilter(filter_percentage) The example above creates a new EntityPercentFilter from the Kaskada Compute module with a filtering percentage of 12.34%. The provided filter percentage must be between 0.1% and 100% inclusive. Slices with larger percentages include entities from smaller percentages. For example: Given a slice with 10% included results from entities: A, B, and C. A slice with 20% would at least include A, B, and C plus additional entities D, E, and F. If new data is added to the table, the previously sliced entity keys will also be included in the latest data with an additional probability of new entity keys. For example: Given a slice with 10% included results from entities: A and B. New data is uploaded to the table with entities: A, C, D, and E. A will automatically be included in the slice. C, D, and E all have a 10% chance of being included in the slice. The usage of a slice is only applicable at query time, and only one filter can be applied per query. To apply a filter to a query, use the Kaskada module method: set_default_slice. After setting the slice, all subsequent queries will utilize the slice filter on the same session. from kaskada.slice_filters import EntityPercentFilter filter_percentage = 12.34 entity_filter = EntityPercentFilter(filter_percentage) kda.set_default_slice(entity_filter) %%fenl { time: Purchase.purchase_time, entity: Purchase.customer_id, max_amount: Purchase.amount | max(), min_amount: Purchase.amount | min(), } from kaskada import compute from kaskada.api.session import LocalBuilder from kaskada.slice_filters import EntityPercentFilter session = LocalBuilder().build() filter_percentage = 12.34 entity_filter = EntityPercentFilter(filter_percentage) kda.set_default_slice(entity_filter) query = ''' { time: Purchase.purchase_time, entity: Purchase.customer_id, max_amount: last(Purchase.amount) | max(), min_amount: Purchase.amount | min() } ''' compute.query(query=query) The entity keys filter slices the input dataset to the provided entity keys. Once the filter is applied, only data with an entity key in the provided entity keys will be queryable. Currently, we only support numeric and string entity key filtering. Here is an example of creating an entity key filter: from kaskada.slice_filters import EntityFilter entity_keys = [\"customer_01\", \"customer_03\"] entity_filter = EntityFilter(entity_keys) The example above creates a new EntityFilter from the Kaskada Compute module with entity key filters for \"customer_01\" and \"customer_03\". The provided keys must match the table’s entity key type, and only numeric/string types are supported.","title":"Slices","component":"kaskada","version":"main","name":"slices","url":"/kaskada/main/developing/slices.html","titles":[{"text":"Entity Key Percent Filter","hash":"entity-key-percent-filter","id":1},{"text":"Entity Key Percent Filter Additional Details","hash":"entity-key-percent-filter-additional-details","id":2},{"text":"Usage","hash":"usage","id":3},{"text":"IPython (Jupyter) Extension","hash":"ipython-jupyter-extension","id":4},{"text":"Python","hash":"python","id":5},{"text":"Entity Keys Filter","hash":"entity-keys-filter","id":6},{"text":"Entity Key Filter Additional Details","hash":"entity-key-filter-additional-details","id":7}]},"6":{"id":6,"text":"Kaskada stores data in tables. Tables consist of multiple rows, and each row is a value of the same type. Every table is associated with a schema which defines the structure of each event in the table. Schemas are inferred from the data you load into a table, however, some columns are required by Kaskada’s data model. Every table must include a column identifying the time and entity associated with each row. When creating a table, you must tell Kaskada which columns contain the time and entity of each row: The time column is specified using the time_column_name parameter. This parameter must identify a column name in the table’s data which contains time values. The time should refer to when the event occurred. The entity key is specified using the entity_key_column_name parameter. This parameter must identify a column name in the table’s data which contains the entity key value. The entity key should identify a thing in the world that each event is associated with. Don’t worry too much about picking the \"right\" value - it’s easy to change the entity using the with_key() function. You may additionally configure the table’s behavior by specifying the following parameters: An subsort column associated with each row is specified using the subsort_column_name parameter. This value is used to order rows associated with the same time value. If no subsort column is provided, Kaskada will generate one. The type of entity is specified using the grouping_id parameter. The grouping ID specifies what kind of entity each event is associated with, for example \"User\" or \"Purchase\". When combining events from different tables, events with the same entity key and grouping ID are treated as being part of the same entity. For more information about the expected structure of input files, see Expected File Format Here is an example of creating a table: Listing 1. with Python: from kaskada import table from kaskada.api.session import LocalBuilder session = LocalBuilder().build() table.create_table( # The table's name table_name = \"Purchase\", # The name of a column in your data that contains the time associated with each row time_column_name = \"purchase_time\", # The name of a column in your data that contains the entity key associated with each row entity_key_column_name = \"customer_id\", ) This creates a table named Purchase. Any data loaded into this table must have a timestamp field named purchase_time, customer_id, and a field called subsort_id. Idiomatic Kaskada We like to use CamelCase to name tables because it helps distinguish data sources from transformed values and function names. The list table method returns all tables defined for your user. An optional search string can filter the results. Here is an example of listing tables: Listing 2. with Python: from kaskada import table from kaskada.api.session import LocalBuilder session = LocalBuilder().build() table.list_tables() You can get a table using its name: Listing 3. with Python: from kaskada import table from kaskada.api.session import LocalBuilder session = LocalBuilder().build() table.get_table(table = \"Purchase\") Tables are currently immutable. Updating a table requires deleting it and then re-creating it with a new expression. You can delete a table using its name: Listing 4. with Python: from kaskada import table from kaskada.api.session import LocalBuilder session = LocalBuilder().build() table.delete_table(table = \"Purchase\") Listing 5. with the CLI: ./kaskada-cli table delete -t Purchase Note that deleting a table also deletes any events uploaded to it. A failed precondition error is returned if another view and/or materialization references the table. To continue with the deletion of the table, delete the dependent resources or supply the force flag to delete the table forcefully. Forcefully deleting a table without deleting the dependent resources may result in the dependent resources functioning incorrectly. from kaskada import table from kaskada.api.session import LocalBuilder session = LocalBuilder().build() table.delete_table(table = \"Purchase\", force = True) The CLI manages Kaskada resources declaratively by managing spec files. A spec file is a YAML file describing a set of Kaskada resources, for examples tables and views. The CLI uses a \"declarative\" API - rather than modifying resources directly you describe the desired state of Kaskada, and the kaskada-cli sync command makes whatever changes are needed to achieve this state. To create a table, add the table’s description to your spec file and run kaskada-cli sync apply. To update a table, change the table’s description in your spec file and run kaskada-cli sync apply. To delete a table, see deleting a table Tables are described in a spec file as a list of table objects under the tables key: # The name of the table - tableName: GamePlay # A field containing the time associated with each event timeColumnName: event_at # An initial entity key associated with each event entityKeyColumnName: entity_key # An (optional) subsort column associated with each event subsortColumnName: offset # A name describing the entity key groupingId: User # Where the table's data will be stored # The default storage location is 'kaskada', and uses local files to store events. source: kaskada: {} # The name of the table - tableName: Purchase # A field containing the time associated with each event timeColumnName: event_at # An initial entity key associated with each event entityKeyColumnName: entity_id # A name describing the entity key groupingId: User # Where the table's data will be stored # The default storage location is 'kaskada', and uses local files to store events. source: kaskada: {} You can export all the tables currently defined using the CLI. kaskada-cli sync export --all The export result is shown below tables: - tableName: GamePlay timeColumnName: event_at entityKeyColumnName: entity_key subsortColumnName: offset groupingId: User source: kaskada: {} - tableName: Purchase timeColumnName: event_at entityKeyColumnName: entity_id groupingId: User source: kaskada: {} views: # ... Alternately, if you know a specific table you’d like to export you can specify it explicitly. kaskada-cli sync export --table Purchase tables: - tableName: Purchase timeColumnName: event_at entityKeyColumnName: entity_id groupingId: User source: kaskada: {} To change a table with the CLI, you first modify the table in a spec file, then \"apply\" the spec file with the CLI. When a spec file is applied, the CLI inspects all of the server’s resources and all of the resources defined in your spec file, then takes whatever actions are necessary to reconcile the server’s state. Applying a spec can create new tables, change a tables’s mutable fields, or delete tables. Table updates are destructive Tables are currently immutable. When the CLI updates a table, it does so by deleting the table and re-creating it. When this happens, all data previously loaded into the table is lost. Before applying a spec file, it’s a good idea to see what changes will be made. You can see these changes by creating an apply plan. kaskada-cli sync plan --file spec.yaml # > 2:18PM INF starting plan # > 2:18PM INF resource not found on system, will create it kind=*kaskadav1alpha.Table name=GamePlay # > 2:18PM INF resource not found on system, will create it kind=*kaskadav1alpha.Table name=Purchase # > 2:18PM INF Success! Running this command will not make any changes to the server, but will print out the changes that will be made if you apply the given spec file. You can apply a spec file using the CLI. kaskada-cli sync apply --file spec.yaml # > 2:25PM INF starting apply # > 2:25PM INF resource not found on system, will create it kind=*kaskadav1alpha.Table name=GamePlay # > 2:25PM INF resource not found on system, will create it kind=*kaskadav1alpha.Table name=Purchase # > 2:25PM INF created resource with provided spec kind=*kaskadav1alpha.Table name=GamePlay # > 2:25PM INF created resource with provided spec kind=*kaskadav1alpha.Table name=Purchase # > 2:25PM INF Success!","title":"Tables","component":"kaskada","version":"main","name":"tables","url":"/kaskada/main/developing/tables.html","titles":[{"text":"Managing tables","hash":"managing-tables","id":1},{"text":"Creating a Table","hash":"creating-a-table","id":2},{"text":"List Tables","hash":"list-tables","id":3},{"text":"Get Table","hash":"get-table","id":4},{"text":"Updating a Table","hash":"updating-a-table","id":5},{"text":"Deleting a Table","hash":"deleting-a-table","id":6},{"text":"Managing tables with the CLI and Spec files","hash":"managing-tables-with-the-cli-and-spec-files","id":7},{"text":"Creating, updating and deleting tables with the CLI","hash":"creating-updating-and-deleting-tables-with-the-cli","id":8},{"text":"The format of tables in a spec file.","hash":"the-format-of-tables-in-a-spec-file","id":9},{"text":"Exporting the current tables as a spec file.","hash":"exporting-the-current-tables-as-a-spec-file","id":10},{"text":"Updating Kaskada to reflect the contents of a spec file","hash":"updating-kaskada-to-reflect-the-contents-of-a-spec-file","id":11}]},"7":{"id":7,"text":"Fenl expressions can be shared and re-used by creating a view. A view is a named expression. In subsequent Fenl expressions, the view’s name is synonymous with the view’s expression. Views are persisted in the Kaskada manager and are accessible to any query. Once you’ve created a view, you can use the view’s name anywhere you could use the view’s expression - the only restriction placed on views is that they must be valid expressions. Views may reference other views. Views are useful any time you need to share or re-use expressions: Cleaning operations Common business logic ML feature definitions To create a view, we’ll start by describing the expression we’d like to name. In this case, we’re interested in some purchase statistics for each user. This definition depends on business logic and might require some iteration to get just right. Listing 1. with Python: from kaskada import view from kaskada.api.session import LocalBuilder session = LocalBuilder().build() view.create_view( view_name = \"PurchaseStats\", expression = \"{ time: Purchase.purchase_time, entity: Purchase.customer_id, max_amount: Purchase.amount | max(), min_amount: Purchase.amount | min(), }\" ) This creates a view names PurchaseStats. Idiomatic Kaskada We like to use CamelCase for view names. This is the same naming convention as we use for tables, and helps to communicate that we’re referring to a persistent resource in the Kaskada system, as opposed to a temporary local value created as part of a query. If you’re using IPython/Jupyter, you can create a view from the contents of a %%fenl block using the --var argument %%fenl --var purchase_stats { time: Purchase.purchase_time, entity: Purchase.customer_id, max_amount: Purchase.amount | max(), min_amount: Purchase.amount | min(), } Adding --var purchase_stats to the beginning of the magic block causes the extension to assign the query result to the variable purchase_stats when the block is run. We can use this variable to create a view using the Python client without re-typing the expression: from kaskada import view from kaskada.api.session import LocalBuilder session = LocalBuilder().build() view.create_view( view_name = \"PurchaseStats\", expression = purchase_stats.expression, ) The list views method returns all views defined for your user. An optional search string can filter the response set. Here is an example of listing tables: Listing 2. with Python: from kaskada import view from kaskada.api.session import LocalBuilder session = LocalBuilder().build() view.list_views(\"Purchase\") You can get a view using its name: Listing 3. with Python: from kaskada import view from kaskada.api.session import LocalBuilder session = LocalBuilder().build() view.get_view(\"PurchaseStats\") Views are currently immutable. Updating a view requires deleting that view and then re-creating it. You can delete a view using its name: Listing 4. with Python: from kaskada import view from kaskada.api.session import LocalBuilder session = LocalBuilder().build() view.delete_view(\"PurchaseStats\") Listing 5. with the CLI: ./kaskada-cli view delete -v PurchaseStats The CLI manages Kaskada resources declaratively by managing spec files. A spec file is a YAML file describing a set of Kaskada resources, for examples tables and views. The CLI uses a \"declarative\" API - rather than modifying resources directly you describe the desired state of Kaskada, and the kaskada-cli sync command makes whatever changes are needed to achieve this state. To create a view, add the view’s description to your spec file and run kaskada-cli sync apply. To update a view, change the view’s description in your spec file and run kaskada-cli sync apply. To delete a view, see Deleting a view. Views are described in a spec file as a list of view objects under the views key: views: # A name used to refer to the view in queries - view_name: PurchaseStats # The expression to substitute anywhere the view's name is used expression: | { time: Purchase.purchase_time, entity: Purchase.customer_id, max_amount: Purchase.amount | max(), min_amount: Purchase.amount | min(), count: CountPurchase, } # A name used to refer to the view in queries - view_name: CountPurchase # The expression to substitute anywhere the view's name is used expression: count(Purchase) You can export all the views currently defined using the CLI. kaskada-cli sync export --all The export result is shown below tables: # ... views: - view_id: dd61...70e9 view_name: CountPurchase expression: count(Purchase) Alternately, if you know a specific view you’d like to export you can specify it explicitly. kaskada-cli sync export --view PurchaseStats To change a view with the CLI, you first modify the view in a spec file, then \"apply\" the spec file with the CLI. When a spec file is applied, the CLI inspects all of the server’s resources and all of the resources defined in your spec file, then takes whatever actions are necessary to reconcile the server’s state. Applying a spec can create new views, change a view’s mutable fields, or delete views. View updates are destructive Vies are currently immutable. When the CLI updates a view, it does so by deleting the view and re-creating it. When this happens, the view may be temporarily unavailable to queries. Before applying a spec file, it’s a good idea to see what changes will be made. You can see these changes by creating an apply plan. kaskada-cli sync plan --file spec.yaml Running this command will not make any changes to the server, but will print out the changes that will be made if you apply the given spec file. You can apply a spec file using the CLI. kaskada-cli sync apply --file spec.yaml","title":"Views","component":"kaskada","version":"main","name":"views","url":"/kaskada/main/developing/views.html","titles":[{"text":"Managing views","hash":"managing-views","id":1},{"text":"Creating a View","hash":"creating-a-view","id":2},{"text":"List Views","hash":"list-views","id":3},{"text":"Get View","hash":"get-view","id":4},{"text":"Updating a View","hash":"updating-a-view","id":5},{"text":"Deleting a view","hash":"deleting-a-view","id":6},{"text":"Managing views with the CLI and Spec files","hash":"managing-views-with-the-cli-and-spec-files","id":7},{"text":"Creating, updating and deleting views with the CLI","hash":"creating-updating-and-deleting-views-with-the-cli","id":8},{"text":"The format of views in a spec file.","hash":"the-format-of-views-in-a-spec-file","id":9},{"text":"Exporting the current views as a spec file.","hash":"exporting-the-current-views-as-a-spec-file","id":10},{"text":"Updating Kaskada to reflect the contents of a spec file","hash":"updating-kaskada-to-reflect-the-contents-of-a-spec-file","id":11}]},"8":{"id":8,"text":"Temporal computation is most important when dealing with aggregations, because aggregations incorporate values associated with different times. We can think of aggregations as consuming a stream of input values and producing a stream of output values. By default each time an aggregation consumes an input it produces an output. In this case the time associated with each output is the same as the time associated with the corresponding input, and the output’s value is the result of applying the aggregation to all the inputs consumed up to that time. Purchase.amount | sum() Time Purchase.amount …​ sum() 2012-02-23 5 5 2012-05-10 2 7 2018-11-03 13 20 2019-10-26 4 The default behavior of aggregations is to produce an output whose value is an aggregation of all inputs seen to date each time an input is consumed. This behavior can be controlled using windowed aggregations. The first aspect describes the set of input values used in an aggregation. The default behavior is for every input value to contribute. In some cases it may be preferable to only include the N most recent inputs, or to include every input since a particular event occurred. The second aspect describes when the result of the aggregation should be produced. The default behavior is to produce an output value every time an input value is consumed. In some cases it may be preferable to produce an output value at the end of each day, when a particular event occurs. Aggregations may be windowed by providing a window generator for the aggregation’s window parameter. For example the sliding(2, is_valid(Purchase)) window generator computes the sum of the two most recent valid purchases. The sliding(n, bool) window generator affects what is aggregated but retains the default when behavior of producing an output associated with each input. Purchase.amount | sum(window = sliding(2, is_valid(Purchase)) Time Purchase.amount …​ | sum(window = sliding(2, is_valid(Purchase)) 2012-02-23 5 null 2012-05-10 2 7 2018-11-03 13 15 2019-10-26 4 17 The yearly() window generator can be used to compute the total of all purchases at the beginning of each year. Purchase.amount | sum(window = since(yearly())) Time …​ | sum(window = since(yearly())) 2013-01-01 7 2014-01-01 0 2015-01-01 0 2016-01-01 0 2017-01-01 0 2018-01-01 0 2019-01-01 13 2020-01-01 4 Going Deeper Yearly windows produce values at the end of the window, but when should we stop producing windows? The set of times associated with events is finite and known when a computation takes place, but there is an unbounded number of year boundaries. To avoid producing unbounded results, Fenl limits \"cron-style\" windows to time intervals that begin before the newest event and end after the oldest event in the dataset, across all entities. Events may be aggregated multiple times. The events themselves are a sequence of timestamped data for each entity. The result of the first aggregation is the same — a sequence of timestamped data for each entity. Applying an additional aggregation simply aggregates over those times. For example, we can compute the average purchase amount sum. Purchase.amount | sum() | mean() Time Purchase.amount …​| sum() …​ | mean() 2012-02-23 5 5 5 2012-05-10 2 7 6 2018-11-03 13 20 10.666 2019-10-26 4 24 14","title":"Aggregation and Windowing","component":"kaskada","version":"main","name":"aggregation-and-windowing","url":"/kaskada/main/fenl/aggregation-and-windowing.html","titles":[{"text":"Basic Aggregations","hash":"basic-aggregations","id":1},{"text":"Windowed Aggregations","hash":"windowed-aggregations","id":2},{"text":"Controlling What is Aggregated","hash":"controlling-what-is-aggregated","id":3},{"text":"Controlling When is Aggregated","hash":"controlling-when-is-aggregated","id":4},{"text":"Windowing Examples","hash":"windowing-examples","id":5},{"text":"Repeated Aggregation","hash":"repeated-aggregation","id":6}]},"9":{"id":9,"text":"Function Summary add Returns the sum of two numbers. add_time Adds a timedelta (duration or interval) to a time. ceil Rounds the number up to the next largest integer. clamp Returns value clamped between the bounds min and max. coalesce Return first non-null value or null if all values are null. count Counts each new, non-null value in the input. count_if Counts each true value across in input. daily A periodic function that produces a true value at the start of each calendar day (UTC). day_of_month Return the day-of-month for the given time, starting with 1. day_of_month0 Return the day-of-month for the given time, starting with 0. day_of_year Return the day-of-year for the given time, starting with 1. day_of_year0 Return the day-of-year for the given time, starting with 0. days Produces an interval corresponding to the given number of calendar days. days_between Returns the number of days between the first and second timestamp. div Returns the division of two numbers. else Return the value if it is non-null, default otherwise. eq Return true if a is equal to b. exp Returns e^power. extend Extends a record with fields from another. first Computes the first value present across the input. floor Rounds the number down to the next smallest integer. gt Return true if a is greater than b. gte Return true if a is greater than or equal to b. hash Returns the hash of the input. hourly A periodic function that produces a true value at the start of each hour. if Return the value if condition is true, null otherwise. is_valid Returns true if input is non-null. json Creates a JSON object from a string. lag Returns a lagging value of e. last Computes the last value present across the input. len Returns the length of the string s. logical_and Returns the logical conjunction (AND) of two booleans. logical_or Returns the logical disjunction (OR) of two booleans. lookup Looks up the value for a foreign key. lower Converts the string to lower case. lt Return true if a is less than b. lte Return true if a is less than or equal to b. max Computes the maximum of values across the input. mean Computes the arithmetic mean of values across the input. min Computes the minimum of values across the input. minutely A periodic function that produces a true value at the start of each minutely. month_of_year Return the month-of-year for the given time, starting with 1. month_of_year0 Return the month-of-year for the given time, starting with 0. monthly A periodic function that produces a true value at the start of each calendar month (UTC). months Produces an interval corresponding to the given number of calendar months. months_between Returns the number of months between the first and second timestamp. mul Returns the product of two numbers. neg Returns the negation of n. neq Return true if a is not equal to b. not Returns the logical negation of a boolean. null_if Return the value if condition is false, null otherwise. powf Returns base^power. remove_fields Remove fields from a record. round Rounds the number to the nearest integer. seconds Produces a duration corresponding to the given number of seconds. seconds_between Returns the number of seconds between the first and second timestamp. select_fields Limits fields in a record to a given set. shift_to Produces the current value shifted forward to the given time. shift_until Produces the value shifted forward to the time the predicate is true. since Configures a windowed aggregation. sliding Configures sliding windowed aggregations. sqrt Returns the square root of a. stddev Computes the sample standard deviation of values across the input. sub Returns the difference of two numbers. substring Takes a substring of the input between start and end indices. sum Computes the sum of values across the input. time_of Returns the timestamp of rows in input. upper Converts the string to upper case. variance Computes the sample variance of values across the input. when Produces the current value when the condition evaluates to true. with_key Changes the grouping of the input value. year Return the year of the given timestamp. yearly A periodic function that produces a true value at the start of each calendar year (UTC). zip_max Returns the maximum of two values. zip_min Returns the minimum of two values. Function Summary a + b Returns the sum of two numbers. a / b Returns the division of two numbers. #eq Return true if a is equal to b. a > b Return true if a is greater than b. a >= b Return true if a is greater than or equal to b. a and b Returns the logical conjunction (AND) of two booleans. a or b Returns the logical disjunction (OR) of two booleans. a max. If min or max are null than no clamping on that side will be performed. Tags: math This example shows the use of clamp with both a min and max value provided. Input.a | clamp(min = 0.5, max = 9.5) Name: Input Time Column: time Group Column: key Grouping: grouping time key a 2021-01-01T00:00:00.000000000Z A 5.7 2021-01-01T00:00:00.000000000Z A 6.3 2021-01-01T00:00:00.000000000Z B 2021-01-01T00:00:00.000000000Z A time key a result 2021-01-01T00:00:00.000000000Z A 5.7 5.7 2021-01-01T00:00:00.000000000Z A 6.3 6.3 2021-01-01T00:00:00.000000000Z B 2021-01-01T00:00:00.000000000Z A This example shows the use of clamp with just a minimum bound. Input.a | clamp(min = 0.5) Name: Input Time Column: time Group Column: key Grouping: grouping time key a 2021-01-01T00:00:00.000000000Z A 5.7 2021-01-01T00:00:00.000000000Z A 6.3 2021-01-01T00:00:00.000000000Z B 2021-01-01T00:00:00.000000000Z A time key a result 2021-01-01T00:00:00.000000000Z A 5.7 5.7 2021-01-01T00:00:00.000000000Z A 6.3 6.3 2021-01-01T00:00:00.000000000Z B 2021-01-01T00:00:00.000000000Z A Return first non-null value or null if all values are null. values: One or more values to be coalesced. Note that all of the values must be promotable to the same type. For each row, return the first non-null value from that row. If all values are null, then returns null. The type of the result is the minimum type that all of the values were docs:data-model#type-promotion-rules[promotable] to. Tags: logical In this example we use coalesce to apply multiple conditions, almost like a switch statement. Each case uses if to only pass through the cases where the condition is met. One thing to be aware of when using coalesce like this is that the first non-null is taken. Which means that even if a condition is met, if the corresponding value was null, it would move on to other conditions. coalesce( # Tax exempt items Input.value | if(Input.tax_category == 'exempt'), # Flat tax (1.0) items Input.value + 1.0 | if(Input.tax_category == 'flat'), # Normal tax (10%) items Input.value * 1.1 ) Name: Input Time Column: time Group Column: key Grouping: grouping time key value tax_category 2020-01-01T00:00:00.000000000Z Ben 10.00 exempt 2020-01-02T00:00:00.000000000Z Ben 12.00 2020-01-02T01:00:00.000000000Z Ryan 13.00 flat 2020-01-02T01:00:00.000000000Z Ryan exempt time key value tax_category result 2020-01-01T00:00:00.000000000Z Ben 10.0 exempt 10.0 2020-01-02T00:00:00.000000000Z Ben 12.0 13.200000000000001 2020-01-02T01:00:00.000000000Z Ryan 13.0 flat 14.0 2020-01-02T01:00:00.000000000Z Ryan exempt Counts each new, non-null value in the input. input: The input to be counted. window: The window to aggregate within, as described in Aggregation Functions. If null, aggregates are across all rows for the current entity. If non-null, aggregates are within the specified window. See window functions for how to specify the aggregation window. For each input row, return the count of new, non-null rows in input up to and including the input row for the given entity. Returns 0 if there have been no such inputs. Tags: aggregation count(Input.value) Name: Input Time Column: time Group Column: key Grouping: grouping time key value 2021-01-01T00:00:00.000000000Z Ben 50.7 2021-01-02T00:00:00.000000000Z Ryan 2021-01-02T00:00:00.000000000Z Ryan 67.2 2021-01-03T00:00:00.000000000Z Ben 1.2 2021-01-04T00:00:00.000000000Z Ben 2021-01-05T00:00:00.000000000Z Ryan 2.3 time key value result 2021-01-01T00:00:00.000000000Z Ben 50.7 1 2021-01-02T00:00:00.000000000Z Ryan 0 2021-01-02T00:00:00.000000000Z Ryan 67.2 1 2021-01-03T00:00:00.000000000Z Ben 1.2 2 2021-01-04T00:00:00.000000000Z Ben 2 2021-01-05T00:00:00.000000000Z Ryan 2.3 2 Counts each true value across in input. input: The input to be counted. window: The window to aggregate within, as described in Aggregation Functions. If null, aggregates are across all rows for the current entity. If non-null, aggregates are within the specified window. See window functions for how to specify the aggregation window. For each input row, return the count of new rows containing true in input up to and including the input row for the given entity. Returns 0 if there have been no such inputs. Tags: aggregation count_if(Input.value) Name: Input Time Column: time Group Column: key Grouping: grouping time key value 2021-01-01T00:00:00.000000000Z Ben false 2021-01-02T00:00:00.000000000Z Ryan true 2021-01-03T00:00:00.000000000Z Ryan true 2021-01-04T00:00:00.000000000Z Ben true 2021-01-04T00:00:00.000000000Z Ben 2021-01-05T00:00:00.000000000Z Ryan false time key value result 2021-01-01T00:00:00.000000000Z Ben false 0 2021-01-02T00:00:00.000000000Z Ryan true 1 2021-01-03T00:00:00.000000000Z Ryan true 2 2021-01-04T00:00:00.000000000Z Ben true 1 2021-01-04T00:00:00.000000000Z Ben 1 2021-01-05T00:00:00.000000000Z Ryan false 2 A periodic function that produces a true value at the start of each calendar day (UTC). This function is often used in aggregations to produce windows or as a predicate column. Returns a boolean column with each row containing a true value at the start of the day, corresponding to time 00:00:00Z, and null at all other times. Tags: tick In this example, the daily() function is used as an argument to the `since window function. The result is a windowed aggregation that resets daily. { n: Input.n, daily_sum: sum(Input.n, window = since(daily())) } | extend({time: time_of($input), key: first(Input.key) }) Name: Input Time Column: time Group Column: key Grouping: grouping time key n 1996-12-19T04:00:00-00:00 Ben 1 1996-12-19T05:00:00-00:00 Ryan 2 1996-12-20T01:00:00-00:00 Ben 3 1996-12-20T22:00:00-00:00 Ben 4 1996-12-21T03:00:00-00:00 Ryan 5 1996-12-21T07:00:00-00:00 Ben 6 time key n daily_sum 1996-12-19T04:00:00.000000000 Ben 1 1 1996-12-19T05:00:00.000000000 Ryan 2 2 1996-12-20T00:00:00.000000000 Ben 1 1996-12-20T00:00:00.000000000 Ryan 2 1996-12-20T01:00:00.000000000 Ben 3 3 1996-12-20T22:00:00.000000000 Ben 4 7 1996-12-21T00:00:00.000000000 Ben 7 1996-12-21T00:00:00.000000000 Ryan 1996-12-21T03:00:00.000000000 Ryan 5 5 1996-12-21T07:00:00.000000000 Ben 6 6 In this example, the daily() function is used as an argument to the when function, which filters input. The output includes the last input row before a tick occurs. Input | last() | when(daily()) Name: Input Time Column: time Group Column: key Grouping: grouping time key n 1996-12-19T04:00:00-00:00 Ben 1 1996-12-19T05:00:00-00:00 Ryan 2 1996-12-20T01:00:00-00:00 Ben 3 1996-12-20T22:00:00-00:00 Ben 4 1996-12-21T03:00:00-00:00 Ryan 5 1996-12-21T07:00:00-00:00 Ben 6 time key n 1996-12-19T04:00:00-00:00 Ben 1 1996-12-19T05:00:00-00:00 Ryan 2 1996-12-20T22:00:00-00:00 Ben 4 1996-12-19T05:00:00-00:00 Ryan 2 Return the day-of-month for the given time, starting with 1. time: The timestamp to return the day-of-month for. Returns a u32 column containing the day-of-month for each input time. Returns null for rows where time is null. The first day of the month is 1. The result will be in the range 1 to 31 (inclusive). Tags: time day_of_month(Input.time) Name: Input Time Column: time Group Column: key Grouping: grouping time key 1996-03-21T00:00:00-00:00 Ben 1996-04-21T00:00:00-00:00 Ryan 1996-05-21T00:00:00-00:00 Ryan 1996-06-21T00:00:00-00:00 Ryan 1996-07-21T00:00:00-00:00 Ben 1996-08-21T00:00:00-00:00 Ben time key result 1996-03-21T00:00:00-00:00 Ben 21 1996-04-21T00:00:00-00:00 Ryan 21 1996-05-21T00:00:00-00:00 Ryan 21 1996-06-21T00:00:00-00:00 Ryan 21 1996-07-21T00:00:00-00:00 Ben 21 1996-08-21T00:00:00-00:00 Ben 21 Return the day-of-month for the given time, starting with 0. time: The timestamp to return the day-of-month for. Returns a u32 column containing the day-of-month for each input time. Returns null for rows where time is null. The first day of the month is 0. The result will be in the range 0 to 30 (inclusive). Tags: time day_of_month0(Input.time) Name: Input Time Column: time Group Column: key Grouping: grouping time key 1996-03-21T00:00:00-00:00 Ben 1996-04-21T00:00:00-00:00 Ryan 1996-05-21T00:00:00-00:00 Ryan 1996-06-21T00:00:00-00:00 Ryan 1996-07-21T00:00:00-00:00 Ben 1996-08-21T00:00:00-00:00 Ben time key result 1996-03-21T00:00:00-00:00 Ben 20 1996-04-21T00:00:00-00:00 Ryan 20 1996-05-21T00:00:00-00:00 Ryan 20 1996-06-21T00:00:00-00:00 Ryan 20 1996-07-21T00:00:00-00:00 Ben 20 1996-08-21T00:00:00-00:00 Ben 20 Return the day-of-year for the given time, starting with 1. time: The timestamp to return the day-of-year for. Returns a u32 column containing the day-of-year for each input time. Returns null for rows where time is null. The first day of the month is 1. The result will be in the range 1 to 366 (inclusive). Tags: time day_of_year(Input.time) Name: Input Time Column: time Group Column: key Grouping: grouping time key 1996-03-21T00:00:00-00:00 Ben 1996-04-21T00:00:00-00:00 Ryan 1996-05-21T00:00:00-00:00 Ryan 1996-06-21T00:00:00-00:00 Ryan 1996-07-21T00:00:00-00:00 Ben 1996-08-21T00:00:00-00:00 Ben time key result 1996-03-21T00:00:00-00:00 Ben 81 1996-04-21T00:00:00-00:00 Ryan 112 1996-05-21T00:00:00-00:00 Ryan 142 1996-06-21T00:00:00-00:00 Ryan 173 1996-07-21T00:00:00-00:00 Ben 203 1996-08-21T00:00:00-00:00 Ben 234 Return the day-of-year for the given time, starting with 0. time: The timestamp to return the day-of-year for. Returns a u32 column containing the day-of-year for each input time. Returns null for rows where time is null. The first day of the year is 0. The result will be in the range 0 to 365 (inclusive). Tags: time day_of_year0(Input.time) Name: Input Time Column: time Group Column: key Grouping: grouping time key 1996-03-21T00:00:00-00:00 Ben 1996-04-21T00:00:00-00:00 Ryan 1996-05-21T00:00:00-00:00 Ryan 1996-06-21T00:00:00-00:00 Ryan 1996-07-21T00:00:00-00:00 Ben 1996-08-21T00:00:00-00:00 Ben time key result 1996-03-21T00:00:00-00:00 Ben 80 1996-04-21T00:00:00-00:00 Ryan 111 1996-05-21T00:00:00-00:00 Ryan 141 1996-06-21T00:00:00-00:00 Ryan 172 1996-07-21T00:00:00-00:00 Ben 202 1996-08-21T00:00:00-00:00 Ben 233 Produces an interval corresponding to the given number of calendar days. days: The number of days to create the interval for. Returns an interval_days column with each row containing the value of days converted to an interval with the corresponding number of days. Rows where days is null, less than 0 or greater than i32::MAX will be null. Tags: time This example uses add_time to add the created interval to the time column. Input.time | add_time(days(Input.n)) Name: Input Time Column: time Group Column: key Grouping: grouping time key n 1996-03-21T00:00:00-00:00 Ben 1 1996-04-21T00:00:00-00:00 Ryan 2 1996-05-21T00:00:00-00:00 Ryan 3 1996-06-21T00:00:00-00:00 Ryan 1996-07-21T00:00:00-00:00 Ben 2 1996-08-21T00:00:00-00:00 Ben 1 time key n result 1996-03-21T00:00:00-00:00 Ben 1 1996-03-22T00:00:00.000000000 1996-04-21T00:00:00-00:00 Ryan 2 1996-04-23T00:00:00.000000000 1996-05-21T00:00:00-00:00 Ryan 3 1996-05-24T00:00:00.000000000 1996-06-21T00:00:00-00:00 Ryan 1996-07-21T00:00:00-00:00 Ben 2 1996-07-23T00:00:00.000000000 1996-08-21T00:00:00-00:00 Ben 1 1996-08-22T00:00:00.000000000 Returns the number of days between the first and second timestamp. t1: The first timestamp t2: The second timestamp Returns an interval_days column representing the number of whole days between the two timestamps. Fractional days will be rounded towards zero. In rows where t1 or t2 are null, the result will be null. If t1 is before t2, the result will be positive. If t1 is after t2 the result will be negative. Tags: time Note that the expression uses as i32 to convert the interval_days to the integer number of days. This discards the units. days_between(Input.time, Input.date) as i32 Name: Input Time Column: time Group Column: key Grouping: grouping time key date 1996-03-21T00:00:00-00:00 Ben 1996-08-19T00:00:00-00:00 1996-04-21T00:00:00-00:00 Ryan 1995-07-20T00:00:00-00:00 1996-05-21T23:00:00-00:00 Ryan 1996-05-22T00:00:00-00:00 1996-06-21T00:00:00-00:00 Ryan 1996-06-19T05:00:00-00:00 1996-07-21T00:00:00-00:00 Ben 1996-08-21T00:00:00-00:00 Ben 1996-08-22T00:00:00-00:00 time key date result 1996-03-21T00:00:00-00:00 Ben 1996-08-19T00:00:00-00:00 151 1996-04-21T00:00:00-00:00 Ryan 1995-07-20T00:00:00-00:00 -276 1996-05-21T23:00:00-00:00 Ryan 1996-05-22T00:00:00-00:00 0 1996-06-21T00:00:00-00:00 Ryan 1996-06-19T05:00:00-00:00 -1 1996-07-21T00:00:00-00:00 Ben 1996-08-21T00:00:00-00:00 Ben 1996-08-22T00:00:00-00:00 1 Returns the division of two numbers. This is the function used for the binary operation a / b. a: The left-hand side of the division. b: The right-hand side of the division. Note: Both a and b are promoted to a compatible numeric type following the docs:data-model#numeric-type-coercion-table[numeric type coercion rules]. Returns a numeric column of the promoted numeric type compatible with both a and b. The result contains null if a or b was null at that row, or if b was 0. Otherwise the row contains the resulting of dividing a by b. Tags: math operator Input.a / Input.b Name: Input Time Column: time Group Column: key Grouping: grouping time key a b 2021-01-01T00:00:00.000000000Z A 5.7 1.2 2021-01-02T00:00:00.000000000Z A 6.3 0.4 2021-01-03T00:00:00.000000000Z B 3.7 2021-01-03T00:00:00.000000000Z A 13.2 2021-01-04T00:00:00.000000000Z A 12.2 0 time key a b result 2021-01-01T00:00:00.000000000Z A 5.7 1.2 4.75 2021-01-02T00:00:00.000000000Z A 6.3 0.4 15.749999999999998 2021-01-03T00:00:00.000000000Z B 3.7 2021-01-03T00:00:00.000000000Z A 13.2 2021-01-04T00:00:00.000000000Z A 12.2 0.0 Return the value if it is non-null, default otherwise. default: The result to use if value is null. value: The result to prefer if it is non-null. Note the order of arguments has default first, so that you can use it with the pipe syntax to provide default values, as in value | else(default). For each row, returns value if it is non-null in that row, or default if value is `null. Tags: logical In this example the result is Input.a if it is non-null, and Input.b otherwise. This may be combined with if to conditionaly null out cases to implement various logical operations. When chaining multiple conditionals, it may be better to use coalesce. Input.a | else(Input.b) Name: Input Time Column: time Group Column: key Grouping: grouping time key a b 2021-01-01T00:00:00.000000000Z X 57.8 63 2021-01-02T00:00:00.000000000Z Y 86.3 2021-01-03T00:00:00.000000000Z X 6873 2021-01-04T00:00:00.000000000Z X time key a b result 2021-01-01T00:00:00.000000000Z X 57.8 63.0 57.8 2021-01-02T00:00:00.000000000Z Y 86.3 86.3 2021-01-03T00:00:00.000000000Z X 6873.0 6873.0 2021-01-04T00:00:00.000000000Z X This example shows how to use else to provide a default value for a possibly null value. Input.a | else(42.0) Name: Input Time Column: time Group Column: key Grouping: grouping time key a b 2021-01-01T00:00:00.000000000Z X 57.8 63 2021-01-02T00:00:00.000000000Z Y 86.3 2021-01-03T00:00:00.000000000Z X 6873 2021-01-04T00:00:00.000000000Z X time key a b result 2021-01-01T00:00:00.000000000Z X 57.8 63.0 57.8 2021-01-02T00:00:00.000000000Z Y 86.3 42.0 2021-01-03T00:00:00.000000000Z X 6873.0 6873.0 2021-01-04T00:00:00.000000000Z X 42.0 Return true if a is equal to b. This is the function used for the binary comparison a == b. a: The left hand side of the comparison. b: The right hand side of the comparison. Note: Both a and b must be of the same type. If they differ, they may be promoted to a compatible numeric type following the docs:data-model#numeric-type-coercion-table[numeric type coercion rules]. Returns a bool column indicating the results. For each row, it contains null if a or b are null, true if they are equal and false if they are not equal. Tags: comparison operator Input.a == Input.b Name: Input Time Column: time Group Column: key Grouping: grouping time key a b 2021-01-01T00:00:00.000000000Z Ben 50.7 6.0 2021-01-02T00:00:00.000000000Z Ryan 70 2021-01-03T00:00:00.000000000Z Ryan 67.2 71.3 2021-01-04T00:00:00.000000000Z Ben 1.2 1.2 2021-01-05T00:00:00.000000000Z Ben 65 2021-01-06T00:00:00.000000000Z Jordan 2.3 68.7 2021-01-07T00:00:00.000000000Z Ryan time key a b result 2021-01-01T00:00:00.000000000Z Ben 50.7 6.0 false 2021-01-02T00:00:00.000000000Z Ryan 70.0 2021-01-03T00:00:00.000000000Z Ryan 67.2 71.3 false 2021-01-04T00:00:00.000000000Z Ben 1.2 1.2 true 2021-01-05T00:00:00.000000000Z Ben 65.0 2021-01-06T00:00:00.000000000Z Jordan 2.3 68.7 false 2021-01-07T00:00:00.000000000Z Ryan Returns e^power. power: The power to raise e to. The exponential function applies to f64 numbers only. Other numbers will be implicitly promoted. Returns a column of f64 values. Each row contains null if power is null. Otherwise, the row contains the value e ^ power. Tags: math exp(Input.a) Name: Input Time Column: time Group Column: key Grouping: grouping time key a 2021-01-01T00:00:00.000000000Z A 5.7 2021-01-02T00:00:00.000000000Z A 6.3 2021-01-02T00:00:00.000000000Z B time key a result 2021-01-01T00:00:00.000000000Z A 5.7 298.8674009670603 2021-01-02T00:00:00.000000000Z A 6.3 544.571910125929 2021-01-02T00:00:00.000000000Z B Extends a record with fields from another. new: The record column containing the new fields. old: The record column containing the old fields. Note: The order of parameters is chosen to allow old | extend(new) as a way to add fields to the old record. Returns a column containing the combined record fields from both old and new. If either old or new are null then the fields from the given record are null. If a field exists in both old and new, the value from new is preferred. Tags: record extend(Input, { sum: Input.a + Input.b, five: 5 }) Name: Input Time Column: time Group Column: key Grouping: grouping time key a b 2021-01-01T00:00:00.000000000Z A 5 1.2 2021-01-02T00:00:00.000000000Z A 6.3 0.4 2021-03-01T00:00:00.000000000Z B 3.7 2021-04-10T00:00:00.000000000Z A 13 time key a b sum five 2021-01-01T00:00:00.000000000Z A 5.0 1.2 6.2 5 2021-01-02T00:00:00.000000000Z A 6.3 0.4 6.7 5 2021-03-01T00:00:00.000000000Z B 3.7 5 2021-04-10T00:00:00.000000000Z A 13.0 5 Computes the first value present across the input. input: The input to be considered. window: The window to aggregate within, as described in Aggregation Functions. If null, aggregates are across all rows for the current entity. If non-null, aggregates are within the specified window. See window functions for how to specify the aggregation window. For each input row, return the first new, non-null value in the input, up to and including the current row. Returns null until there has been at least one such input. The first value is inclusive of any values at the current time. Tags: aggregation first(Input.value) Name: Input Time Column: time Group Column: key Grouping: grouping time key value 2021-01-01T00:00:00.000000000Z Ben 50.7 2021-01-02T00:00:00.000000000Z Ryan 2021-01-02T00:00:00.000000000Z Ryan 67.2 2021-01-03T00:00:00.000000000Z Ben 1.2 2021-01-03T00:00:00.000000000Z Ben 2021-01-04T00:00:00.000000000Z Ryan 2.3 time key value result 2021-01-01T00:00:00.000000000Z Ben 50.7 50.7 2021-01-02T00:00:00.000000000Z Ryan 2021-01-02T00:00:00.000000000Z Ryan 67.2 67.2 2021-01-03T00:00:00.000000000Z Ben 1.2 50.7 2021-01-03T00:00:00.000000000Z Ben 50.7 2021-01-04T00:00:00.000000000Z Ryan 2.3 67.2 Rounds the number down to the next smallest integer. See also round and ceil. n: The number to round down. Note: This method may be applied to any numeric type. For anything other than float32 and float64 it has no affect since the values are already integers. Returns a numeric column of the same type as n. The result contains null if n was null at that row. Otherwise, it contains the result of rounding n down to the next smallest integer. Tags: math Input.a | floor() Name: Input Time Column: time Group Column: key Grouping: grouping time key a 2021-01-01T00:00:00.000000000Z A 5.7 2021-01-01T00:00:00.000000000Z A 6.3 2021-01-02T00:00:00.000000000Z B 2021-01-02T00:00:00.000000000Z B -2.3 time key a result 2021-01-01T00:00:00.000000000Z A 5.7 5.0 2021-01-01T00:00:00.000000000Z A 6.3 6.0 2021-01-02T00:00:00.000000000Z B 2021-01-02T00:00:00.000000000Z B -2.3 -3.0 Return true if a is greater than b. This is the function used for the binary comparison a > b. a: The left hand side of the comparison. b: The right hand side of the comparison. Note: Both a and b must be of the same type. If they differ, they may be promoted to a compatible numeric type following the docs:data-model#numeric-type-coercion-table[numeric type coercion rules]. Returns a bool column indicating the results. For each row, it contains null if a or b are null, true if a is greater than b, and false if a is less than or equal to b. Tags: comparison operator Input.a > Input.b Name: Input Time Column: time Group Column: key Grouping: grouping time key a b 2021-01-01T00:00:00.000000000Z Ben 50.7 6.0 2021-01-02T00:00:00.000000000Z Ryan 70 2021-01-03T00:00:00.000000000Z Ryan 67.2 71.3 2021-01-04T00:00:00.000000000Z Ben 1.2 1.2 2021-01-05T00:00:00.000000000Z Ben 65 2021-01-06T00:00:00.000000000Z Jordan 2.3 68.7 2021-01-07T00:00:00.000000000Z Ryan time key a b result 2021-01-01T00:00:00.000000000Z Ben 50.7 6.0 true 2021-01-02T00:00:00.000000000Z Ryan 70.0 2021-01-03T00:00:00.000000000Z Ryan 67.2 71.3 false 2021-01-04T00:00:00.000000000Z Ben 1.2 1.2 false 2021-01-05T00:00:00.000000000Z Ben 65.0 2021-01-06T00:00:00.000000000Z Jordan 2.3 68.7 false 2021-01-07T00:00:00.000000000Z Ryan Return true if a is greater than or equal to b. This is the function used for the binary comparison a >= b. a: The left hand side of the comparison. b: The right hand side of the comparison. Note: Both a and b must be of the same type. If they differ, they may be promoted to a compatible numeric type following the docs:data-model#numeric-type-coercion-table[numeric type coercion rules]. Returns a bool column indicating the results. For each row, it contains null if a or b are null, true if a is greater than or equal to b, and false if a is less than b. Tags: comparison operator Input.a >= Input.b Name: Input Time Column: time Group Column: key Grouping: grouping time key a b 2021-01-01T00:00:00.000000000Z Ben 50.7 6.0 2021-01-02T00:00:00.000000000Z Ryan 70 2021-01-03T00:00:00.000000000Z Ryan 67.2 71.3 2021-01-04T00:00:00.000000000Z Ben 1.2 1.2 2021-01-05T00:00:00.000000000Z Ben 65 2021-01-06T00:00:00.000000000Z Jordan 2.3 68.7 2021-01-07T00:00:00.000000000Z Ryan time key a b result 2021-01-01T00:00:00.000000000Z Ben 50.7 6.0 true 2021-01-02T00:00:00.000000000Z Ryan 70.0 2021-01-03T00:00:00.000000000Z Ryan 67.2 71.3 false 2021-01-04T00:00:00.000000000Z Ben 1.2 1.2 true 2021-01-05T00:00:00.000000000Z Ben 65.0 2021-01-06T00:00:00.000000000Z Jordan 2.3 68.7 false 2021-01-07T00:00:00.000000000Z Ryan Returns the hash of the input. input: The argument to hash. Returns a u64 column which contains the hash of the input. Note: Unlike many functions which return null if any of their arguments are null, hash will never return null. Tags: misc hash(Input.value) Name: Input Time Column: time Group Column: key Grouping: grouping time key value 2021-01-01T00:00:00.000000000Z Ben hello 2021-01-01T00:00:00.000000000Z Ryan 2021-01-02T00:00:00.000000000Z Ryan world 2021-01-03T00:00:00.000000000Z Ben hi 2021-01-04T00:00:00.000000000Z Ben 2021-01-04T00:00:00.000000000Z Ryan earth time key value result 2021-01-01T00:00:00.000000000Z Ben hello 15811883632611753650 2021-01-01T00:00:00.000000000Z Ryan 5927736130248593597 2021-01-02T00:00:00.000000000Z Ryan world 10724100356298933117 2021-01-03T00:00:00.000000000Z Ben hi 8732440231931982831 2021-01-04T00:00:00.000000000Z Ben 5927736130248593597 2021-01-04T00:00:00.000000000Z Ryan earth 2958664733073760318 hash(Input.value) Name: Input Time Column: time Group Column: key Grouping: grouping time key value 2021-01-01T00:00:00.000000000Z Ben 5 2021-01-01T00:00:00.000000000Z Ryan 8 2021-01-02T00:00:00.000000000Z Ryan 9 2021-01-03T00:00:00.000000000Z Ben 8 2021-01-04T00:00:00.000000000Z Ben 2021-01-04T00:00:00.000000000Z Ryan 9 time key value result 2021-01-01T00:00:00.000000000Z Ben 5 11871059458584583621 2021-01-01T00:00:00.000000000Z Ryan 8 4028879376188845851 2021-01-02T00:00:00.000000000Z Ryan 9 9468338612501459910 2021-01-03T00:00:00.000000000Z Ben 8 4028879376188845851 2021-01-04T00:00:00.000000000Z Ben 5791815708761125353 2021-01-04T00:00:00.000000000Z Ryan 9 9468338612501459910 A periodic function that produces a true value at the start of each hour. This function is often used in aggregations to produce windows or as a predicate column. Returns a boolean column with each row containing a true value at the start of the hour, and null at all other times. Tags: tick In this example, the hourly() function is used as an argument to the `since function, which produces a window. The result is a windowed aggregation that resets hourly. { n: Input.n, hourly_sum: sum(Input.n, window = since(hourly())) } | extend({time: time_of($input), key: first(Input.key) }) Name: Input Time Column: time Group Column: key Grouping: grouping time key n 1996-12-19T16:00:57-00:00 Ben 2 1996-12-19T16:00:58-00:00 Ryan 3 1996-12-19T17:00:59-00:00 Ben 6 1996-12-19T17:01:00-00:00 Ben 9 1996-12-19T17:01:00-00:00 Ryan 8 1996-12-19T18:00:00-00:00 Ben 1 time key n hourly_sum 1996-12-19T16:00:57.000000000 Ben 2 2 1996-12-19T16:00:58.000000000 Ryan 3 3 1996-12-19T17:00:00.000000000 Ben 2 1996-12-19T17:00:00.000000000 Ryan 3 1996-12-19T17:00:59.000000000 Ben 6 6 1996-12-19T17:01:00.000000000 Ben 9 15 1996-12-19T17:01:00.000000000 Ryan 8 8 1996-12-19T18:00:00.000000000 Ben 1 16 1996-12-19T18:00:00.000000000 Ben 16 1996-12-19T18:00:00.000000000 Ryan 8 In this example, the hourly() function is used as an argument to the when function, which filters input. The output includes the last input row before a tick occurs. Input | last() | when(hourly()) Name: Input Time Column: time Group Column: key Grouping: grouping time key n 1996-12-19T16:00:57-00:00 Ben 2 1996-12-19T16:00:58-00:00 Ryan 3 1996-12-19T17:00:59-00:00 Ben 6 1996-12-19T17:01:00-00:00 Ben 9 1996-12-19T17:01:00-00:00 Ryan 8 1996-12-19T18:00:00-00:00 Ben 1 time key n 1996-12-19T16:00:57-00:00 Ben 2 1996-12-19T16:00:58-00:00 Ryan 3 1996-12-19T18:00:00-00:00 Ben 1 1996-12-19T17:01:00-00:00 Ryan 8 Return the value if condition is true, null otherwise. if \"nulls out\" the value if condition is false. It is equivalent to null_if(!condition, value). See also null_if. condition: The condition which determines whether to return the value or null. value: The value to return if condition is true. Note: The order of arguments is chosen to allow use with the pipe operation. Specifically, value | if(condition) may be used to conditionally \"null-out\" the value on the left-hand side. For each row, return the value if condition is true. Returns null if the condition is false or null. Tags: logical Input.value | if(Input.condition) Name: Input Time Column: time Group Column: key Grouping: grouping time key value condition 2021-01-01T00:00:00.000000000Z A 57.8 false 2021-01-02T00:00:00.000000000Z B 58.7 true 2021-01-03T00:00:00.000000000Z A true 2021-01-04T00:00:00.000000000Z A 876 2021-01-05T00:00:00.000000000Z A 786.0 time key value condition result 2021-01-01T00:00:00.000000000Z A 57.8 false 2021-01-02T00:00:00.000000000Z B 58.7 true 58.7 2021-01-03T00:00:00.000000000Z A true 2021-01-04T00:00:00.000000000Z A 876.0 2021-01-05T00:00:00.000000000Z A 786.0 Returns true if input is non-null. input: The input to test for null. Returns a bool column that is true if the input is null and false otherwise. Note: Unlike many functions which return null if any of their arguments are null, is_valid will never return null. Tags: misc is_valid(Input.value) Name: Input Time Column: time Group Column: key Grouping: grouping time key value 2021-01-01T00:00:00.000000000Z Ben 5 2021-01-01T00:00:00.000000000Z Ryan 2021-01-02T00:00:00.000000000Z Ryan 7 2021-01-03T00:00:00.000000000Z Ben 3 2021-01-04T00:00:00.000000000Z Ben 2021-01-04T00:00:00.000000000Z Ryan 2 time key value result 2021-01-01T00:00:00.000000000Z Ben 5 true 2021-01-01T00:00:00.000000000Z Ryan false 2021-01-02T00:00:00.000000000Z Ryan 7 true 2021-01-03T00:00:00.000000000Z Ben 3 true 2021-01-04T00:00:00.000000000Z Ben false 2021-01-04T00:00:00.000000000Z Ryan 2 true Creates a JSON object from a string. 🚧 Warning json is experimental functionality. You should expect the behavior to potentially change in the future. Certain functionality, such as nested types, are not yet supported. This functions converts a JSON string into a JSON object. Fields of the JSON object can be accessed as strings and cast into other types. s: The JSON-formatted string. Returns a JSON object. Tags: string json(Input.json_string).a Name: Input Time Column: time Group Column: key Grouping: grouping time key json_string 2021-01-01T00:00:00.000000000Z Ben \\{\"a\": 10} 2021-01-02T00:00:00.000000000Z Ryan \\{\"a\": 2} 2021-01-03T00:00:00.000000000Z Ryan \\{\"b\": 10} 2021-01-04T00:00:00.000000000Z Ben \\{\"a\": 4} 2021-01-05T00:00:00.000000000Z Ben \\{\"c\": 12} 2021-01-06T00:00:00.000000000Z Jordan \\{\"a\": 0} 2021-01-07T00:00:00.000000000Z Ryan \\{\"a\": 8} time key json_string result 2021-01-01T00:00:00.000000000Z Ben \\{\"a\": 10} 10 2021-01-02T00:00:00.000000000Z Ryan \\{\"a\": 2} 2 2021-01-03T00:00:00.000000000Z Ryan \\{\"b\": 10} 2021-01-04T00:00:00.000000000Z Ben \\{\"a\": 4} 4 2021-01-05T00:00:00.000000000Z Ben \\{\"c\": 12} 2021-01-06T00:00:00.000000000Z Jordan \\{\"a\": 0} 0 2021-01-07T00:00:00.000000000Z Ryan \\{\"a\": 8} 8 Returns a lagging value of e. n: The amount of lag to retrieve. For instance, n = 1 is the previous non-null value, n = 2 is the non-null value before that, etc. input: The value to retrieve. Returns a new column with the same type as input, but with each row containing the value of input from n rows earlier (counting only non-null rows for the current entity). Tags: time lag(1, Input.n) Name: Input Time Column: time Group Column: key Grouping: grouping time key n 1996-03-21T00:00:00-00:00 Ben 1 1996-04-21T00:00:00-00:00 Ryan 2 1996-05-21T00:00:00-00:00 Ryan 3 1996-06-21T00:00:00-00:00 Ryan 4 1996-07-21T00:00:00-00:00 Ben 5 1996-08-21T00:00:00-00:00 Ben 6 time key n result 1996-03-21T00:00:00-00:00 Ben 1 1996-04-21T00:00:00-00:00 Ryan 2 1996-05-21T00:00:00-00:00 Ryan 3 2 1996-06-21T00:00:00-00:00 Ryan 4 3 1996-07-21T00:00:00-00:00 Ben 5 1 1996-08-21T00:00:00-00:00 Ben 6 5 This example uses lag to compute the average difference between values of n. # Will always be non-`null` after the first non-`null` `Input.n`. let prev_value = Input.n | lag(1) # Will be `null` if current `Input.n` is `null`. let difference = Input.n - prev_value in { difference, mean_difference: mean(difference), } | extend({ time: time_of($input), key: first(Input.key) }) Name: Input Time Column: time Group Column: key Grouping: grouping time key n 1996-03-21T00:00:00-00:00 Ben 1 1996-04-21T00:00:00-00:00 Ryan 2 1996-05-21T00:00:00-00:00 Ryan 1996-06-21T00:00:00-00:00 Ryan 4 1996-07-21T00:00:00-00:00 Ben 5 1996-08-21T00:00:00-00:00 Ben 6 time key difference mean_difference 1996-03-21T00:00:00.000000000 Ben 1996-04-21T00:00:00.000000000 Ryan 1996-05-21T00:00:00.000000000 Ryan 1996-06-21T00:00:00.000000000 Ryan 2 2.0 1996-07-21T00:00:00.000000000 Ben 4 4.0 1996-08-21T00:00:00.000000000 Ben 1 2.5 Computes the last value present across the input. input: The input to be considered. window: The window to aggregate within, as described in Aggregation Functions. If null, aggregates are across all rows for the current entity. If non-null, aggregates are within the specified window. See window functions for how to specify the aggregation window. For each input row, return the last new, non-null value in the input, up to and including the current row. Returns null until there has been at least one such input. The last value is inclusive of any values at the current time. This means that if the current row is new and non-null, the result will be the same of the input. If the input is not new or null, this will be the previous value that was new and non-null. Tags: aggregation As shown in the example, the last aggregation is useful for extrapolating missing results from the most recent present result. last(Input.value) Name: Input Time Column: time Group Column: key Grouping: grouping time key value 2021-01-01T00:00:00.000000000Z Ben 50.7 2021-01-02T00:00:00.000000000Z Ryan 2021-01-02T00:00:00.000000000Z Ryan 67.2 2021-01-03T00:00:00.000000000Z Ben 1.2 2021-01-03T00:00:00.000000000Z Ben 2021-01-04T00:00:00.000000000Z Ryan 2.3 time key value result 2021-01-01T00:00:00.000000000Z Ben 50.7 50.7 2021-01-02T00:00:00.000000000Z Ryan 2021-01-02T00:00:00.000000000Z Ryan 67.2 67.2 2021-01-03T00:00:00.000000000Z Ben 1.2 1.2 2021-01-03T00:00:00.000000000Z Ben 1.2 2021-01-04T00:00:00.000000000Z Ryan 2.3 2.3 Returns the length of the string s. s: The string to compute the length of. Returns an i32 column with each row containing the length of the string s in that row. Returns 0 for the empty string and null if s is null. Tags: string Input.value | len() Name: Input Time Column: time Group Column: key Grouping: grouping time key value 2021-01-01T00:00:00.000000000Z Ben Hello World 2021-01-02T00:00:00.000000000Z Ryan '' 2021-01-02T00:00:00.000000000Z Ryan Hi Earth 2021-01-03T00:00:00.000000000Z Ben Hello 2021-01-03T00:00:00.000000000Z Ben '' 2021-01-04T00:00:00.000000000Z Ryan hi time key value result 2021-01-01T00:00:00.000000000Z Ben Hello World 11 2021-01-02T00:00:00.000000000Z Ryan '' 2 2021-01-02T00:00:00.000000000Z Ryan Hi Earth 8 2021-01-03T00:00:00.000000000Z Ben Hello 5 2021-01-03T00:00:00.000000000Z Ben '' 2 2021-01-04T00:00:00.000000000Z Ryan hi 2 Returns the logical conjunction (AND) of two booleans. This is the function used for the binary operation a and b. a: The left-hand side of the conjunction. b: The right-hand side of the conjunction. Returns true if a and b are both true. Returns false if a or b are false. Returns null if a or b are null. Tags: logical operator Input.a and Input.b Name: Input Time Column: time Group Column: key Grouping: grouping time key a b 2021-01-01T00:00:00.000000000Z A true false 2021-01-02T00:00:00.000000000Z B true true 2021-01-03T00:00:00.000000000Z A false true 2021-01-04T00:00:00.000000000Z A false false 2021-01-05T00:00:00.000000000Z A true 2021-02-01T00:00:00.000000000Z B true 2021-02-02T00:00:00.000000000Z A false 2021-03-01T00:00:00.000000000Z B false time key a b result 2021-01-01T00:00:00.000000000Z A true false false 2021-01-02T00:00:00.000000000Z B true true true 2021-01-03T00:00:00.000000000Z A false true false 2021-01-04T00:00:00.000000000Z A false false false 2021-01-05T00:00:00.000000000Z A true 2021-02-01T00:00:00.000000000Z B true 2021-02-02T00:00:00.000000000Z A false false 2021-03-01T00:00:00.000000000Z B false false Returns the logical disjunction (OR) of two booleans. This is the function used for the binary operation a or b. a: The left-hand side of the disjunction. b: The right-hand side of the disjunction. Returns true if a or b are true. Returns false if a and b are both false. Returns null if a or b are null. Tags: logical operator Input.a or Input.b Name: Input Time Column: time Group Column: key Grouping: grouping time subsort key a b 2021-01-01T00:00:00.000000000Z 0 A true false 2021-01-02T00:00:00.000000000Z 0 B true true 2021-01-03T00:00:00.000000000Z 0 A false true 2021-01-04T00:00:00.000000000Z 0 A false false 2021-01-05T00:00:00.000000000Z 0 A true 2021-02-01T00:00:00.000000000Z 0 B true 2021-02-02T00:00:00.000000000Z 0 A false 2021-03-01T00:00:00.000000000Z 0 B false time subsort key a b result 2021-01-01T00:00:00.000000000Z 0 A true false true 2021-01-02T00:00:00.000000000Z 0 B true true true 2021-01-03T00:00:00.000000000Z 0 A false true true 2021-01-04T00:00:00.000000000Z 0 A false false false 2021-01-05T00:00:00.000000000Z 0 A true true 2021-02-01T00:00:00.000000000Z 0 B true true 2021-02-02T00:00:00.000000000Z 0 A false 2021-03-01T00:00:00.000000000Z 0 B false Looks up the value for a foreign key. Performs a lookup join between the key and the computed value from a foreign entity. key: Expression which computes the foreign key to lookup. This must match the type of the keys in the foreign grouping. value: Foreign expression computing the value to lookup. The value argument should normally be a continuous value (result of an aggregation). This ensures there will be an available value at the time of the lookup. For each row with a non-null key, returns the value at that time from the value computed for the entity identified by the key. Yields null if the key is null or if there is no foreign value computed for that key at the corresponding time. Tags: grouping This example operates on customer reviews. It augments each review with the average rating the customer has given and the average rating the product has received, up to that point in time. # This is the average review a product has received (keyed by products) let average_review_by_product = ProductReviewsByProduct.stars | mean() # This is the average review a customer has given (keyed by customer ID) let product_id_by_customer = ProductReviewsByCustomer.product_id let average_customer_review = ProductReviewsByCustomer.stars | mean() # Lookup the average product review for the current purchase. let average_product_review = lookup(product_id_by_customer, average_review_by_product) in { key: product_id_by_customer, average_customer_review, average_product_review, } | extend({ time: time_of($input)} ) Name: ProductReviewsByProduct Time Column: time Group Column: product_id Grouping: products time customer_id product_id stars 2021-01-01T00:00:00.000000000Z Patrick krabby_patty 3 2021-01-02T00:00:00.000000000Z Patrick coral_bits 4 2021-03-01T00:00:00.000000000Z Squidward krabby_patty 5 2021-04-10T00:00:00.000000000Z Patrick krabby_patty 1 Name: ProductReviewsByCustomer Time Column: time Group Column: customer_id Grouping: customers time customer_id product_id stars 2021-01-01T00:00:00.000000000Z Patrick krabby_patty 3 2021-01-02T00:00:00.000000000Z Patrick coral_bits 4 2021-03-01T00:00:00.000000000Z Squidward krabby_patty 5 2021-04-10T00:00:00.000000000Z Patrick krabby_patty 1 time key average_customer_review average_product_review 2021-01-01T00:00:00.000000000 krabby_patty 3.0 3.0 2021-01-02T00:00:00.000000000 coral_bits 3.5 4.0 2021-03-01T00:00:00.000000000 krabby_patty 5.0 4.0 2021-04-10T00:00:00.000000000 krabby_patty 2.6666666666666665 3.0 Converts the string to lower case. s: The string to convert to lower case. Returns a string column with each row containing the string s from that row converted to all lower case. The row contains null if s is null in that row. Tags: string Input.value | lower() Name: Input Time Column: time Group Column: key Grouping: grouping time key value 2021-01-01T00:00:00.000000000Z Ben Hello World 2021-01-02T00:00:00.000000000Z Ryan 2021-01-02T00:00:00.000000000Z Ryan Hi Earth 2021-01-03T00:00:00.000000000Z Ben Hello 2021-01-03T00:00:00.000000000Z Ben 2021-01-04T00:00:00.000000000Z Ryan hi time key value result 2021-01-01T00:00:00.000000000Z Ben Hello World hello world 2021-01-02T00:00:00.000000000Z Ryan 2021-01-02T00:00:00.000000000Z Ryan Hi Earth hi earth 2021-01-03T00:00:00.000000000Z Ben Hello hello 2021-01-03T00:00:00.000000000Z Ben 2021-01-04T00:00:00.000000000Z Ryan hi hi Return true if a is less than b. This is the function used for the binary comparison a 5)) Name: Input Time Column: time Group Column: key Grouping: grouping time key n 1996-12-19T16:00:57-00:00 Ben 2 1996-12-19T16:00:58-00:00 Ryan 3 1996-12-19T17:00:00-00:00 Ben 9 1996-12-19T17:03:00-00:00 Ben 9 1996-12-19T17:01:00-00:00 Ryan 8 1996-12-19T18:01:00-00:00 Ben 1 time key n result 1996-12-19T16:00:57-00:00 Ben 2 1 1996-12-19T16:00:58-00:00 Ryan 3 1 1996-12-19T17:00:00-00:00 Ben 9 2 1996-12-19T17:01:00-00:00 Ryan 8 2 1996-12-19T17:03:00-00:00 Ben 9 1 1996-12-19T18:01:00-00:00 Ben 1 1 Configures sliding windowed aggregations. Configures aggregations to slide over a window of inputs, where the width of the window is determined by the number of times (duration) the condition is true. Given the function sliding(3, hourly()), at 8:27 PM the window starts at 6:00 PM, with points at 7:00 and 8:00 PM. Once time advances to 9:00 PM, the condition is true and the window slides forward to start at 7:00 PM. The 3 most recent points where condition was true are 7:00 PM, 8:00 PM, and 9:00 PM. duration: The number of sliding intervals to use in the window. condition: The condition used to determine when the window should slide. Returns a window behavior that can be used with an aggregation to configure windowed aggregations. Tags: window Produces the sum of Input.n over a window of 2 days. The time and key are not available on the rows created by the ticks. The expression here uses extend, time_of and first to compute the time and key columns for all rows. { n: Input.n, result: sum(Input.n, window = sliding(2, daily())) } # Compute time and key for all rows, even the ticks. | extend({ time: time_of($input), key: first(Input.key) }) Name: Input Time Column: time Group Column: key Grouping: grouping time key n 1996-12-19T00:00:00-00:00 Ben 1 1996-12-19T00:00:00-00:00 Ryan 2 1996-12-20T00:00:00-00:00 Ben 3 1996-12-20T01:00:00-00:00 Ben 4 1996-12-21T00:00:00-00:00 Ryan 5 1996-12-21T00:00:00-00:00 Ben 6 time key n result 1996-12-19T00:00:00.000000000 Ben 1 1 1996-12-19T00:00:00.000000000 Ryan 2 2 1996-12-19T00:00:00.000000000 Ben 1 1996-12-19T00:00:00.000000000 Ryan 2 1996-12-20T00:00:00.000000000 Ben 3 4 1996-12-20T00:00:00.000000000 Ben 4 1996-12-20T00:00:00.000000000 Ryan 2 1996-12-20T01:00:00.000000000 Ben 4 7 1996-12-21T00:00:00.000000000 Ryan 5 5 1996-12-21T00:00:00.000000000 Ben 6 13 1996-12-21T00:00:00.000000000 Ben 13 1996-12-21T00:00:00.000000000 Ryan 5 In this example, the condition evaluates to true when the input is valid, meaning the width of the window is 3 Input rows. mean(Input.n, window = sliding(3, is_valid(Input))) Name: Input Time Column: time Group Column: key Grouping: grouping time subsort key n 1996-12-19T00:00:00-00:00 0 Ben 1 1996-12-19T00:00:00-00:00 0 Ryan 2 1996-12-20T00:00:00-00:00 0 Ben 3 1996-12-20T01:00:00-00:00 0 Ben 4 1996-12-21T00:00:00-00:00 0 Ryan 5 1996-12-21T00:00:00-00:00 0 Ben 6 time subsort key n result 1996-12-19T00:00:00-00:00 0 Ben 1 1.0 1996-12-19T00:00:00-00:00 0 Ryan 2 2.0 1996-12-20T00:00:00-00:00 0 Ben 3 2.0 1996-12-20T01:00:00-00:00 0 Ben 4 2.6666666666666665 1996-12-21T00:00:00-00:00 0 Ryan 5 3.5 1996-12-21T00:00:00-00:00 0 Ben 6 4.333333333333333 Returns the square root of a. a: The number to take the square root of. Returns a column of type f64. The result contains null if a was null at that row. Otherwise the row contains the square root of a. Tags: math sqrt(Input.a) Name: Input Time Column: time Group Column: key Grouping: grouping time key a 2021-01-01T00:00:00.000000000Z A 5.7 2021-01-01T00:00:00.000000000Z A 6.3 2021-01-02T00:00:00.000000000Z B time key a result 2021-01-01T00:00:00.000000000Z A 5.7 2.3874672772626644 2021-01-01T00:00:00.000000000Z A 6.3 2.5099800796022267 2021-01-02T00:00:00.000000000Z B Computes the sample standard deviation of values across the input. Computes the sample standard deviation, which is the square root of the sample variance. input: The input to compute the standard deviation of. window: The window to aggregate within, as described in Aggregation Functions. If null, aggregates are across all rows for the current entity. If non-null, aggregates are within the specified window. See window functions for how to specify the aggregation window. For each input row, return the mean of new, non-null rows in input up to and including the input row for the given entity. Returns null until there has been at least two such inputs. Tags: aggregation math stddev(Input.value) Name: Input Time Column: time Group Column: key Grouping: grouping time key value 2021-01-01T00:00:00.000000000Z Ben 50.7 2021-01-01T00:00:00.000000000Z Ryan 2021-01-02T00:00:00.000000000Z Ryan 67.2 2021-01-03T00:00:00.000000000Z Ben 1.2 2021-01-04T00:00:00.000000000Z Ben 2021-01-04T00:00:00.000000000Z Ryan 2.3 time key value result 2021-01-01T00:00:00.000000000Z Ben 50.7 2021-01-01T00:00:00.000000000Z Ryan 2021-01-02T00:00:00.000000000Z Ryan 67.2 2021-01-03T00:00:00.000000000Z Ben 1.2 24.750000000000004 2021-01-04T00:00:00.000000000Z Ben 24.750000000000004 2021-01-04T00:00:00.000000000Z Ryan 2.3 32.45 Returns the difference of two numbers. This is the function used for the binary operation a - b. a: The left-hand side of the subtraction. b: The right-hand side of the subtraction. Note: Both a and b are promoted to a compatible numeric type following the docs:data-model#numeric-type-coercion-table[numeric type coercion rules]. Returns a numeric column of the promoted numeric type compatible with both a and b. The result contains null if a or b was null at that row. Otherwise the row contains the difference of a and b. Tags: math operator Input.a - Input.b Name: Input Time Column: time Group Column: key Grouping: grouping time key a b 2021-01-01T00:00:00.000000000Z A 5.7 1.2 2021-01-02T00:00:00.000000000Z A 6.3 0.4 2021-01-03T00:00:00.000000000Z B 3.7 2021-01-03T00:00:00.000000000Z A 13.2 2021-01-04T00:00:00.000000000Z A 12.2 0 time key a b result 2021-01-01T00:00:00.000000000Z A 5.7 1.2 4.5 2021-01-02T00:00:00.000000000Z A 6.3 0.4 5.8999999999999995 2021-01-03T00:00:00.000000000Z B 3.7 2021-01-03T00:00:00.000000000Z A 13.2 2021-01-04T00:00:00.000000000Z A 12.2 0.0 12.2 Takes a substring of the input between start and end indices. s: The string to take a substring of. start: The inclusive index to start at. null indicates the beginning of the string. Negative indices count backwards from the end of the string. end: The exclusive index to end at. null indicates the length of the string. Negative indices count backwards from the end of the string. Returns a string column, with each row containing the substring of s starting at start (inclusive) up to but not including the end. If s is null, returns null. If end > start an empty string is returned. Tags: string This example shows using the substring function to extract the last 3 characters of a string. Note that if the string is shorter than 3 characters the empty string is returned. Specifically, -3 is interpreted as len(s) - 3, which produces a negative number for shorter strings, and is thus less than the start of the string (0). Input.value | substring(start = -3) Name: Input Time Column: time Group Column: key Grouping: grouping time key value 2021-01-01T00:00:00.000000000Z Ben Hello World 2021-01-02T00:00:00.000000000Z Ryan 2021-01-02T00:00:00.000000000Z Ryan Hi Earth 2021-01-03T00:00:00.000000000Z Ben Hello 2021-01-03T00:00:00.000000000Z Ben 2021-01-04T00:00:00.000000000Z Ryan hi time key value result 2021-01-01T00:00:00.000000000Z Ben Hello World rld 2021-01-02T00:00:00.000000000Z Ryan 2021-01-02T00:00:00.000000000Z Ryan Hi Earth rth 2021-01-03T00:00:00.000000000Z Ben Hello llo 2021-01-03T00:00:00.000000000Z Ben 2021-01-04T00:00:00.000000000Z Ryan hi Input.value | substring(start = 3, end = -3) Name: Input Time Column: time Group Column: key Grouping: grouping time key value 2021-01-01T00:00:00.000000000Z Ben Hello World 2021-01-02T00:00:00.000000000Z Ryan 2021-01-02T00:00:00.000000000Z Ryan Hi Earth 2021-01-03T00:00:00.000000000Z Ben Hello 2021-01-03T00:00:00.000000000Z Ben 2021-01-04T00:00:00.000000000Z Ryan hi time key value result 2021-01-01T00:00:00.000000000Z Ben Hello World lo Wo 2021-01-02T00:00:00.000000000Z Ryan 2021-01-02T00:00:00.000000000Z Ryan Hi Earth Ea 2021-01-03T00:00:00.000000000Z Ben Hello 2021-01-03T00:00:00.000000000Z Ben 2021-01-04T00:00:00.000000000Z Ryan hi Computes the sum of values across the input. input: The input to compute the sum of. window: The window to aggregate within, as described in Aggregation Functions. If null, aggregates are across all rows for the current entity. If non-null, aggregates are within the specified window. See window functions for how to specify the aggregation window. For each input row, return the minimum of new, non-null rows in input up to and including the input row for the given entity. Returns null until there has been at least one such input. Tags: aggregation math sum(Input.value) Name: Input Time Column: time Group Column: key Grouping: grouping time key value 2021-01-01T00:00:00.000000000Z Ben 50.7 2021-01-01T00:00:00.000000000Z Ryan 2021-01-02T00:00:00.000000000Z Ryan 67.2 2021-01-03T00:00:00.000000000Z Ben 1.2 2021-01-04T00:00:00.000000000Z Ben 2021-01-04T00:00:00.000000000Z Ryan 2.3 time key value result 2021-01-01T00:00:00.000000000Z Ben 50.7 50.7 2021-01-01T00:00:00.000000000Z Ryan 2021-01-02T00:00:00.000000000Z Ryan 67.2 67.2 2021-01-03T00:00:00.000000000Z Ben 1.2 51.900000000000006 2021-01-04T00:00:00.000000000Z Ben 51.900000000000006 2021-01-04T00:00:00.000000000Z Ryan 2.3 69.5 Returns the timestamp of rows in input. input: The column to retrieve timestamps for. It may be of any type (including records). Returns a timestamp_ns column containing the timestamp of each row in the input. Tags: time time_of(Input) Name: Input Time Column: time Group Column: key Grouping: grouping time key 1996-03-21T00:00:00-00:00 Ben 1996-04-21T00:00:00-00:00 Ryan 1996-05-21T00:00:00-00:00 Ryan 1996-06-21T00:00:00-00:00 Ryan 1996-07-21T00:00:00-00:00 Ben 1996-08-21T00:00:00-00:00 Ben time key result 1996-03-21T00:00:00-00:00 Ben 1996-03-21T00:00:00.000000000 1996-04-21T00:00:00-00:00 Ryan 1996-04-21T00:00:00.000000000 1996-05-21T00:00:00-00:00 Ryan 1996-05-21T00:00:00.000000000 1996-06-21T00:00:00-00:00 Ryan 1996-06-21T00:00:00.000000000 1996-07-21T00:00:00-00:00 Ben 1996-07-21T00:00:00.000000000 1996-08-21T00:00:00-00:00 Ben 1996-08-21T00:00:00.000000000 time_of(Input.integer) Name: Input Time Column: time Group Column: key Grouping: grouping time key integer 1996-03-21T00:00:00-00:00 Ben 8 1996-04-21T00:00:00-00:00 Ryan 12 1996-05-21T00:00:00-00:00 Ryan 1996-06-21T00:00:00-00:00 Ryan 37 1996-07-21T00:00:00-00:00 Ben 1996-08-21T00:00:00-00:00 Ben 24 time key integer result 1996-03-21T00:00:00-00:00 Ben 8 1996-03-21T00:00:00.000000000 1996-04-21T00:00:00-00:00 Ryan 12 1996-04-21T00:00:00.000000000 1996-05-21T00:00:00-00:00 Ryan 1996-05-21T00:00:00.000000000 1996-06-21T00:00:00-00:00 Ryan 37 1996-06-21T00:00:00.000000000 1996-07-21T00:00:00-00:00 Ben 1996-07-21T00:00:00.000000000 1996-08-21T00:00:00-00:00 Ben 24 1996-08-21T00:00:00.000000000 Converts the string to upper case. s: The string to convert to upper case. Returns a string column with each row containing the string s from that row converted to all upper case. The row contains null if s is null in that row. Tags: string Input.value | upper() Name: Input Time Column: time Group Column: key Grouping: grouping time key value 2021-01-01T00:00:00.000000000Z Ben Hello World 2021-01-02T00:00:00.000000000Z Ryan 2021-01-02T00:00:00.000000000Z Ryan Hi Earth 2021-01-03T00:00:00.000000000Z Ben Hello 2021-01-03T00:00:00.000000000Z Ben 2021-01-04T00:00:00.000000000Z Ryan hi time key value result 2021-01-01T00:00:00.000000000Z Ben Hello World HELLO WORLD 2021-01-02T00:00:00.000000000Z Ryan 2021-01-02T00:00:00.000000000Z Ryan Hi Earth HI EARTH 2021-01-03T00:00:00.000000000Z Ben Hello HELLO 2021-01-03T00:00:00.000000000Z Ben 2021-01-04T00:00:00.000000000Z Ryan hi HI Computes the sample variance of values across the input. Computes the sample variance. This divides by the number of values minus 1, rather the number of values (which would be the population variance). input: The input to compute the variance of. window: The window to aggregate within, as described in Aggregation Functions. If null, aggregates are across all rows for the current entity. If non-null, aggregates are within the specified window. See window functions for how to specify the aggregation window. For each input row, return the mean of new, non-null rows in input up to and including the input row for the given entity. Returns null until there has been at least two such inputs. Tags: aggregation math variance(Input.value) Name: Input Time Column: time Group Column: key Grouping: grouping time key value 2021-01-01T00:00:00.000000000Z Ben 50.7 2021-01-01T00:00:00.000000000Z Ryan 2021-01-02T00:00:00.000000000Z Ryan 67.2 2021-01-03T00:00:00.000000000Z Ben 1.2 2021-01-04T00:00:00.000000000Z Ben 2021-01-04T00:00:00.000000000Z Ryan 2.3 time key value result 2021-01-01T00:00:00.000000000Z Ben 50.7 2021-01-01T00:00:00.000000000Z Ryan 2021-01-02T00:00:00.000000000Z Ryan 67.2 2021-01-03T00:00:00.000000000Z Ben 1.2 612.5625000000001 2021-01-04T00:00:00.000000000Z Ben 612.5625000000001 2021-01-04T00:00:00.000000000Z Ryan 2.3 1053.0025000000003 Produces the current value when the condition evaluates to true. Performs filtering of rows. Unlike if which just \"nulls\" out a value in the current row, this removes the row entirely. condition: Determines whether to include a given row. value: The value to return if condition is true. Note: The order of arguments is chosen to allow use with the pipe operation. Specifically, value | when(condition) may be used to filter rows. For each row, return the value if condition is true. Omits rows where the condition is false or null. Note: If the value is continuous (eg., the result of an aggregation) then this returns the latest result of the aggregation when condition is true. If the value is not continuous (eg., taken directly from events) then this returns the current value when the condition is true. Tags: time Input | when(Input.condition) Name: Input Time Column: time Group Column: key Grouping: grouping time key condition 1996-03-21T00:00:00-00:00 Ben true 1996-04-21T00:00:00-00:00 Ryan true 1996-05-21T00:00:00-00:00 Ryan false 1996-06-21T00:00:00-00:00 Ryan true 1996-07-21T00:00:00-00:00 Ben false 1996-08-21T00:00:00-00:00 Ben true time key condition 1996-03-21T00:00:00-00:00 Ben true 1996-04-21T00:00:00-00:00 Ryan true 1996-06-21T00:00:00-00:00 Ryan true 1996-08-21T00:00:00-00:00 Ben true Changes the grouping of the input value. 🚧 Warning with_key is experimental functionality. You should expect the behavior to potentially change in the future. There may be issues when using this if multiple rows are assigned the same key. key: The new key to use for the grouping. value: The value to be re-grouped. grouping: A string literal naming the new grouping. This should match other tables associated with the same entity type in order for docs:entities#cross-table-operations[cross-table operations] to be possible. If no grouping is specified one will be computed from the type of the key. Returns a column containing the non-null rows of value. Each row occurs at the same time as in value. The results have been re-keyed based on the value of key to be part of the named grouping. Tags: grouping This example starts with input grouped by the key column. We wish to instead compute aggregates grouped by the other_key column. We do this by using the with_key function to change the grouping. We use other_key as the name of the grouping so that this table is compatible with others grouped similarly. After we have regrouped we compute the sum, which we see is grouped by the other_key. The extend function is used so that we can add fields to the regrouped record. Input | with_key($input.other_key, grouping = 'other_key') | extend($input, { sum_n_by_other_key: sum($input.n) }) Name: Input Time Column: time Group Column: key Grouping: grouping time key other_key n 2021-01-01T00:00:00.000000000Z A X 5 2021-01-02T00:00:00.000000000Z A Y 8 2021-03-01T00:00:00.000000000Z B X 9 2021-04-10T00:00:00.000000000Z A X 2021-04-11T00:00:00.000000000Z A 9 time key other_key n sum_n_by_other_key 2021-01-01T00:00:00.000000000Z A X 5 5 2021-01-02T00:00:00.000000000Z A Y 8 8 2021-03-01T00:00:00.000000000Z B X 9 14 2021-04-10T00:00:00.000000000Z A X 14 2021-04-11T00:00:00.000000000Z A 9 9 Return the year of the given timestamp. time: The timestamp to return the year for. Returns an i32 column containing the year for each input time. Returns null for rows where time is null. Tags: time year(Input.time) Name: Input Time Column: time Group Column: key Grouping: grouping time key 1996-03-21T00:00:00-00:00 Ben 1997-04-21T00:00:00-00:00 Ryan 1999-05-21T00:00:00-00:00 Ryan 2000-06-21T00:00:00-00:00 Ryan 2021-07-21T00:00:00-00:00 Ben 2022-08-21T00:00:00-00:00 Ben time key result 1996-03-21T00:00:00-00:00 Ben 1996 1997-04-21T00:00:00-00:00 Ryan 1997 1999-05-21T00:00:00-00:00 Ryan 1999 2000-06-21T00:00:00-00:00 Ryan 2000 2021-07-21T00:00:00-00:00 Ben 2021 2022-08-21T00:00:00-00:00 Ben 2022 A periodic function that produces a true value at the start of each calendar year (UTC). This function is often used in aggregations to produce windows or as a predicate column. Returns a boolean column with each row containing a true value at the start of each calendary yea rand null at all other times. Tags: tick In this example, the yearly() function is used as an argument to the `since function, which produces a window. The result is a windowed aggregation that resets at the start of each calendar year (UTC). { n: Input.n, yearly_sum: sum(Input.n, window = since(yearly())) } | extend({time: time_of($input), key: first(Input.key) }) Name: Input Time Column: time Group Column: key Grouping: grouping time key n 1996-12-19T16:00:00-00:00 Ben 2 1996-12-19T16:00:00-00:00 Ryan 3 1997-12-20T16:00:00-00:00 Ben 6 1997-12-20T16:01:00-00:00 Ben 9 1997-12-21T16:00:00-00:00 Ryan 8 1998-12-21T16:00:00-00:00 Ben 1 time key n yearly_sum 1996-12-19T16:00:00.000000000 Ben 2 2 1996-12-19T16:00:00.000000000 Ryan 3 3 1997-01-01T00:00:00.000000000 Ben 2 1997-01-01T00:00:00.000000000 Ryan 3 1997-12-20T16:00:00.000000000 Ben 6 6 1997-12-20T16:01:00.000000000 Ben 9 15 1997-12-21T16:00:00.000000000 Ryan 8 8 1998-01-01T00:00:00.000000000 Ben 15 1998-01-01T00:00:00.000000000 Ryan 8 1998-12-21T16:00:00.000000000 Ben 1 1 In this example, the yearly() function is used as an argument to the when function, which filters input. The output includes the last input row before a tick occurs. Input | last() | when(yearly()) Name: Input Time Column: time Group Column: key Grouping: grouping time key n 1996-12-19T16:00:00-00:00 Ben 2 1996-12-19T16:00:00-00:00 Ryan 3 1997-12-20T16:00:00-00:00 Ben 6 1997-12-20T16:01:00-00:00 Ben 9 1997-12-21T16:00:00-00:00 Ryan 8 1998-12-21T16:00:00-00:00 Ben 1 time key n 1996-12-19T16:00:00-00:00 Ben 2 1996-12-19T16:00:00-00:00 Ryan 3 1997-12-20T16:01:00-00:00 Ben 9 1997-12-21T16:00:00-00:00 Ryan 8 Returns the maximum of two values. This returns the maximum of two values. See the aggregation max for the maximum of values in a column up to and including the current row. a, b: The two values to take the maximum of. Note: Both a and b are promoted to a compatible ordered type following the docs:data-model#numeric-type-coercion-table[numeric type coercion rules]. Returns a numeric column of the promoted type. Each row contains the value from a if a is greater than b, otherwise it contains b. Specifically, if a or b is NaN then b will be returned. If a or b are null, then b will be returned. Tags: math zip_max(Input.a, Input.b) Name: Input Time Column: time Group Column: key Grouping: grouping time key a b 2021-01-01T00:00:00.000000000Z A 5.7 1.2 2021-01-01T00:00:00.000000000Z A 6.3 0.4 2021-01-02T00:00:00.000000000Z B 3.7 2021-01-03T00:00:00.000000000Z A 13.2 time key a b result 2021-01-01T00:00:00.000000000Z A 5.7 1.2 5.7 2021-01-01T00:00:00.000000000Z A 6.3 0.4 6.3 2021-01-02T00:00:00.000000000Z B 3.7 2021-01-03T00:00:00.000000000Z A 13.2 Returns the minimum of two values. This returns the minimum of two values. See the aggregation min for the minimum of values in a column up to and including the current row. a, b: The two values to take the minimum of. Note: Both a and b are promoted to a compatible ordered type following the docs:data-model#numeric-type-coercion-table[numeric type coercion rules]. Returns a numeric column of the promoted type. Each row contains the value from a if a is less than b, otherwise it contains b. Specifically, if a or b is NaN then b will be returned. If a or b are null, then b will be returned. Tags: math zip_min(Input.a, Input.b) Name: Input Time Column: time Group Column: key Grouping: grouping time key a b 2021-01-01T00:00:00.000000000Z A 5.7 1.2 2021-01-01T00:00:00.000000000Z A 6.3 0.4 2021-01-02T00:00:00.000000000Z B 3.7 2021-01-03T00:00:00.000000000Z A 13.2 time key a b result 2021-01-01T00:00:00.000000000Z A 5.7 1.2 1.2 2021-01-01T00:00:00.000000000Z A 6.3 0.4 0.4 2021-01-02T00:00:00.000000000Z B 3.7 2021-01-03T00:00:00.000000000Z A 13.2","title":"Fenl Function Catalog","component":"kaskada","version":"main","name":"catalog","url":"/kaskada/main/fenl/catalog.html","titles":[{"text":"Functions","hash":"functions","id":1},{"text":"Function Categories","hash":"function-categories","id":2},{"text":"Operators","hash":"operators","id":3},{"text":"Aggregation Functions","hash":"aggregation-functions","id":4},{"text":"Comparison Functions","hash":"comparison-functions","id":5},{"text":"Grouping Functions","hash":"grouping-functions","id":6},{"text":"Logical Functions","hash":"logical-functions","id":7},{"text":"Math Functions","hash":"math-functions","id":8},{"text":"Misc Functions","hash":"misc-functions","id":9},{"text":"Record Functions","hash":"record-functions","id":10},{"text":"String Functions","hash":"string-functions","id":11},{"text":"Tick Functions","hash":"tick-functions","id":12},{"text":"Time Functions","hash":"time-functions","id":13},{"text":"Window Functions","hash":"window-functions","id":14},{"text":"Function Details","hash":"function-details","id":15},{"text":"add","hash":"add","id":16},{"text":"Parameters","hash":"parameters","id":17},{"text":"Results","hash":"results","id":18},{"text":"Example: Addition","hash":"example-addition","id":19},{"text":"Query","hash":"query","id":20},{"text":"Table: Input","hash":"table-input","id":21},{"text":"Output CSV","hash":"output-csv","id":22},{"text":"add_time","hash":"add_time","id":23},{"text":"Parameters","hash":"parameters-2","id":24},{"text":"Results","hash":"results-2","id":25},{"text":"Example: Adding a fixed number of days","hash":"example-adding-a-fixed-number-of-days","id":26},{"text":"Query","hash":"query-2","id":27},{"text":"Table: Input","hash":"table-input-2","id":28},{"text":"Output CSV","hash":"output-csv-2","id":29},{"text":"ceil","hash":"ceil","id":30},{"text":"Parameters","hash":"parameters-3","id":31},{"text":"Results","hash":"results-3","id":32},{"text":"Example: Ceil","hash":"example-ceil","id":33},{"text":"Query","hash":"query-3","id":34},{"text":"Table: Input","hash":"table-input-3","id":35},{"text":"Output CSV","hash":"output-csv-3","id":36},{"text":"clamp","hash":"clamp","id":37},{"text":"Parameters","hash":"parameters-4","id":38},{"text":"Results","hash":"results-4","id":39},{"text":"Example: Clamp With Min and Max","hash":"example-clamp-with-min-and-max","id":40},{"text":"Query","hash":"query-4","id":41},{"text":"Table: Input","hash":"table-input-4","id":42},{"text":"Output CSV","hash":"output-csv-4","id":43},{"text":"Example: Clamp with Min","hash":"example-clamp-with-min","id":44},{"text":"Query","hash":"query-5","id":45},{"text":"Table: Input","hash":"table-input-5","id":46},{"text":"Output CSV","hash":"output-csv-5","id":47},{"text":"coalesce","hash":"coalesce","id":48},{"text":"Parameters","hash":"parameters-5","id":49},{"text":"Results","hash":"results-5","id":50},{"text":"Example","hash":"example","id":51},{"text":"Query","hash":"query-6","id":52},{"text":"Table: Input","hash":"table-input-6","id":53},{"text":"Output CSV","hash":"output-csv-6","id":54},{"text":"count","hash":"count","id":55},{"text":"Parameters","hash":"parameters-6","id":56},{"text":"Results","hash":"results-6","id":57},{"text":"Example: Count","hash":"example-count","id":58},{"text":"Query","hash":"query-7","id":59},{"text":"Table: Input","hash":"table-input-7","id":60},{"text":"Output CSV","hash":"output-csv-7","id":61},{"text":"count_if","hash":"count_if","id":62},{"text":"Parameters","hash":"parameters-7","id":63},{"text":"Results","hash":"results-7","id":64},{"text":"Example: Count If","hash":"example-count-if","id":65},{"text":"Query","hash":"query-8","id":66},{"text":"Table: Input","hash":"table-input-8","id":67},{"text":"Output CSV","hash":"output-csv-8","id":68},{"text":"daily","hash":"daily","id":69},{"text":"Results","hash":"results-8","id":70},{"text":"Example: Daily Aggregated Window","hash":"example-daily-aggregated-window","id":71},{"text":"Query","hash":"query-9","id":72},{"text":"Table: Input","hash":"table-input-9","id":73},{"text":"Output CSV","hash":"output-csv-9","id":74},{"text":"Example: Filter Daily","hash":"example-filter-daily","id":75},{"text":"Query","hash":"query-10","id":76},{"text":"Table: Input","hash":"table-input-10","id":77},{"text":"Output CSV","hash":"output-csv-10","id":78},{"text":"day_of_month","hash":"day_of_month","id":79},{"text":"Parameters","hash":"parameters-8","id":80},{"text":"Results","hash":"results-9","id":81},{"text":"Example: Day of Month","hash":"example-day-of-month","id":82},{"text":"Query","hash":"query-11","id":83},{"text":"Table: Input","hash":"table-input-11","id":84},{"text":"Output CSV","hash":"output-csv-11","id":85},{"text":"day_of_month0","hash":"day_of_month0","id":86},{"text":"Parameters","hash":"parameters-9","id":87},{"text":"Results","hash":"results-10","id":88},{"text":"Example: Day of Month (Zero Based)","hash":"example-day-of-month-zero-based","id":89},{"text":"Query","hash":"query-12","id":90},{"text":"Table: Input","hash":"table-input-12","id":91},{"text":"Output CSV","hash":"output-csv-12","id":92},{"text":"day_of_year","hash":"day_of_year","id":93},{"text":"Parameters","hash":"parameters-10","id":94},{"text":"Results","hash":"results-11","id":95},{"text":"Example: Day Of Year","hash":"example-day-of-year","id":96},{"text":"Query","hash":"query-13","id":97},{"text":"Table: Input","hash":"table-input-13","id":98},{"text":"Output CSV","hash":"output-csv-13","id":99},{"text":"day_of_year0","hash":"day_of_year0","id":100},{"text":"Parameters","hash":"parameters-11","id":101},{"text":"Results","hash":"results-12","id":102},{"text":"Example: Day of Year (Zero Based)","hash":"example-day-of-year-zero-based","id":103},{"text":"Query","hash":"query-14","id":104},{"text":"Table: Input","hash":"table-input-14","id":105},{"text":"Output CSV","hash":"output-csv-14","id":106},{"text":"days","hash":"days","id":107},{"text":"Parameters","hash":"parameters-12","id":108},{"text":"Results","hash":"results-13","id":109},{"text":"Example: Adding a variable number of days","hash":"example-adding-a-variable-number-of-days","id":110},{"text":"Query","hash":"query-15","id":111},{"text":"Table: Input","hash":"table-input-15","id":112},{"text":"Output CSV","hash":"output-csv-15","id":113},{"text":"days_between","hash":"days_between","id":114},{"text":"Parameters","hash":"parameters-13","id":115},{"text":"Results","hash":"results-14","id":116},{"text":"Example: Days Between","hash":"example-days-between","id":117},{"text":"Query","hash":"query-16","id":118},{"text":"Table: Input","hash":"table-input-16","id":119},{"text":"Output CSV","hash":"output-csv-16","id":120},{"text":"div","hash":"div","id":121},{"text":"Parameters","hash":"parameters-14","id":122},{"text":"Results","hash":"results-15","id":123},{"text":"Example: Division","hash":"example-division","id":124},{"text":"Query","hash":"query-17","id":125},{"text":"Table: Input","hash":"table-input-17","id":126},{"text":"Output CSV","hash":"output-csv-17","id":127},{"text":"else","hash":"else","id":128},{"text":"Parameters","hash":"parameters-15","id":129},{"text":"Results","hash":"results-16","id":130},{"text":"Example: Choosing between two values","hash":"example-choosing-between-two-values","id":131},{"text":"Query","hash":"query-18","id":132},{"text":"Table: Input","hash":"table-input-18","id":133},{"text":"Output CSV","hash":"output-csv-18","id":134},{"text":"Example: Providing a default value","hash":"example-providing-a-default-value","id":135},{"text":"Query","hash":"query-19","id":136},{"text":"Table: Input","hash":"table-input-19","id":137},{"text":"Output CSV","hash":"output-csv-19","id":138},{"text":"eq","hash":"eq","id":139},{"text":"Parameters","hash":"parameters-16","id":140},{"text":"Results","hash":"results-17","id":141},{"text":"Example: Equals","hash":"example-equals","id":142},{"text":"Query","hash":"query-20","id":143},{"text":"Table: Input","hash":"table-input-20","id":144},{"text":"Output CSV","hash":"output-csv-20","id":145},{"text":"exp","hash":"exp","id":146},{"text":"Parameters","hash":"parameters-17","id":147},{"text":"Results","hash":"results-18","id":148},{"text":"Example: Exponential","hash":"example-exponential","id":149},{"text":"Query","hash":"query-21","id":150},{"text":"Table: Input","hash":"table-input-21","id":151},{"text":"Output CSV","hash":"output-csv-21","id":152},{"text":"extend","hash":"extend","id":153},{"text":"Parameters","hash":"parameters-18","id":154},{"text":"Results","hash":"results-19","id":155},{"text":"Example: Record Extension","hash":"example-record-extension","id":156},{"text":"Query","hash":"query-22","id":157},{"text":"Table: Input","hash":"table-input-22","id":158},{"text":"Output CSV","hash":"output-csv-22","id":159},{"text":"first","hash":"first","id":160},{"text":"Parameters","hash":"parameters-19","id":161},{"text":"Results","hash":"results-20","id":162},{"text":"Example: First","hash":"example-first","id":163},{"text":"Query","hash":"query-23","id":164},{"text":"Table: Input","hash":"table-input-23","id":165},{"text":"Output CSV","hash":"output-csv-23","id":166},{"text":"floor","hash":"floor","id":167},{"text":"Parameters","hash":"parameters-20","id":168},{"text":"Results","hash":"results-21","id":169},{"text":"Example: Floor","hash":"example-floor","id":170},{"text":"Query","hash":"query-24","id":171},{"text":"Table: Input","hash":"table-input-24","id":172},{"text":"Output CSV","hash":"output-csv-24","id":173},{"text":"gt","hash":"gt","id":174},{"text":"Parameters","hash":"parameters-21","id":175},{"text":"Results","hash":"results-22","id":176},{"text":"Example: Greater Than","hash":"example-greater-than","id":177},{"text":"Query","hash":"query-25","id":178},{"text":"Table: Input","hash":"table-input-25","id":179},{"text":"Output CSV","hash":"output-csv-25","id":180},{"text":"gte","hash":"gte","id":181},{"text":"Parameters","hash":"parameters-22","id":182},{"text":"Results","hash":"results-23","id":183},{"text":"Example: Greater Than or Equal To","hash":"example-greater-than-or-equal-to","id":184},{"text":"Query","hash":"query-26","id":185},{"text":"Table: Input","hash":"table-input-26","id":186},{"text":"Output CSV","hash":"output-csv-26","id":187},{"text":"hash","hash":"hash","id":188},{"text":"Parameters","hash":"parameters-23","id":189},{"text":"Results","hash":"results-24","id":190},{"text":"Example: String Hash","hash":"example-string-hash","id":191},{"text":"Query","hash":"query-27","id":192},{"text":"Table: Input","hash":"table-input-27","id":193},{"text":"Output CSV","hash":"output-csv-27","id":194},{"text":"Example: Integer Hash","hash":"example-integer-hash","id":195},{"text":"Query","hash":"query-28","id":196},{"text":"Table: Input","hash":"table-input-28","id":197},{"text":"Output CSV","hash":"output-csv-28","id":198},{"text":"hourly","hash":"hourly","id":199},{"text":"Results","hash":"results-25","id":200},{"text":"Example: Hourly Aggregated Window","hash":"example-hourly-aggregated-window","id":201},{"text":"Query","hash":"query-29","id":202},{"text":"Table: Input","hash":"table-input-29","id":203},{"text":"Output CSV","hash":"output-csv-29","id":204},{"text":"Example: Filter Hourly","hash":"example-filter-hourly","id":205},{"text":"Query","hash":"query-30","id":206},{"text":"Table: Input","hash":"table-input-30","id":207},{"text":"Output CSV","hash":"output-csv-30","id":208},{"text":"if","hash":"if","id":209},{"text":"Parameters","hash":"parameters-24","id":210},{"text":"Results","hash":"results-26","id":211},{"text":"Example","hash":"example-2","id":212},{"text":"Query","hash":"query-31","id":213},{"text":"Table: Input","hash":"table-input-31","id":214},{"text":"Output CSV","hash":"output-csv-31","id":215},{"text":"is_valid","hash":"is_valid","id":216},{"text":"Parameters","hash":"parameters-25","id":217},{"text":"Results","hash":"results-27","id":218},{"text":"Example: Is Valid","hash":"example-is-valid","id":219},{"text":"Query","hash":"query-32","id":220},{"text":"Table: Input","hash":"table-input-32","id":221},{"text":"Output CSV","hash":"output-csv-32","id":222},{"text":"json","hash":"json","id":223},{"text":"Parameters","hash":"parameters-26","id":224},{"text":"Results","hash":"results-28","id":225},{"text":"Example: JSON field access","hash":"example-json-field-access","id":226},{"text":"Query","hash":"query-33","id":227},{"text":"Table: Input","hash":"table-input-33","id":228},{"text":"Output CSV","hash":"output-csv-33","id":229},{"text":"lag","hash":"lag","id":230},{"text":"Parameters","hash":"parameters-27","id":231},{"text":"Results","hash":"results-29","id":232},{"text":"Example: Lag for Previous Value","hash":"example-lag-for-previous-value","id":233},{"text":"Query","hash":"query-34","id":234},{"text":"Table: Input","hash":"table-input-34","id":235},{"text":"Output CSV","hash":"output-csv-34","id":236},{"text":"Example: Lag for Average Change","hash":"example-lag-for-average-change","id":237},{"text":"Query","hash":"query-35","id":238},{"text":"Table: Input","hash":"table-input-35","id":239},{"text":"Output CSV","hash":"output-csv-35","id":240},{"text":"last","hash":"last","id":241},{"text":"Parameters","hash":"parameters-28","id":242},{"text":"Results","hash":"results-30","id":243},{"text":"Example: Last","hash":"example-last","id":244},{"text":"Query","hash":"query-36","id":245},{"text":"Table: Input","hash":"table-input-36","id":246},{"text":"Output CSV","hash":"output-csv-36","id":247},{"text":"len","hash":"len","id":248},{"text":"Parameters","hash":"parameters-29","id":249},{"text":"Results","hash":"results-31","id":250},{"text":"Example: String Length","hash":"example-string-length","id":251},{"text":"Query","hash":"query-37","id":252},{"text":"Table: Input","hash":"table-input-37","id":253},{"text":"Output CSV","hash":"output-csv-37","id":254},{"text":"logical_and","hash":"logical_and","id":255},{"text":"Parameters","hash":"parameters-30","id":256},{"text":"Results","hash":"results-32","id":257},{"text":"Example: Logical And","hash":"example-logical-and","id":258},{"text":"Query","hash":"query-38","id":259},{"text":"Table: Input","hash":"table-input-38","id":260},{"text":"Output CSV","hash":"output-csv-38","id":261},{"text":"logical_or","hash":"logical_or","id":262},{"text":"Parameters","hash":"parameters-31","id":263},{"text":"Results","hash":"results-33","id":264},{"text":"Example: Logical Or","hash":"example-logical-or","id":265},{"text":"Query","hash":"query-39","id":266},{"text":"Table: Input","hash":"table-input-39","id":267},{"text":"Output CSV","hash":"output-csv-39","id":268},{"text":"lookup","hash":"lookup","id":269},{"text":"Parameters","hash":"parameters-32","id":270},{"text":"Results","hash":"results-34","id":271},{"text":"Example: Lookup","hash":"example-lookup","id":272},{"text":"Query","hash":"query-40","id":273},{"text":"Table: ProductReviewsByProduct","hash":"table-productreviewsbyproduct","id":274},{"text":"Table: ProductReviewsByCustomer","hash":"table-productreviewsbycustomer","id":275},{"text":"Output CSV","hash":"output-csv-40","id":276},{"text":"lower","hash":"lower","id":277},{"text":"Parameters","hash":"parameters-33","id":278},{"text":"Results","hash":"results-35","id":279},{"text":"Example: Lower Case","hash":"example-lower-case","id":280},{"text":"Query","hash":"query-41","id":281},{"text":"Table: Input","hash":"table-input-40","id":282},{"text":"Output CSV","hash":"output-csv-41","id":283},{"text":"lt","hash":"lt","id":284},{"text":"Parameters","hash":"parameters-34","id":285},{"text":"Results","hash":"results-36","id":286},{"text":"Example: Less Than","hash":"example-less-than","id":287},{"text":"Query","hash":"query-42","id":288},{"text":"Table: Input","hash":"table-input-41","id":289},{"text":"Output CSV","hash":"output-csv-42","id":290},{"text":"lte","hash":"lte","id":291},{"text":"Parameters","hash":"parameters-35","id":292},{"text":"Results","hash":"results-37","id":293},{"text":"Example: Less Than or Equal To","hash":"example-less-than-or-equal-to","id":294},{"text":"Query","hash":"query-43","id":295},{"text":"Table: Input","hash":"table-input-42","id":296},{"text":"Output CSV","hash":"output-csv-43","id":297},{"text":"max","hash":"max","id":298},{"text":"Parameters","hash":"parameters-36","id":299},{"text":"Results","hash":"results-38","id":300},{"text":"Example: Maximum","hash":"example-maximum","id":301},{"text":"Query","hash":"query-44","id":302},{"text":"Table: Input","hash":"table-input-43","id":303},{"text":"Output CSV","hash":"output-csv-44","id":304},{"text":"mean","hash":"mean","id":305},{"text":"Parameters","hash":"parameters-37","id":306},{"text":"Results","hash":"results-39","id":307},{"text":"Example: Mean","hash":"example-mean","id":308},{"text":"Query","hash":"query-45","id":309},{"text":"Table: Input","hash":"table-input-44","id":310},{"text":"Output CSV","hash":"output-csv-45","id":311},{"text":"min","hash":"min","id":312},{"text":"Parameters","hash":"parameters-38","id":313},{"text":"Results","hash":"results-40","id":314},{"text":"Example: Minimum","hash":"example-minimum","id":315},{"text":"Query","hash":"query-46","id":316},{"text":"Table: Input","hash":"table-input-45","id":317},{"text":"Output CSV","hash":"output-csv-46","id":318},{"text":"minutely","hash":"minutely","id":319},{"text":"Results","hash":"results-41","id":320},{"text":"Example: Minutely Aggregated Window","hash":"example-minutely-aggregated-window","id":321},{"text":"Query","hash":"query-47","id":322},{"text":"Table: Input","hash":"table-input-46","id":323},{"text":"Output CSV","hash":"output-csv-47","id":324},{"text":"Example: Filter Minutely","hash":"example-filter-minutely","id":325},{"text":"Query","hash":"query-48","id":326},{"text":"Table: Input","hash":"table-input-47","id":327},{"text":"Output CSV","hash":"output-csv-48","id":328},{"text":"month_of_year","hash":"month_of_year","id":329},{"text":"Parameters","hash":"parameters-39","id":330},{"text":"Results","hash":"results-42","id":331},{"text":"Example: Month of Year","hash":"example-month-of-year","id":332},{"text":"Query","hash":"query-49","id":333},{"text":"Table: Input","hash":"table-input-48","id":334},{"text":"Output CSV","hash":"output-csv-49","id":335},{"text":"month_of_year0","hash":"month_of_year0","id":336},{"text":"Parameters","hash":"parameters-40","id":337},{"text":"Results","hash":"results-43","id":338},{"text":"Example: Month of Year (Zero Based)","hash":"example-month-of-year-zero-based","id":339},{"text":"Query","hash":"query-50","id":340},{"text":"Table: Input","hash":"table-input-49","id":341},{"text":"Output CSV","hash":"output-csv-50","id":342},{"text":"monthly","hash":"monthly","id":343},{"text":"Results","hash":"results-44","id":344},{"text":"Example: Monthly Aggregated Window","hash":"example-monthly-aggregated-window","id":345},{"text":"Query","hash":"query-51","id":346},{"text":"Table: Input","hash":"table-input-50","id":347},{"text":"Output CSV","hash":"output-csv-51","id":348},{"text":"Example: Filter Monthly","hash":"example-filter-monthly","id":349},{"text":"Query","hash":"query-52","id":350},{"text":"Table: Input","hash":"table-input-51","id":351},{"text":"Output CSV","hash":"output-csv-52","id":352},{"text":"months","hash":"months","id":353},{"text":"Parameters","hash":"parameters-41","id":354},{"text":"Results","hash":"results-45","id":355},{"text":"Example","hash":"example-3","id":356},{"text":"Query","hash":"query-53","id":357},{"text":"Table: Input","hash":"table-input-52","id":358},{"text":"Output CSV","hash":"output-csv-53","id":359},{"text":"months_between","hash":"months_between","id":360},{"text":"Parameters","hash":"parameters-42","id":361},{"text":"Results","hash":"results-46","id":362},{"text":"Example: Months Between","hash":"example-months-between","id":363},{"text":"Query","hash":"query-54","id":364},{"text":"Table: Input","hash":"table-input-53","id":365},{"text":"Output CSV","hash":"output-csv-54","id":366},{"text":"mul","hash":"mul","id":367},{"text":"Parameters","hash":"parameters-43","id":368},{"text":"Results","hash":"results-47","id":369},{"text":"Example: Multiplication","hash":"example-multiplication","id":370},{"text":"Query","hash":"query-55","id":371},{"text":"Table: Input","hash":"table-input-54","id":372},{"text":"Output CSV","hash":"output-csv-55","id":373},{"text":"neg","hash":"neg","id":374},{"text":"Parameters","hash":"parameters-44","id":375},{"text":"Results","hash":"results-48","id":376},{"text":"Example: Negation","hash":"example-negation","id":377},{"text":"Query","hash":"query-56","id":378},{"text":"Table: Input","hash":"table-input-55","id":379},{"text":"Output CSV","hash":"output-csv-56","id":380},{"text":"neq","hash":"neq","id":381},{"text":"Parameters","hash":"parameters-45","id":382},{"text":"Results","hash":"results-49","id":383},{"text":"Example: Not Equals","hash":"example-not-equals","id":384},{"text":"Query","hash":"query-57","id":385},{"text":"Table: Input","hash":"table-input-56","id":386},{"text":"Output CSV","hash":"output-csv-57","id":387},{"text":"not","hash":"not","id":388},{"text":"Parameters","hash":"parameters-46","id":389},{"text":"Results","hash":"results-50","id":390},{"text":"Example","hash":"example-4","id":391},{"text":"Query","hash":"query-58","id":392},{"text":"Table: Input","hash":"table-input-57","id":393},{"text":"Output CSV","hash":"output-csv-58","id":394},{"text":"null_if","hash":"null_if","id":395},{"text":"Parameters","hash":"parameters-47","id":396},{"text":"Results","hash":"results-51","id":397},{"text":"Example: Null If","hash":"example-null-if","id":398},{"text":"Query","hash":"query-59","id":399},{"text":"Table: Input","hash":"table-input-58","id":400},{"text":"Output CSV","hash":"output-csv-59","id":401},{"text":"powf","hash":"powf","id":402},{"text":"Parameters","hash":"parameters-48","id":403},{"text":"Example: Power","hash":"example-power","id":404},{"text":"Query","hash":"query-60","id":405},{"text":"Table: Input","hash":"table-input-59","id":406},{"text":"Output CSV","hash":"output-csv-60","id":407},{"text":"remove_fields","hash":"remove_fields","id":408},{"text":"Parameters","hash":"parameters-49","id":409},{"text":"Results","hash":"results-52","id":410},{"text":"Example: Record Field Filtering","hash":"example-record-field-filtering","id":411},{"text":"Query","hash":"query-61","id":412},{"text":"Table: Input","hash":"table-input-60","id":413},{"text":"Output CSV","hash":"output-csv-61","id":414},{"text":"round","hash":"round","id":415},{"text":"Parameters","hash":"parameters-50","id":416},{"text":"Results","hash":"results-53","id":417},{"text":"Example: Round","hash":"example-round","id":418},{"text":"Query","hash":"query-62","id":419},{"text":"Table: Input","hash":"table-input-61","id":420},{"text":"Output CSV","hash":"output-csv-62","id":421},{"text":"seconds","hash":"seconds","id":422},{"text":"Parameters","hash":"parameters-51","id":423},{"text":"Results","hash":"results-54","id":424},{"text":"Example","hash":"example-5","id":425},{"text":"Query","hash":"query-63","id":426},{"text":"Table: Input","hash":"table-input-62","id":427},{"text":"Output CSV","hash":"output-csv-63","id":428},{"text":"seconds_between","hash":"seconds_between","id":429},{"text":"Parameters","hash":"parameters-52","id":430},{"text":"Results","hash":"results-55","id":431},{"text":"Example: Seconds Between","hash":"example-seconds-between","id":432},{"text":"Query","hash":"query-64","id":433},{"text":"Table: Input","hash":"table-input-63","id":434},{"text":"Output CSV","hash":"output-csv-64","id":435},{"text":"select_fields","hash":"select_fields","id":436},{"text":"Parameters","hash":"parameters-53","id":437},{"text":"Results","hash":"results-56","id":438},{"text":"Example: Record Field Selection","hash":"example-record-field-selection","id":439},{"text":"Query","hash":"query-65","id":440},{"text":"Table: Input","hash":"table-input-64","id":441},{"text":"Output CSV","hash":"output-csv-65","id":442},{"text":"shift_to","hash":"shift_to","id":443},{"text":"Parameters","hash":"parameters-54","id":444},{"text":"Results","hash":"results-57","id":445},{"text":"Example: Shift To","hash":"example-shift-to","id":446},{"text":"Query","hash":"query-66","id":447},{"text":"Table: Input","hash":"table-input-65","id":448},{"text":"Output CSV","hash":"output-csv-66","id":449},{"text":"shift_until","hash":"shift_until","id":450},{"text":"Parameters","hash":"parameters-55","id":451},{"text":"Results","hash":"results-58","id":452},{"text":"Example: Shift Until","hash":"example-shift-until","id":453},{"text":"Query","hash":"query-67","id":454},{"text":"Table: Input","hash":"table-input-66","id":455},{"text":"Output CSV","hash":"output-csv-67","id":456},{"text":"since","hash":"since","id":457},{"text":"Parameters","hash":"parameters-56","id":458},{"text":"Results","hash":"results-59","id":459},{"text":"Example: Hourly Count","hash":"example-hourly-count","id":460},{"text":"Query","hash":"query-68","id":461},{"text":"Table: Input","hash":"table-input-67","id":462},{"text":"Output CSV","hash":"output-csv-68","id":463},{"text":"Example: Count Since Predicate","hash":"example-count-since-predicate","id":464},{"text":"Query","hash":"query-69","id":465},{"text":"Table: Input","hash":"table-input-68","id":466},{"text":"Output CSV","hash":"output-csv-69","id":467},{"text":"sliding","hash":"sliding","id":468},{"text":"Parameters","hash":"parameters-57","id":469},{"text":"Results","hash":"results-60","id":470},{"text":"Example: Sliding Over 2 Days","hash":"example-sliding-over-2-days","id":471},{"text":"Query","hash":"query-70","id":472},{"text":"Table: Input","hash":"table-input-69","id":473},{"text":"Output CSV","hash":"output-csv-70","id":474},{"text":"Example: Sliding Over 3 Events","hash":"example-sliding-over-3-events","id":475},{"text":"Query","hash":"query-71","id":476},{"text":"Table: Input","hash":"table-input-70","id":477},{"text":"Output CSV","hash":"output-csv-71","id":478},{"text":"sqrt","hash":"sqrt","id":479},{"text":"Parameters","hash":"parameters-58","id":480},{"text":"Results","hash":"results-61","id":481},{"text":"Example: Square Root","hash":"example-square-root","id":482},{"text":"Query","hash":"query-72","id":483},{"text":"Table: Input","hash":"table-input-71","id":484},{"text":"Output CSV","hash":"output-csv-72","id":485},{"text":"stddev","hash":"stddev","id":486},{"text":"Parameters","hash":"parameters-59","id":487},{"text":"Results","hash":"results-62","id":488},{"text":"Example: Standard Deviation","hash":"example-standard-deviation","id":489},{"text":"Query","hash":"query-73","id":490},{"text":"Table: Input","hash":"table-input-72","id":491},{"text":"Output CSV","hash":"output-csv-73","id":492},{"text":"sub","hash":"sub","id":493},{"text":"Parameters","hash":"parameters-60","id":494},{"text":"Results","hash":"results-63","id":495},{"text":"Example: Subtraction","hash":"example-subtraction","id":496},{"text":"Query","hash":"query-74","id":497},{"text":"Table: Input","hash":"table-input-73","id":498},{"text":"Output CSV","hash":"output-csv-74","id":499},{"text":"substring","hash":"substring","id":500},{"text":"Parameters","hash":"parameters-61","id":501},{"text":"Results","hash":"results-64","id":502},{"text":"Example: Substring Suffix","hash":"example-substring-suffix","id":503},{"text":"Query","hash":"query-75","id":504},{"text":"Table: Input","hash":"table-input-74","id":505},{"text":"Output CSV","hash":"output-csv-75","id":506},{"text":"Example: Substring","hash":"example-substring","id":507},{"text":"Query","hash":"query-76","id":508},{"text":"Table: Input","hash":"table-input-75","id":509},{"text":"Output CSV","hash":"output-csv-76","id":510},{"text":"sum","hash":"sum","id":511},{"text":"Parameters","hash":"parameters-62","id":512},{"text":"Results","hash":"results-65","id":513},{"text":"Example: Sum","hash":"example-sum","id":514},{"text":"Query","hash":"query-77","id":515},{"text":"Table: Input","hash":"table-input-76","id":516},{"text":"Output CSV","hash":"output-csv-77","id":517},{"text":"time_of","hash":"time_of","id":518},{"text":"Parameters","hash":"parameters-63","id":519},{"text":"Results","hash":"results-66","id":520},{"text":"Example: Time Of Record Column","hash":"example-time-of-record-column","id":521},{"text":"Query","hash":"query-78","id":522},{"text":"Table: Input","hash":"table-input-77","id":523},{"text":"Output CSV","hash":"output-csv-78","id":524},{"text":"Example: Time Of Integer Column","hash":"example-time-of-integer-column","id":525},{"text":"Query","hash":"query-79","id":526},{"text":"Table: Input","hash":"table-input-78","id":527},{"text":"Output CSV","hash":"output-csv-79","id":528},{"text":"upper","hash":"upper","id":529},{"text":"Parameters","hash":"parameters-64","id":530},{"text":"Results","hash":"results-67","id":531},{"text":"Example: Upper Case","hash":"example-upper-case","id":532},{"text":"Query","hash":"query-80","id":533},{"text":"Table: Input","hash":"table-input-79","id":534},{"text":"Output CSV","hash":"output-csv-80","id":535},{"text":"variance","hash":"variance","id":536},{"text":"Parameters","hash":"parameters-65","id":537},{"text":"Results","hash":"results-68","id":538},{"text":"Example: Variance","hash":"example-variance","id":539},{"text":"Query","hash":"query-81","id":540},{"text":"Table: Input","hash":"table-input-80","id":541},{"text":"Output CSV","hash":"output-csv-81","id":542},{"text":"when","hash":"when","id":543},{"text":"Parameters","hash":"parameters-66","id":544},{"text":"Results","hash":"results-69","id":545},{"text":"Example: When","hash":"example-when","id":546},{"text":"Query","hash":"query-82","id":547},{"text":"Table: Input","hash":"table-input-81","id":548},{"text":"Output CSV","hash":"output-csv-82","id":549},{"text":"with_key","hash":"with_key","id":550},{"text":"Parameters","hash":"parameters-67","id":551},{"text":"Results","hash":"results-70","id":552},{"text":"Example: Changing Keys","hash":"example-changing-keys","id":553},{"text":"Query","hash":"query-83","id":554},{"text":"Table: Input","hash":"table-input-82","id":555},{"text":"Output CSV","hash":"output-csv-83","id":556},{"text":"year","hash":"year","id":557},{"text":"Parameters","hash":"parameters-68","id":558},{"text":"Results","hash":"results-71","id":559},{"text":"Example: Year","hash":"example-year","id":560},{"text":"Query","hash":"query-84","id":561},{"text":"Table: Input","hash":"table-input-83","id":562},{"text":"Output CSV","hash":"output-csv-84","id":563},{"text":"yearly","hash":"yearly","id":564},{"text":"Results","hash":"results-72","id":565},{"text":"Example: Yearly Aggregated Window","hash":"example-yearly-aggregated-window","id":566},{"text":"Query","hash":"query-85","id":567},{"text":"Table: Input","hash":"table-input-84","id":568},{"text":"Output CSV","hash":"output-csv-85","id":569},{"text":"Example: Filter Yearly","hash":"example-filter-yearly","id":570},{"text":"Query","hash":"query-86","id":571},{"text":"Table: Input","hash":"table-input-85","id":572},{"text":"Output CSV","hash":"output-csv-86","id":573},{"text":"zip_max","hash":"zip_max","id":574},{"text":"Parameters","hash":"parameters-69","id":575},{"text":"Results","hash":"results-73","id":576},{"text":"Example: Zip Max","hash":"example-zip-max","id":577},{"text":"Query","hash":"query-87","id":578},{"text":"Table: Input","hash":"table-input-86","id":579},{"text":"Output CSV","hash":"output-csv-87","id":580},{"text":"zip_min","hash":"zip_min","id":581},{"text":"Parameters","hash":"parameters-70","id":582},{"text":"Results","hash":"results-74","id":583},{"text":"Example: Zip Min","hash":"example-zip-min","id":584},{"text":"Query","hash":"query-88","id":585},{"text":"Table: Input","hash":"table-input-87","id":586},{"text":"Output CSV","hash":"output-csv-88","id":587}]},"10":{"id":10,"text":"Fenl expressions are either discrete or continuous. Discrete expressions describe values that are only meaningful at specific times. Continuous expressions describe values that are meaningful over ranges of time. A discrete expression produces values at a finite set of times, at all other times its value is null. Tables contain a finite set of events, and each event is associated with a specific time. A table only has a a meaningful value at the set of times for which events exist. Similarly, simple operations such as field reference produce discrete results when applied to discrete expressions. Discrete expressions may be combined in various ways, for example by adding them together as shown. In most cases operations produce output values any time one of their input expressions produces a value. In this example we can see that many of the values produced are null, since the expression Purchase.amount is defined at different times than Review.stars, and adding null to a number produces null. A continuous expression has a meaningful value at all points in time. Continuous expressions produce values at every time contributing to their value. Aggregations generally produce continuous values. For example, at any point in time we can describe the sum of all Purchase.amount values seen so far. Continuous expressions have a value at all times, but they produce values at specific times. These times are illustrated above as circles. A continuous expression can be thought of as producing a stream of updates; at any given time the stream takes the value of the most recent update. When continuous values are aggregated, the aggregation is updated when a value is produced. For example, count produces the same result for a discrete expression with and without an intermediate aggregation. Purchase.amount | count() == Purchase.amount | sum() | count() Design The distinction between \"having\" a value and \"producing\" a value allows aggregations to be applied in the same way to both continuous and discrete expression. Applying an operation such as sum to a continuous value (in the mathematical sense) would correspond to integrating the value. We feel interpreting aggregations of continuous values as integration would be surprising, especially in cases such as count. The continuity of the result of an operation involving multiple expressions depends on the continuity of the operation’s inputs. In general discreteness is \"greedy\". Given discrete expressions defined at the set of times A and B and a continuous expression, the result of a binary operation between any pair is described in the following table. Discrete[A] Discrete[B] Continuous Discrete[A] Discrete[A] Discrete[A and B] Discrete[A] Discrete[B] Discrete[A and B] Discrete[B] Discrete[B] Continuous Discrete[A] Discrete[B] Continuous When a discrete expression is combined with a continuous expression, each the value at time present in the discrete expression is combined with the value the continuous expression has at that same time to produce a result. As mentioned, most operations between expressions produce a value when any input expression produces a value. This can lead to values being produced at undesirable times. The when operation allows filtering the times at which an expression produces values. It works by producing the value of an expression whenever a predicate expression produces the value true.","title":"Continuity","component":"kaskada","version":"main","name":"continuity","url":"/kaskada/main/fenl/continuity.html","titles":[{"text":"Discrete Expressions","hash":"discrete-expressions","id":1},{"text":"Continuous Expressions","hash":"continuous-expressions","id":2},{"text":"Interactions Between Continuous and Discrete Expressions","hash":"interactions-between-continuous-and-discrete-expressions","id":3},{"text":"Filtering when Values are Produced","hash":"filtering-when-values-are-produced","id":4}]},"11":{"id":11,"text":"Fenl operates on typed values. Fenl’s type system describes several different kinds of values. Every expression has an associated type. Since every expression produces a column of values (corresponding to the value at specific points in time), each expression can be thought of as a column of the given type. Simple values such as the string \"hello\" or the integer 57 are scalar types. They correspond to a column containing values of the given type (or null). Types may be combined to create records. Record fields may be scalar or nested record types. An expression producing a record type is a column that produces a value of the given record type or null at each point in time. Scalar types include booleans, numbers, strings, timestamps, durations and calendar intervals. Type Example Description bool true, false Booleans represent true or false u8, u32, u64 0, 1, `10000 Unsigned integer numbers of a particular bit size. i8, i32, i64 0, 1, -100, 10000, 0.0, -1.0 Signed integer numbers of a particular bit size. f32, f64 0, 1, -100, 10000, 0.0, -1.0, -100837.631 Floating point numbers. When using a decimal a leading numeric character is required. string \"hello\", \"hello \\\"john\\\"\" Unicode strings. Strings are written with double-quotes. Double quotes may be escaped within the string. timestamp_s, timestamp_ms, timestamp_us, timestamp_ns 1639595174 as timestamp_s The point in time a given number of seconds, milliseconds, microseconds or nanoseconds after the Unix Epoch (00:00:00 UTC on January 1, 1970). duration_s, duration_ms, duration_us, duration_ns 0 as duration_s, 1 as duration_ms, -100 as duration_us, 10000 as duration_ns A given number of seconds, milliseconds, microseconds or nanoseconds. interval_days, interval_months 0 as interval_days, 1 as interval_days, -100 as interval_months, 10000 as interavl_months A calendrical interval. Records allow combining multiple different types into a single value. Records are unnamed - any two records with the same set of fields and value types are considered equal. Fields within a record may have different types. Field names must start with a letter. Type Examples Description\" {name: string, age: number} {name: \\\"john\\\", age: 32} \"A record is a composite type made up of 0 or (generally) more components. Each component is associated with a field name Fenl implicitly coerces numeric types when different kinds of numbers are combined. For example adding a 64-bit signed integer value to a 32-bit floating point value produces a 64-point floating point value. Type coercion will never produce an integer overflow or reduction in numeric precision. Such conversions may be explicitly specified using as. The coercion rules can be summarized with the following rules: Integers can be widened: i8 → i16 → i32 → i64. Unsigned integers can be widened: u8 → u16 → u32 → u64. Floating point numbers can be widened: f16 → f32 → f64. Unsigned integers can be promoted to the next wider integer u8 → i16, u16 → i32, u32 → i64. All numbers may be converted to f64. Strings may be implicitly converted to timestamps by attempting to parse them as RFC3339 values. The timestamp will be null for strings that don’t successfully parse. When two numbers are used, Fenl attempts to promote them to a compatible type as the smallest type that both types may be converted to. The following table shows the result of this promotion for pairs of numeric types. i8 i16 i32 i64 u8 u16 u32 u64 f16 f32 f64 i8 i8 i16 i32 i64 i16 i32 i64 f64 f16 f32 f64 i16 i16 i16 i32 i64 i16 i32 i64 f64 f16 f32 f64 i32 i32 i32 i32 i64 i16 i32 i64 f64 f16 f32 f64 i64 i64 i64 i64 i64 i64 i64 i64 f64 f16 f32 f64 u8 i16 i16 i16 i64 u8 u16 u32 u64 f16 f32 f64 u16 i32 i32 i32 i64 u16 u16 u32 u64 f16 f32 f64 u32 i64 i64 i64 i64 u32 u32 u32 u64 f16 f32 f64 u64 f64 f64 f64 f64 u64 u64 u64 u64 f16 f32 f64 f16 f16 f16 f16 f16 f16 f16 f16 f16 f16 f32 f64 f32 f32 f32 f32 f32 f32 f32 f32 f32 f32 f32 f64 f64 f64 f64 f64 f64 f64 f64 f64 f64 f64 f64 f64 Coercion to Floating-Point Note that when u64 is combined with a signed type the result is f64. This is the only case where an operation between integers produces a floating-point value. Every function in Fenl has a type signature. For example, count(input: any, window: window = null) → u32. This tells us many things about the function: It takes two arguments input and window. The first argument can be of any type (scalar or record). The second argument must be a type of window (the result of a window function such as since or sliding). The second argument (window) is optional, and provides a default value of null. The result is a u32. Parameters without default values are required. Required arguments may be provided by position or keyword. One required argument may be omitted, in which case it is implicitly $input. This allows for use of functions with the | (pipe) syntax. For instance, TableFoo | count() is treated as TableFoo | count($input) which is the same as TableFoo | count(input=$input, window=null). Parameters with default values in the signature are optional. Arguments for optional parameters must be keyword arguments. For example count(window = since(…​)) but not count(since(…​)). When a type constraint (such as any) appears in a signature, all occurrences of that must be the same type. Type coercion is applied as necessary to make all of the arguments for that constraint compatible. Additionally, each type constraint imposes restrictions on the types that are valid for arguments with that constraint, as shown in the table below. Type Constraint Valid Types any Any scalar or record type. key Any hashable type. This includes bool, i8, i16, i32, i64, u8, u16, u32, u64 and string number Any numeric scalar type. This includes i8, i16, i32, i64, u8, u16, u32, u64, f16, f32 and f64. signed Any signed numeric scalar type. This includes i8, i16, i32, i64, f16, f32 and f64. float Any floating point numeric scalar type. This includes f16, f32 and f64. timedelta Any time delta scalar type. This includes duration_s, duration_ms, duration_us, duration_ns, interval_days and interval_months. ordered Any ordered scalar type. This includes i8, i16, i32, i64, u8, u16, u32, u64, f16, f32, f64, timestamp_s, timestamp_ms, timestamp_us, and timestamp_ns. window Any result of a window function.","title":"Data Model","component":"kaskada","version":"main","name":"data-model","url":"/kaskada/main/fenl/data-model.html","titles":[{"text":"Types","hash":"types","id":1},{"text":"Scalars","hash":"scalars","id":2},{"text":"Records","hash":"records","id":3},{"text":"Type Coercion","hash":"type-coercion","id":4},{"text":"Type Promotion Rules","hash":"type-promotion-rules","id":5},{"text":"Numeric Type Coercion Table","hash":"numeric-type-coercion-table","id":6},{"text":"Functions and Signatures","hash":"functions-and-signatures","id":7},{"text":"Optional Parameters","hash":"optional-parameters","id":8},{"text":"Type Constraints","hash":"type-constraints","id":9}]},"12":{"id":12,"text":"Entities are how Kaskada organizes data for use in feature engineering. They describe the particular objects that are being represented in the system. Entities represent the categories or \"nouns\" in Kaskada’s system and can generally be thought of as any category of object that can be identified from the data sets ingested into the system. Common examples of entities are \"Users\" or \"Vendors\". If something can be given a name or other unique identifier, it can probably be expressed as an entity. In a relational database, an entity would be anything that is identified by the same key in a set of tables. While Entities represent a category of a type of thing, an \"Entity Key\" represents a specific item in that category. Below is a table with some example Entities and specific Entity instances. Entity Example Entity Key Address 1600 Pennsylvania Ave Airport SEA Customer John Doe City Seattle State Washington To demonstrate how entities affect Fenl expressions, we’ll start with a simplified dataset consisting of two tables. The Purchase table describes purchase transactions. { customer_id: string, time: datetime, product_id: string, amount: number } entity(customer_id) time product_id amount patrick 100 krabby_patty 3.99 squidward 101 krabby_patty 5.99 The ProductReview table describes customer’s ratings of products they’ve purchased { customer_id: string, time: datetime, product_id: string, stars: number } entity(customer_id) time product_id stars patrick 100 krabby_patty 5 squidward 101 krabby_patty 2 All aggregations (ie sum, count, etc) are scoped to the entities of the aggregated expression. For example the purchase count will produce per-customer results. Purchase | count() entity(customer_id) time Purchase count() patrick 100 1 squidward 101 If two tables describe the same entity they can be combined without the need to provide join conditions. The entity key acts as an implicit join key. For example, \"customers\" are the entity for both the Purchase and ProductReview tables. We can combine aggregations over each table without any boilerplate join code. { p_count: Purchase | count(), c_avg_rating: ProductReview.stars | mean(), } entity(customer_id) time output patrick 100 { p_count: 1, c_avg_rating: 5 } squidward 101 { p_count: 1, c_avg_rating: 2 } Some values are related to more than one entity, for example a ProductReview may be related to both the customer who reviewed a product and the product that was reviewed. An expression’s entity can be changed by providing a new entity key. ProductReview | with_key(ProductReview.product_id) customer_id time entity(product_id) stars patrick 100 krabby_patty 5 squidward 101 krabby_patty 2 Changing an expression’s entity has no effect on the values produced by the expression. The change only becomes visible when the result is used in an operation that depends on entity key, for example an aggregation. ProductReview | with_key(ProductReview.product_id) | mean() entity(product_id) time …​ mean() krabby_patty 100 5 krabby_patty 101 3.5 In many cases it’s necessary to combine values associated with different entities. This can be accomplished by looking up the value of an expression for a particular key. The lookup function takes two arguments: the first argument (the key expression) describes the entity key being looked up, and the second argument (the foreign expression) describes the value to be looked up: let avg_review_by_product = ProductReview | with_key(ProductReview.product_id) | mean() in { p_count: Purchase | count(), c_avg_rating: ProductReview.stars | mean(), p_avg_rating: avg_review_by_product | lookup($input, Purchase.product_id) } entity(customer_id) time output patrick 100 { p_count: 1, c_avg_rating: 5, p_avg_rating: 5 } squidward 101 { p_count: 1, c_avg_rating: 2, p_avg_rating: 3.5 } A lookup expression produces the value of the foreign expression at every time the key expression produces a non-null value. Time Travel Just like every other Fenl expression, lookups are temporal. This means that the value produced by a lookup expression accurately reflects the value being looked up at the time it’s produced. With Kaskada, information cannot travel backwards in time, just like in the real world. All Fenl expressions are associated with an entity, and all Fenl values are associated with an entity key. Fenl queries return every non-null value produced by the query expression. There are cases where an entity exists in a table, but doesn’t produce any values for a given query. let total = Purchase.amount | sum() in { total: total | if(total >= 0) } This expression may produce zero rows for any entities whose total is negative, because null values are omitted from query results. To capture the null value, the conditional can be moved inside a record; the value will be null, but the enclosing record won’t be. let total = Purchase.amount | sum() in { total: total | if(total >= 0) }","title":"Enities","component":"kaskada","version":"main","name":"entities","url":"/kaskada/main/fenl/entities.html","titles":[{"text":"What is an Entity?","hash":"what-is-an-entity","id":1},{"text":"What is an Entity Key?","hash":"what-is-an-entity-key","id":2},{"text":"How are Entities Used?","hash":"how-are-entities-used","id":3},{"text":"Per-entity Aggregation","hash":"per-entity-aggregation","id":4},{"text":"Cross-Table Operations","hash":"cross-table-operations","id":5},{"text":"Changing Entities","hash":"changing-entities","id":6},{"text":"Working with different entities","hash":"working-with-different-entities","id":7},{"text":"Entities In Query Results","hash":"entities-in-query-results","id":8}]},"13":{"id":13,"text":"Fenl provides two predication functions: if(condition, value) returns the value if the condition is true, and returns null in all other cases. The function’s result follows the standard continuity rules. For example, the result will be continuous if value and condition are both continuous, otherwise the result will be discrete. when(condition, value) returns the value of value every time condition produces the value true. The result of when is always discrete, and produces values at the set of times condition produces the value true. These functions filter values in different ways: if filters by replacing values with null, whereas when filters values by limiting the set of times at which values are produced. Kaskada’s compute engine is tabular, so in some cases the performance of if will be better than that of when because if can be applied as a simple transformation while when requires building a new table. In other cases, when may be more performant if it allows subsequent operations to be computed over a table with significantly fewer rows. A general guideline is to use if for replacing values, and when for filtering values. For example, use if and else to clean values: Event.duration | if($input > 0) | else(0) Alternately, use when to filter rows returned by a query: Event | when(Event.kind == \"conversion\") The values produced by all Fenl expressions are either constant or associated with an entity. For example, the expression 42 produces a constant integer value. By comparison the expression ProductReview.stars might produce integer values associated with each review’s entity, for example a particular product. Aggregations (e.g. sum, min, first) are scoped to each value’s entity key. Simple functions that accept multiple arguments (ie add or eq) require that their non-constant arguments have compatible entity key types, and operate between values with the same entity key. This scoping behavior makes it easy to write common operations, but often times it’s necessary to combine values with different entity keys. The lookup function support supports these use cases. The lookup function takes two arguments: the first argument key (the key expression) describes the entity key being looked up, and the second argument value (the foreign expression) describes the value to be looked up: lookup(key, value) The key expression identifies the \"other\" entity key, and should be expressed as an operation on \"this\" entity’s values. For example, if we want to lookup some information about the reviewer associated with each individual product review, the key expression might be something like ProductReview.reviewer_id. The value, or foreign expression, describes the value to look up, and should be expressed as an operation on the \"other\" entity’s values. Continuing the prior example, if we wanted to know the average number of stars a reviewer gives products, the foreign expression might be something like ProductReviewByReviewer.stars | mean(). Using these two expressions it’s possible to describe some facts about each product review: { product_id: ProductReview.product_id, reviewer: ProductReview.reviewer_id, reviewer_avg: lookup(ProductReview.reviewer_id, ProductReviewByReviewer.stars | mean()), reviewer_count: lookup(ProductReview.reviewer_id, ProductReviewByReviewer | count()), } A lookup expression produces the value of the foreign expression at every time the key expression produces a non-null value.","title":"Fenl FAQ","component":"kaskada","version":"main","name":"fenl-faq","url":"/kaskada/main/fenl/fenl-faq.html","titles":[{"text":"Choosing between when and if","hash":"choosing-between-when-and-if","id":1},{"text":"Joining expressions with different entities","hash":"joining-expressions-with-different-entities","id":2}]},"14":{"id":14,"text":"Let’s walk through an example of using Fenl to build features for a simple fraud detection model. Features will be built from two event tables; a Purchase table and a FraudReport table. The goal will be to build a model predicting if a given purchase will result in a fraud report within the next 30 days. A Purchase event occurs when a transaction is recorded. It describes the items that were purchased, the vendor selling the items, the customer buying the items and the total value of the transaction. # Purchases { time: timestamp_ns, id: string, vendor_id: string, customer_id: string, total: i64 } entity(id) time vendor_id customer_id total cb_001 100 chum_bucket karen 9 cb_002 101 chum_bucket karen 2 cb_003 102 chum_bucket karen 4 cb_004 103 chum_bucket patrick 5000 cb_005 103 chum_bucket karen 3 cb_006 104 chum_bucket karen 5 kk_001 100 krusty_krab patrick 3 kk_002 101 krusty_krab patrick 5 kk_003 102 krusty_krab patrick 12 kk_004 104 krusty_krab patrick 9 A FraudReport event occurs when a transaction is reported as fraudulent. It identifies the purchase that was reported as fraudulent. # FraudReports { time: timestamp_ns, purchase_id: string } entity (purchase_id) time cb_004 120 The values produced by a Fenl expression are associated with an entity key. Entity keys describe something each value is associated with. For example, a purchase could be related to a specific user, and a fraud report could be related to a specific vendor. The Purchase table’s entity key is the id field, while the FraudReport table’s entity key is the purchase_id field. Any entity key will do - these specific keys are chosen because they’re convenient for this exercise. Before we can start building the inputs to our model, we need to describe the target value the model will predict. We would like to predict if a given purchase will result in a fraud report - if the number of daily fraud reports is greater than zero. let Target = count(FraudReport, window=since(daily())) > 0 entity time entity cb_004 120 true Aggregations in Fenl are scoped to entity key; the Target expression produces a bool value associated with each purchase (as identified by FraudReport.purchase_id). In this case we’ve applied a window operation to the aggregation - the target value is the number of FraudReport values so far in a given day. We can describe some simple features based on attributes of a purchase event. For example, we can describe the purchase total by referencing the appropriate event field: let PurchaseTotal = Purchase.total entity time Purchase.total cb_001 100 9 cb_002 101 2 cb_003 102 4 cb_004 103 5000 cb_005 103 3 cb_006 104 5 kk_001 100 3 kk_002 101 5 kk_003 102 12 kk_004 104 9 Fenl expressions are either continuous or discrete. Discrete expressions are defined at a finite set of times and their value is null at all other times. For example, PurchaseTotal is a discrete expression: it is defined at the times associated with each purchase event. Continuous expressions are defined at all times, and are generally the result of an aggregation. For example, Target is a continuous expression because it uses the count() aggregation: at any point in time its value is true if there have been 1 or more FraudReport events before that time or false otherwise. It could be useful to compare how each individual purchase compares to the customer’s other purchases. We can describe a given customer’s purchases by transforming the purchase table to use customer_id as the entity key rather than id. The resulting expression contains the same values, but aggregations will now be scoped to customer ID rather than a purchase ID. let PurchaseByCustomer = Purchase | with_key($input.customer_id) entity time vendor_id customer_id total karen 100 chum_bucket karen 9 karen 101 chum_bucket karen 2 karen 102 chum_bucket karen 4 karen 103 chum_bucket karen 3 karen 104 chum_bucket karen 5 patrick 100 krusty_krab patrick 3 patrick 101 krusty_krab patrick 5 patrick 102 krusty_krab patrick 12 patrick 103 chum_bucket patrick 5000 patrick 104 krusty_krab patrick 9 This expression uses \"pipe syntax\" which allows sequential operations to be chained. Pipe syntax works by assigning the left-hand-side of the pipe to the name $input in the right-hand-side of the pipe. Within the right-hand-side of a pipe expression, required function arguments that are omitted from the function call default to $input. An equivalent way to write this expression is let PurchaseByCustomer = with_key(Purchase.customer_id, Purchase) This allows us to describe the average of each customer’s purchases: let AveragePurchaseByCustomer = PurchaseByCustomer.total | mean() time entity …​ mean() karen 100 9 karen 101 5.5 karen 102 5 karen 103 4.5 karen 104 4.6 patrick 100 3 patrick 101 4 patrick 102 6.666 patrick 103 1255 patrick 104 Expressions in Fenl are temporal; they describe the result of a given computation at every point in time. In this case, AveragePurchaseByCustomer is an expression whose value changes over time as purchase events occur. The temporal nature of expressions allows Fenl to describe the values as they would have been computed at arbitrary times in the past. Our goal is to predict if a given purchase will be reported as fraudulent, but the entity key of AveragePurchaseByCustomer describes a customer. We can operate between entities by \"looking up\" the average purchase of a particular purchase’s customer: let CustomerAveragePurchase = AveragePurchaseByCustomer | lookup(Purchase.customer_id) entity time customer_id …​ lookup(…​) cb_001 100 karen 9 cb_002 101 karen 5.5 cb_003 102 karen 5 cb_004 103 patrick 1255 cb_005 103 karen 4.5 cb_006 104 karen 4.6 kk_001 100 patrick 3 kk_002 101 patrick 4 kk_003 102 patrick 6.666 kk_004 104 patrick In this case, for each Purchase event, the value of AveragePurchaseByCustomer computed for the purchases customer_id at the time of the purchase is produced. The value being looked up (in this case AveragePurchaseByCustomer) is referred to as the foreign value, while the value describing the foreign entity (in this case Purchase.customer_id) is referred to as the key value. Lookups are similar to SQL left-joins: a foreign value is produced for each key value. In contrast to SQL joins, the lookup produces the foreign expression value at the point in time associated with each key expression value. We would like to predict if a purchase will result in a fraud report within 30 days of the purchase. We began by describing our Target value, and then we described two features that could be useful for making such a prediction: PurchaseTotal and CustomerAveragePurchase. For our model to make predictions about the future, it must be trained on features and target values computed at different points in time - we would like the target value to be computed 30 days after the feature values. Fenl allows values to \"time-travel\" forward in time. This can be accomplished by shifting the feature expressions forward in time by 30 days: let ShiftedPurchaseTime = PurchaseTotal.time | add_time(days(30)) let ShiftedCustomerAverageTime = CustomerAveragePurchase.time | add_time(days(30)) let ShiftedPurchaseTotal = PurchaseTotal | shift_to(ShiftedPurchaseTime) let ShiftedCustomerAveragePurchase = CustomerAveragePurchase | shift_to(ShiftedCustomerAverageTime) entity time ShiftedPurchaseTotal ShiftedCustomerAveragePurchase cb_001 130 9 9 cb_002 131 2 5.5 cb_003 132 4 5 cb_004 133 5000 1255 cb_005 133 3 4.5 cb_006 134 5 4.6 kk_001 130 3 3 kk_002 131 5 4 kk_003 132 12 6.666 kk_004 134 9 1005.8 The result of these shift operations contain the same values as PurchaseTotal and CustomerAveragePurchase, but the times associated with each value will be 30 days later. We can now describe our training set by combining the shifted predictor values with the non-shifted target value: let TrainingExample = { p_total: ShiftedPurchaseTotal, avg_purchase: ShiftedCustomerAveragePurchase, target: Target, } entity time p_total avg_purchase target cb_001 130 9 9 false cb_002 131 2 5.5 false cb_003 132 4 5 false cb_004 133 5000 1255 true cb_005 133 3 4.5 false cb_006 134 5 4.6 false kk_001 130 3 3 false kk_002 131 5 4 false kk_003 132 12 6.666 false kk_004 134 9 1005.8 false Values cannot travel backwards in time. This helps to ensure that temporal leakage cannot happen. Once a model has been trained, we’ll need to compute feature vectors for making predictions. Feature vectors consist of the non-shifted predictor expressions but not the target value. let FeatureVector = { p_total: PurchaseTotal, avg_purchase: CustomerAveragePurchase, } entity time p_total avg_purchase cb_001 100 9 9 cb_002 101 2 5.5 cb_003 102 4 5 cb_004 103 5000 1255 cb_005 103 3 4.5 cb_006 104 5 4.6 kk_001 100 3 3 kk_002 101 5 4 kk_003 102 12 6.666 kk_004 104 9 1005.8 PurchaseTotal is a discrete expression whose value depends on the purchase event. A feature store implementation would seem to require some way of providing the \"current\" event. Alternately, we may want to omit discrete values and tell users they have to provide this type of information to the model.","title":"Fenl Quick Start","component":"kaskada","version":"main","name":"fenl-quick-start","url":"/kaskada/main/fenl/fenl-quick-start.html","titles":[{"text":"Data Model","hash":"data-model","id":1},{"text":"Simple Aggregation: Target Value","hash":"simple-aggregation-target-value","id":2},{"text":"First Feature: Purchase Total","hash":"first-feature-purchase-total","id":3},{"text":"Changing Entity Key: Purchase Average by Customer part I","hash":"changing-entity-key-purchase-average-by-customer-part-i","id":4},{"text":"Joining Between Entities: Purchase Average By Customer part II","hash":"joining-between-entities-purchase-average-by-customer-part-ii","id":5},{"text":"Time Travel: Shifting Features Forward in Time","hash":"time-travel-shifting-features-forward-in-time","id":6},{"text":"Going to Production: Feature Vectors","hash":"going-to-production-feature-vectors","id":7}]},"15":{"id":15,"text":"Fenl is a declarative query language for feature engineering. It allows you to focus on declaring what you want computed, rather than how it should be computed. Because Fenl is focused on the what, expressions are easy to combine and re-use. Computations in Fenl are temporal: they produce a time-series of values describing the full history of a computation’s results. Temporal computation allows Fenl to capture what an expression’s value would have been at arbitrary times in the past. Fenl values can time-travel forward through time. Time travel allows combining the result of different computations at different points in time. Because values can only travel forward in time, Fenl prevents information about the future from \"leaking\" into the past. As a query language, Fenl is focused on succinctly expressing the most common operations used in feature engineering. Fenl makes it easy to read and write feature definitions by providing intuitive syntax for: Temporal lookups Chained operations Named expressions Reading & constructing structured values","title":"Fenl Language Quide","component":"kaskada","version":"main","name":"language-guide","url":"/kaskada/main/fenl/language-guide.html","titles":[{"text":"What is Fenl?","hash":"what-is-fenl","id":1},{"text":"How is Fenl Different?","hash":"how-is-fenl-different","id":2}]},"16":{"id":16,"text":"Fenl is composed of expressions. Every Fenl expression describes a stream of values. Expressions may be composed to form new expressions. Fenl supports a rich variety of value types. Each type has a corresponding syntax for writing values in Fenl. See the Data Model section for example syntax for constructing different value types. Arithmetic operations can be expressed as they are in most languages: 1 + 2 / (3 * 4) Logical operations use standard comparators, and can be combined with and and or: true and (5 >= 2) or !false Data types that compose multiple values allow individual values to be referenced using dot-syntax: { a: 10, b: true }.a All Fenl expressions produce a value, so conditional logic is primarily used to determine when an expression’s value should be null, for example the following expression’s value is null 5 | if(false) Let-binding is a special operation that introduces local names for other expressions. It is useful when a given expression needs to be referenced multiple times, or when you want to break up a complex expression into smaller pieces. Let bindings have two components: name / expression bindings followed by a body expression in which the bound names may be referenced. let the_answer = 42 in the_answer * 2 Multiple bindings may be introduced by repeating the let portion. Bindings may reference prior bindings. let the_answer = 42 let not_the_answer = the_answer * 2 in the_answer != not_the_answer The value of a let expression is the value of the in expression, evaluated in the context of the name bindings. Functions are called with parens. Function parameters are named. substring(s = \"input\", start = 0, end = 2) Some parameters declare default values. These parameters may be omitted from the function call. substring(\"input\") However, if you provide a value for a named parameter with a default value, the parameter name must be included. substring(\"input\", 0) # invalid syntax substring(\"input\", start = 0) # valid syntax In Fenl the pipe operator | can be used to chain function calls. The pipe operator is a binary operation that binds the left-hand expression to the name $input within the right-hand expression. The pipe operation lhs | rhs is equivalent to the let-binding let $input = lhs in rhs. 42 | mul(2, $input) Functions used within the RHS of a pipe expression may omit required arguments to use $input. The following is equivalent to the previous expression. 42 | mul(2) Pipe operators are useful for applying multiple operations in sequence. the_answer | add(10) | div(2) | gt(0) Design Many functions can be though of having \"data\" parameters and \"config\" parameters. For example substring transforms a string (the \"data\" parameter) by selecting a range of characters from a start offset to and end offset (the \"config\" parameters). The start and end offsets are allowed to be any expression, but most of the time they’re constants, for example substring(zipcode, start=0, end=6). Fenl’s functions try to place \"data\" parameters as the last required / positional parameter. Placing \"data\" parameters last makes it easy to omit them when using pipe syntax. The resulting code emphases the \"config\" parameters when reading chains of operations. Generally, A | B() is equivalent to the explicit application A | B($input) which is equivalent to B(A). Fenl name resolution is context-dependent. The context generally starts with the set of user-defined ref:tableservice[tables] and ref:viewservice[views]. ref:computeservice_query[Query requests] may provide additional name bindings with the withTables parameter. Names may be added to the context with let and the | operator. Names bound in these ways are only visible in the associated subexpressions, for example the in clause of let and the RHS expression of |. Names may be bound more than once. If a name is bound two times, the second binding is only visible within the in subexpression of the second binding. let current_favorite = \"pizza\" let first_favorite = current_favorite let current_favorite = \"hot dogs\" in { current_favorite, first_favorite } In this example, the name first_favorite is bound to the value of current_favorite at the time it is declared, then the name current_favorite is bound to a different value. The value of first_favorite is unaffected by the re-binding of current_favorite. { \"current_favorite\": \"hot dogs\", \"first_favorite\": \"pizza\"} Fenl was designed with a few key principles in mind. In alphabetic order they are: Composable: Complex behaviors should be possible by composing simple operations. Consistent: Similar operations should be expressed similarly. Data Centric: Fenl focuses on manipulating data. Failures are data too. Deterministic: Applying the same operations to the same data should produce the same results. Explicit: Explicit syntax more clearly indicates what is happening than implicit behavior. It is easier to add implicit behavior than remove confusing implicit behaviors. Familiar: All factors being equal, Fenl prefers to be familiar. Divergence must have clear benefits and rationale. Flat: Flat syntax is easier to read and understand than nested. Informative: Fenl strives to inform how to think about defining features and guide users to success. Local: Reasoning about behavior should be possible with only the information \"nearby\". Generally, expressions should be self-contained. Safe & Performant: Features should be safe and performant by default. Simple: Simple operations should be simple to express. Common operations should be simple. Not all conceivable operations are necessary.","title":"Syntax","component":"kaskada","version":"main","name":"syntax","url":"/kaskada/main/fenl/syntax.html","titles":[{"text":"Constructors","hash":"constructors","id":1},{"text":"Unary and Binary operations","hash":"unary-and-binary-operations","id":2},{"text":"Let Binding","hash":"let-binding","id":3},{"text":"Function Calls","hash":"function-calls","id":4},{"text":"Pipe Syntax","hash":"pipe-syntax","id":5},{"text":"Name Resolution","hash":"name-resolution","id":6},{"text":"Syntax Design Principles","hash":"syntax-design-principles","id":7}]},"17":{"id":17,"text":"Time plays a critical role when working with event-based data and event-based models. The ability to calculate point-in-time historical feature values is one of the core features of Kaskada. Rather than computing a single value, Fenl expressions produce temporal streams describing the result of a given computation as its changes over time. Kaskada is an event-based computation engine. An \"event\" can be any fact about the world associated with a time, for example, a user signing up for a service, or a customer purchasing a product. Most sources of event-based data change over time as events occur and are added to the system. Computing values from a set of events that changes over time means that the results must change as well. Traditional data processing systems are designed to answer questions about the current state of a dataset, for instance, \"how many purchases has a given user made?\". This approach has some drawbacks: the answer to a given question changes based on when it is asked, and the only time at which you can ask questions is \"now\". These limitations are reasonable for many use cases, but they make it difficult to build feature examples for training many machine learning models. A common error is accidentally using information that is known \"now\" to build training examples intended to describe the information available in the past. The way traditional computations are expressed doesn’t help matters. Query languages like SQL and data-processing interfaces like DataFrames were designed to answer questions about tabular (rather than temporal) data. Seemingly simple questions like \"how many fraud reports had been filed against each purchase’s vendor at the time of purchase?\" can require complex windowing and partitioning operations. Fenl takes a different approach by designing awareness of time into the query language. Rather than answering a question with a single value, Fenl produces a stream of values describing the answer as it changes over time. For example, the answer to the question \"how many purchases has a given user made?\" might be the following table: Time Purchase | count() 2012-02-23 1 2012-05-10 2 2018-11-03 3 2019-10-26 4 From this table we can see that if the question was asked in 2015 the answer would be \"the user has made two purchases\", but if the question was asked now the answer would be \"the user has made four purchases\". Often it is valuable to know the \"final\" answer to a question - the last answer that would be produced after all values have been processed. Fenl provides the ability to request final-results for these use cases. The result of query with result behavior set to final-results would be the following: Time Purchase count() 2019-10-26 Final queries make it possible to know the \"current\" value of a query. Incremental queries and materializations always use final queries. A core feature of Fenl is the ability to compute temporal joins across datasets. For example the question \"how many fraud reports had been filed against each purchase’s vendor at the time of purchase?\" can be written in a single line. FraudReport | count() | lookup(Purchase.vendor_id)","title":"Temporal Aggregations","component":"kaskada","version":"main","name":"temporal-aggregation","url":"/kaskada/main/fenl/temporal-aggregation.html","titles":[{"text":"Solving the Challenge of Event-Based Data","hash":"solving-the-challenge-of-event-based-data","id":1},{"text":"How Fenl Deals with Time","hash":"how-fenl-deals-with-time","id":2},{"text":"Value Streams","hash":"value-streams","id":3},{"text":"Final Results","hash":"final-results","id":4},{"text":"Temporally-Correct Joins","hash":"temporally-correct-joins","id":5}]},"18":{"id":18,"text":"Records allow one or more values into a single record. Each value is part of a named field within the record. Records may be created using curly braces, such as {name: \"john\", age: 32}. The corresponding type would be described as {name: string, age: 32}. Order of Record Fields Fields in a record are ordered, and the ordering matters, both for determining if two records are the same type as well as for determining the order of columns in the output. A record may be extended with the fields of another record. When names collide, the new fields override the older fields. This may be done as extend(new_record, original) or original | extend(new_record). Example: {name: \"john\", age: 32} | extend({age: 33, lastname: \"smith\" }) would produce the record {name: \"john\", age: 33, lastname: \"smith\" }. Specific fields from a record may be selected using select_fields. The result is a record containing only the specified fields. Example: select_fields({name: \"john\", age: 33, lastname: \"smith\" }, \"lastname\", \"name\") produces the record {name: \"john\", lastname: \"smith\"}. Specific fields from a record may be removed using remove_fields. The result is a record without the named fields. Example: remove_fields({name: \"john\", age: 33, lastname: \"smith\" }, \"lastname\", \"name\") produces the record {age: 33}.","title":"Working with Records","component":"kaskada","version":"main","name":"working-with-records","url":"/kaskada/main/fenl/working-with-records.html","titles":[{"text":"Creating a Record","hash":"creating-a-record","id":1},{"text":"Extending a Record","hash":"extending-a-record","id":2},{"text":"Selecting or Projecting Fields","hash":"selecting-or-projecting-fields","id":3},{"text":"Removing Fields","hash":"removing-fields","id":4}]},"19":{"id":19,"text":"To use Kaskada on the command line, you’ll need to install three components: The Kaskada command-line executable The Kaskada manager, which serves the Kaskada API The Kaskada engine, which executes queries Each Kaskada release has pre-compiled binaries for each component. You can visit the Releases page on Github to obtain the latest Kaskada release version binaries for your platform. The example commands below will download the latest Kaskada binaries and applies to Linux and OSX. curl -s https://api.github.com/repos/kaskada-ai/kaskada/releases/latest |\\ grep \"browser_download_url.*\" |\\ grep $(uname -m | sed 's/x86_64/amd64/') |\\ grep $(uname -s | tr '[:upper:]' '[:lower:]') |\\ cut -d ':' -f2,3 |\\ tr -d \\\" |\\ xargs -I {} sh -c 'curl -L {} -o $(basename {}| cut -d '-' -f1,2)' chmod +x kaskada-* Authorizing applications on OSX If you’re using OSX, you may need to unblock the applications. OSX prevents applications you download from running as a security feature. You can remove the block placed on the file when it was downloaded with the following command: xattr -dr com.apple.quarantine You can start a local instance of the Kaskada service by running the manager and engine: ./kaskada-manager 2>&1 > manager.log 2>&1 & ./kaskada-engine serve > engine.log 2>&1 & Allowing services to listen on OSX When using OSX, you may need to allow these services to create an API listener the first time you run these commands. This is normal, and indicates the services are working as expected - the API allows services to communicate between themselves. To verify they’re installed correctly and executable, try running the following command (which lists any resources you’ve created): ./kaskada-cli sync export --all You should see output similar to the following: 10:18AM INF starting export {} 10:18AM INF Success! The CLI manages Kaskada resources declaratively by managing spec files. A spec file is a YAML file describing a set of Kaskada resources, for examples tables and views. We’ll begin by creating a table. The first step is to create a spec file containing the table’s definition. Every table is associated with a schema which defines the structure of each event in the table. Schemas are inferred from the data you load into a table, however, some columns are required by Kaskada’s data model. Every table must include a column identifying the time and entity associated with each row. When creating a table, you must tell Kaskada which columns contain the time and entity of each row: The time column is specified using the time_column_name parameter. This parameter must identify a column name in the table’s data which contains time values. The time should refer to when the event occurred. The entity key is specified using the entity_key_column_name parameter. This parameter must identify a column name in the table’s data which contains the entity key value. The entity key should identify a thing in the world that each event is associated with. Don’t worry too much about picking the \"right\" value - it’s easy to change the entity using the with_key() function. For more information about configuring tables, see developing:tables.adoc#creating-a-table. For more information about the expected structure of input files, see Expected File Format Listing 1. spec.yaml tables: # The name of the table - tableName: Purchase # A field containing the time associated with each event timeColumnName: purchase_time # An initial entity key associated with each event entityKeyColumnName: customer_id # Where the table's data will be stored # The default storage location is 'kaskada', and uses local files to store events. source: kaskada: {} To create this table, we must sync the state of the Kaskada service with the contents of the file. ./kaskada-cli sync apply -f spec.yaml # > 2:18PM INF starting plan # > 2:18PM INF resource not found on system, will create it kind=*kaskadav1alpha.Table name=GamePlay # > 2:18PM INF resource not found on system, will create it kind=*kaskadav1alpha.Table name=Purchase # > 2:18PM INF Success! This creates a table named Purchase. Any data loaded into this table must have a timestamp field named purchase_time, a field named customer_id, and a field named subsort_id. Idiomatic Kaskada We like to use CamelCase to name tables because it helps distinguish data sources from transformed values and function names. You’ve now created your first table! Now that we’ve created a table, we’re ready to load some data into it. Data can be loaded into a table in multiple ways. In this example we’ll load the contents of a Parquet file into the table. To learn about the different ways data can be loaded into a table, see the \"Uploading Data\" section of the \"Tables\" page. # Download a file to load and save it to path 'purchase.parquet' curl -L \"https://drive.google.com/uc?export=download&id=1SLdIw9uc0RGHY-eKzS30UBhN0NJtslkk\" -o purchase.parquet # Load the file into the Purchase table (which was created in the previous step) ./kaskada-cli table load \\ --table Purchase \\ --file-path file://${PWD}/purchase.parquet The file’s content is added to the table. For more help with tables and loading data, see Reference - Tables You can write queries in a number of ways with Kaskada. As you are iterating it can be helpful to build up your queries as components as you go. Once you’d like to persist a query, check out our article on sharing queries with Views. Let’s start by looking at the Purchase table without any filters, this query will return all of the columns and rows contained in a table: ./kaskada-cli query run --stdout --response-as csv <<EOS Purchase EOS This table is intentionally small so that you can get to know queries with Kaskada. When working with larger data sets, you may want to write the results to a file rather than stdout (by omitting the --stdout flag). Let’s walk through this command. We begin by using the CLI to run a query: kaskada-cli query run. CLI commands are organized into groups like query, load, and sync - each group contains a set of related sub-commands. In order to see the results of our query, we used the command flag --stdout; the default behavior is to write results to a file and return a JSON object describing the result of the query. Finally, we specified how to encode the results with the flag --response-as csv. CSV is a good format for writing results to STDOUT because it’s relatively human-readible. The default is to encode results in Parquet, which is a much more efficient encoding for larger datasets. The query is enclosed between <<EOS and EOS - this is Bash syntax for \"heredocs\", which allow you to easily write multi-line strings and pass them into the CLI on STDIN. It can be helpful to limit your results to a single entity. This makes it easier to see how a single entity changes over time. ./kaskada-cli query run --stdout --response-as csv <<EOS Purchase | when(Purchase.customer_id == \"patrick\") EOS As you begin to better understand your data you can start using aggregations over your data such as the max() function: ./kaskada-cli query run --stdout --response-as csv <<EOS { max_purchase: Purchase.amount | max(), } | when(Purchase.customer_id == \"patrick\") EOS These results may be surprising if you were expecting a single value, this is a feature, not a bug! Computations in Fenl are temporal: they produce a time-series of values describing the full history of a computation’s results. Temporal computation allows Fenl to capture what an expression’s value would have been at arbitrary times in the past. Fenl values can time-travel forward through time. Time travel allows combining the result of different computations at different points in time. Because values can only travel forward in time, Fenl prevents information about the future from \"leaking\" into the past. Read more in the Fenl Language Guide Now we can start building up more complex queries. To reduce the set of columns output in your query, you can define a record with the curly braces { } and name the columns with a label shown on the left of the : in the below query. In order to debug your features, we recommend including the time and the entity with each query so that you can walk through the results in time: ./kaskada-cli query run --stdout --response-as csv <<EOS { time: Purchase.purchase_time, entity: Purchase.customer_id, max_amount: Purchase.amount | max(), min_amount: Purchase.amount | min(), } | when(Purchase.customer_id == \"patrick\") EOS For more help writing queries, see Reference - Writing Queries When you’re done with this tutorial, you can delete the table you created in order to free up resources. # Delete the Purchase table (which was created in the previous step) ./kaskada-cli table delete --table Purchase The table is deleted and any files loaded into it are removed from the system. For more help with tables, see Reference - Tables","title":"Hello World (CLI)","component":"kaskada","version":"main","name":"hello-world-cli","url":"/kaskada/main/getting-started/hello-world-cli.html","titles":[{"text":"Installation","hash":"installation","id":1},{"text":"Managing resources","hash":"managing-resources","id":2},{"text":"Loading data into a table","hash":"loading-data-into-a-table","id":3},{"text":"Querying data","hash":"querying-data","id":4},{"text":"Cleaning up","hash":"cleaning-up","id":5}]},"20":{"id":20,"text":"To use Kaskada within a Jupyter notebook you’ll need to have the following pieces of software installed Python (version 3.6 and above) Jupyter Once you have both prerequisites installed ensure that you can run them. Open a terminal in your OS (command line prompt on Windows) and check the output of the following commands Listing 1. Verifying Kaskada prerequisites. The output shown here is from an Ubuntu system—​the output on your machine may vary. $ python --version Python 3.10.6 $ jupyter --version Selected Jupyter core packages... IPython : 7.34.0 ipykernel : 6.17.0 ipywidgets : 8.0.2 jupyter_client : 7.4.4 jupyter_core : 4.11.2 jupyter_server : 1.21.0 jupyterlab : 3.6.1 nbclient : 0.7.0 nbconvert : 7.2.3 nbformat : 5.7.0 notebook : 6.5.2 qtconsole : 5.3.2 traitlets : 5.5.0 The first step in using Kaskada in a notebook is to install the Kaskada Python client package. Open a terminal in your OS and using pip install the Kaskada Python client. Listing 2. Installing Kaskada using pip pip install kaskada Pip and pip3 Depending on you Python installation and configuration you may have pip3 instead of pip available in your terminal. If you do have pip3 replace pip with pip3 in your command, i.e., pip3 install kaskada You can see what version of Python pip uses by running pip -V Installing kaskada for the first time can take 10-15 minutes while some external dependencies are built. Subsequent installs and upgrades are generally faster. Now that we have everything installed let’s fire up a notebook and get the remaining components of Kaskada installed. Using a terminal start a new Jupyter notebook using the command Listing 3. Start a Jupyter notebook. jupyter notebook The jupyter command should activate your browser and you can open a new notebook. Create a new code cell in your new notebook and enter the following code in the code cell. from kaskada.api.session import LocalBuilder session = LocalBuilder().build() Run this cell inside your notebook and you should see some output similar to the following Figure 1. Sample output of Kaskada’s installation within a Jupyter notebook. This command imports the client’s LocalBuilder and uses this builder to create a session. This is the first time we are running the builder on this machine. The builder will download (if needed) the latest release of Kaskada’s components from GitHub and then run these components on your local machine. The command will generate some output during the download, install and run process. Let’s now create a small table and write a simple query to see that everything is working correctly with our setup. Kaskada’s client includes notebook customizations that allow us to write queries in the Fenl language but also receive and render the results of our queries in our notebooks. We need to enable these customizations first before we can use them. So in a new code cell input the following command and run this cell. Listing 4. Enable fenlmagic in this notebook %load_ext fenlmagic Now we can start a code cell in our notebook with the first line being the string %%fenl to indicate that this cell will contain code in the Fenl language. The special string %%fenl will also connect to the Kaskada components that we installed that will execute the query and report back any results to our notebook. Congratulations, you now have Kaskada locally installed and you can start loading and querying your data using Kaskada inside a Jupyter notebook. Kaskada stores data in tables. Tables consist of multiple rows, and each row is a value of the same type. Every table is associated with a schema which defines the structure of each event in the table. Schemas are inferred from the data you load into a table, however, some columns are required by Kaskada’s data model. Every table must include a column identifying the time and entity associated with each row. When creating a table, you must tell Kaskada which columns contain the time and entity of each row: The time column is specified using the time_column_name parameter. This parameter must identify a column name in the table’s data which contains time values. The time should refer to when the event occurred. The entity key is specified using the entity_key_column_name parameter. This parameter must identify a column name in the table’s data which contains the entity key value. The entity key should identify a thing in the world that each event is associated with. Don’t worry too much about picking the \"right\" value - it’s easy to change the entity using the with_key() function. For more information about configuring tables, see developing:tables.adoc#creating-a-table. For more information about the expected structure of input files, see Expected File Format from kaskada import table from kaskada.api.session import LocalBuilder session = LocalBuilder().build() table.create_table( # The table's name table_name = \"Purchase\", # The name of a column in your data that contains the time associated with each row time_column_name = \"purchase_time\", # The name of a column in your data that contains the entity key associated with each row entity_key_column_name = \"customer_id\", ) This creates a table named Purchase. Any data loaded into this table must have a timestamp field named purchase_time, a field named customer_id, and a field named subsort_id. Idiomatic Kaskada We like to use CamelCase to name tables because it helps distinguish data sources from transformed values and function names. The response from the create_table is a table object with contents similar to: table { table_id: \"76b***2e5\" table_name: \"Purchase\" time_column_name: \"purchase_time\" entity_key_column_name: \"customer_id\" subsort_column_name: \"subsort_id\" create_time { seconds: 1634250064 nanos: 422017488 } update_time { seconds: 1634250064 nanos: 422017488 } } request_details { request_id: \"fe6bed41fa29cea6ca85fe20bea6ef4a\" } Now that we’ve created a table, we’re ready to load some data into it. Data can be loaded into a table in multiple ways. In this example we’ll load the contents of a Parquet file into the table. To learn about the different ways data can be loaded into a table, see the Loading Data section of the docs. from kaskada import table from kaskada.api.session import LocalBuilder session = LocalBuilder().build() # A sample Parquet file provided by Kaskada for testing # Available at https://drive.google.com/uc?export=download&id=1SLdIw9uc0RGHY-eKzS30UBhN0NJtslkk purchases_path = \"/absolute/path/to/purchases.parquet\" # Upload the files's contents to the Purchase table (which was created in the previous step) table.load(table_name = \"Purchase\", file = purchases_path) The result of running load is a data_token_id. The data token ID is a unique reference to the data currently stored in the system. Data tokens enable repeatable queries: queries performed against the same data token always run on the same input data. data_token_id: \"aa2***a6b9\" request_details { request_id: \"fe6bed41fa29cea6ca85fe20bea6ef4b\" } The file is transferred to Kaskada and it’s content added to the table. You can write queries in a number of ways with Kaskada. Here we start with fenlmagic because these queries are not persistent. As you are iterating in Jupyter it can be helpful to build up your feature and time selection as you go, once you’d like to persist a query, check out our article on sharing queries with Views. You can make Fenl queries by prefixing a query block with %%fenl. The query results will be computed and returned as a Pandas dataframe. The query content starts on the next line and includes the rest of the code block’s contents. Let’s start by looking at the Purchase table without any filters, this query will return all of the columns and rows contained in a table: %%fenl Purchase It can be helpful to limit your results to a single entity. This makes it easier to see how a single entity changes over time. %%fenl Purchase | when(Purchase.customer_id == \"patrick\") In this example, we build a pipeline of functions using the | character. We begin with the timeline produced by the table Purchase, then filter it to the set of times where the purchase’s customer is \"patrick\" using the when() function. Kaskada’s query language provides a rich set of operations for reasoning about time. Here’s a more sophisticated example that touches on many of the unique features of Kaskada queries: %%fenl # How many big purchases happen each hour and where? let cadence = hourly() # Anything can be named and re-used let hourly_big_purchases = purchase | when(Purchase.amount > 10) # Filter anywhere | count(window=since(cadence)) # Aggregate anything | when(cadence) # Shift timelines relative to each other let purchases_now = count(Purchase) let purchases_yesterday = purchases_now | shift_by(days(1)) # Records are just another type in { hourly_big_purchases, purchases_in_last_day: purchases_now - purchases_yesterday } | extend({ # …modify them sequentially last_visit_region: last(Pageview.region) }) For more information about writing queries, see Reference - Queries A given query can be computed in different ways. You can configure how a query is executed by providing flags to the %%fenl block. You can either return a table describing each change in the timeline, or a table describing the \"final\" value of the timeline. By default, queries return each change in the timeline. You can change the results to only include the final values: %%fenl --result-behavior final-results Purchase | when(Purchase.customer_id == \"patrick\") You can limit the number of rows returned from a query: %%fenl --preview-rows 10 Purchase | when(Purchase.customer_id == \"patrick\") This may return more rows that you asked for. Kaskada computes data in batches. When you configure --preview-rows Kaskada stops processing at the end of a batch once the given number of rows have been computed, and returns all the rows that were computed. To capture the result of a query and assign it to the variable query_result: %%fenl --var query_result Purchase | when(Purchase.customer_id == \"patrick\") You can now inspect the resulting dataframe, or the original query string: # The result dataframe query_result.dataframe # The original query expression query_result.expression For more information about configuring queries, see Reference - Configuring Queries","title":"Hello World (Jupyter)","component":"kaskada","version":"main","name":"hello-world-jupyter","url":"/kaskada/main/getting-started/hello-world-jupyter.html","titles":[{"text":"Installation","hash":"installation","id":1},{"text":"Kaskada Client Installation","hash":"kaskada-client-installation","id":2},{"text":"Enable the Kaskada magic command","hash":"enable-the-kaskada-magic-command","id":3},{"text":"Loading Data into a Table","hash":"loading-data-into-a-table","id":4},{"text":"Creating a Table","hash":"creating-a-table","id":5},{"text":"Loading Data","hash":"loading-data","id":6},{"text":"Querying Data","hash":"querying-data","id":7},{"text":"Writing Queries","hash":"writing-queries","id":8},{"text":"Configuring queries","hash":"configuring-queries","id":9},{"text":"Changing how the result timeline is converted to a table","hash":"changing-how-the-result-timeline-is-converted-to-a-table","id":10},{"text":"Limiting how many rows are returned","hash":"limiting-how-many-rows-are-returned","id":11},{"text":"Assigning results to a variable","hash":"assigning-results-to-a-variable","id":12}]},"21":{"id":21,"text":"Kaskada’s query language focuses on event-based data processing making it easier to reason about when things happen, the state at specific points in time, and how results change over time. Kaskada queries are simple, declarative and composable providing a more expressive way to query event-based data. There are several ways to quickly get started with Kaskada. Hello World (Jupyter): How to get up and running with Kaskada inside a Jupyter notebook running locally. This quick tutorial will help you install and run Kaskada from within a Jupyter notebook, load some sample data into Kaskada, use Kaskada queries and Python within Jupyter to explore that data. Hello World (CLI): How to execute queries from the command line using the Kaskada CLI. This quick tutorial will help you install and run Kaskada from the command line, load some sample data into Kaskada, and use Kaskada queries to explore that data all on the command line. Installing different clients The Python and CLI clients are independent and are installed separately. For example, you don’t need to install the Python client in order to use the CLI. If you would like use both, you must install them independently.","title":"Getting Started","component":"kaskada","version":"main","name":"index","url":"/kaskada/main/getting-started/index.html","titles":[]},"22":{"id":22,"text":"Cassandra is a open source NoSQL distributed database that provides linear scalability and low-latency query results. Feature values can be written to Cassandra in real-time via Pulsar. First, materialize features into Pulsar. Next use the Cassandra sink connector to pull messages from Pulsar into Cassandra.","title":"Integrating with Apache Cassandra","component":"kaskada","version":"main","name":"apache-cassandra","url":"/kaskada/main/integrating/apache-cassandra.html","titles":[{"text":"Writing to Cassandra","hash":"writing-to-cassandra","id":1}]},"23":{"id":23,"text":"Apache Pulsar is an open-source distributed streaming platform. Query results can be written to Pulsar in real-time by creating a materialization. tenant = \"public\" namespace = \"default\" topic_name = \"model_features\" broker_service_url = \"pulsar://127.0.0.1:6650\" destination = materialization.PulsarDestination(tenant, namespace, topic_name, broker_service_url) materialization.create_materialization( name = \"MaterializedFeatures\", destination = destination, query = \"{ key: Purchase.customer_id, max_amount: Purchase.amount | max(), min_amount: Purchase.amount | min(), }\" )","title":"Integrating with Apache Pulsar","component":"kaskada","version":"main","name":"apache-pulsar","url":"/kaskada/main/integrating/apache-pulsar.html","titles":[{"text":"Writing to Pulsar","hash":"writing-to-pulsar","id":1}]},"24":{"id":24,"text":"Redshift is a hosted data warehouse that provides scalable SQL queries over large data sets. Query results can be loaded into Redshift by exporting values as Parquet and using the COPY instruction to load the Parquet file into a Parquet table. Query results can be returned as a URL identifying the output Parquet file by supplying the output config --output parquet. %%fenl --output parquet { key: Purchase.customer_id, max_amount: Purchase.amount | max(), min_amount: Purchase.amount | min(), } The resulting Parquet file can be loaded into a Redshift table. COPY feature_vectors FROM '' FORMAT AS PARQUET;","title":"Integrating with AWS Redshift","component":"kaskada","version":"main","name":"aws-redshift","url":"/kaskada/main/integrating/aws-redshift.html","titles":[{"text":"Writing to Redshift","hash":"writing-to-redshift","id":1}]},"25":{"id":25,"text":"Redis is an OpenSource in-memory data-structure store. Query results can be written to Redis in real-time via Pulsar. First, materialize features into Pulsar. Next use the Redis sink connector to pull messages from Pulsar into Redis.","title":"Integrating with Redis","component":"kaskada","version":"main","name":"redis","url":"/kaskada/main/integrating/redis.html","titles":[{"text":"Writing to Redis","hash":"writing-to-redis","id":1}]},"26":{"id":26,"text":"Snowflake is a hosted data warehouse that provides scalable SQL queries over large data sets. Query results can be loaded into Snowflake by exporting values as Parquet and using the COPY instruction to load the Parquet file into a Parquet table. Query results can be returned as a URL identifying the output Parquet file by supplying the output config --output parquet. %%fenl --output parquet { key: Purchase.customer_id, max_amount: Purchase.amount | max(), min_amount: Purchase.amount | min(), } The resulting Parquet file can be loaded into a temporary Snowflake table. create or replace temporary table feature_vectors ( key varchar default null, max_amount number, min_amount number ); create or replace file format feature_vector_parquet_format type = 'parquet'; create or replace temporary stage feature_vector_stage file_format = feature_vector_parquet_format; put @sf_tut_stage; copy into cities from (select * from @sf_tut_stage/.parquet);","title":"Integrating with Snowflake","component":"kaskada","version":"main","name":"snowflake","url":"/kaskada/main/integrating/snowflake.html","titles":[{"text":"Writing to Snowflake","hash":"writing-to-snowflake","id":1}]},"27":{"id":27,"text":"We didn’t make the decision to implement a new query language lightly; in fact we’ve tried repeatedly to find ways to build on existing languages rather than implement our own. What we’ve found is that fundamental abstractions matter. SQL really wants to reason about static tables. Using SQL as the query language forces a lossy conversion from the natural representation to tables. There’s a reason that Gremlin is popular for graphs and PromQL for timeseries. These query languages use fundamental abstractions that are aligned with the data being queried. We believe that most appropriate abstraction for reasoning about event data is the timeline, and we built our query language around this idea. Timelines capture the richness of a raw event feed without leaking implementation details such as \"bulk vs streaming\". Timelines are more general than timeseries but are compatible with timeseries operations. Timelines are less general than tables because they model time explicitly. While this limits the kinds of data you can work with, it allows for much more natural expressions of sequential and temporal relationships. Timelines have a familiar and useful \"geometric abstraction\" that helps you reason about time visually. We’ve tried very hard to implement a simple, familiar query syntax with intuitive, predicable semantics, and to provide extensive documentation and example code. We’re always looking for ways to improve - if you see things that are confusing or unexpected we’d love to hear about it. Start a GitHub discussion and let’s improve Kaskada together! Event processors must choose between optimizing for throughput or latency, but the tradeoff is asymmetric - improving p90 end-to-end latency by a minute can require design choices that reduce throughput by multiple orders of magnitude. Modern CPU’s and GPU’s are much more efficient when applying the same operation repeatedly, so compute efficiency increases as the batches you compute over get larger. In a real-time system, however, working with larger batches means spending more time buffering, which means increased end-to-end latency. One of Kaskada’s design goals is to provide interactive results over large historical event sets. This ability is critical to understanding the historical context of a computation or \"bootstrapping\" new real-time computations. To support these type of bulk/OLAP workloads, Kaskada is built using the Apache Arrow library for columnar computation. Columnar compute is difficult to \"tack on\" to an event processor after-the-fact; it’s a foundational design decision that has implications throughout the engine’s implementation. By building on Arrow, Kaskada optimizes for throughput over latency. We believe that end-to-end latencies measured in 100’s of milliseconds are sufficient for most real-time applications, and that sacrificing single-digit latencies is an acceptable tradeoff for orders-of-magnitude improvements in bulk efficiency. Another important tradeoff Kaskada makes is to focus on single-process performance. In the early days of \"Big Data\", commodity hardware came with a single core and 2Gb of RAM. The only way to implement a computation over terabyte-sized datasets was to distribute it across multiple machines. Recent compute engines are increasingly de-emphasizing distributed execution in favor of high-performance on a single physical instance. To quote from an excellent article from DuckDB's Jordan Tigani titled Big Data is Dead: Today, however, a standard instance on AWS uses a physical server with 64 cores and 256 GB of RAM. That’s two orders of magnitude more RAM. If you’re willing to spend a little bit more for a memory-optimized instance, you can get another two orders of magnitude of RAM. How many workloads need more than 24TB of RAM or 445 CPU cores? — Jordan Tigani Big Data is Dead Currently, Kaskada takes a hybrid approach to distributed execution. Distributed workers can be used when initially loading data. Data loading is expensive becuse it involves sorting events chronologically. Kaskada currently executes each query in a single process. Fully-distributed execution is on our roadmap, however we find that \"vertical scaling\" is sufficient for the vast majority of use cases. Timeseries databases are a popular way to work with temporal data. A timeseries captures a series of values, each associated with a different time. In most cases, the series corresponds to a standard interval, for example seconds or minutes. Having a pre-defined series is useful for some operations, for example it is easier to reason about time intervals in which nothing happened than it would be with standard SQL. The downside to starting with a standard interval is that in some cases your source data doesn’t conform to the timeseries format - timeseries are often generated by counting event occurrences in each time interval. Information is often lost in the transformation from instantaneous events into windowed aggregations. Timelines are similar to timeseries - both capture values associated with different times. The difference is that a timeline describes an arbitrary number of values and doesn’t depend on a standard interval. In this sense, a timeseries is a special-case of a timeline. Kaskada provides operations for transforming a timeline into a time series. For example, to transform an event timeline Purchase into a daily event-count timeseries: Purchase | count(since(daily())) An \"event\" is any fact about the world associated with a specific time. Events record simple observations, for example: Alice purchased a tennis ball on Thursday, 16-Mar-23 16:54:04 UTC. Events are powerful because they’re facts; they don’t change over time. Alice may cancel her purchase, or return the tennis ball for a refund, but this doesn’t change the fact of her original purchase. Events are produced in many different ways: User clicks, swipes, page-views, and form interactions Application logs Callbacks from external services Change Data Capture (CDC) events from mutable data stores The output of streaming compute jobs By collecting events as they occur, applications can react to changes in the world as they happen. Events are often treated as \"raw\" data in need of pre-processing before they can be used. You might be accustomed to working with data that’s been through a number of ETL operations to noramlize, filter, and aggreagte the raw events into an easier to use set of tables. This type of data processing can help ensure consistent business logic and minimize the time required to start working with \"correct\" data. Unfortunately, this practice can have some downsides: Pre-aggregation often produces results with less granular time resolution than the original data, and many real-time data applications depend on this granularity. It’s often important to know what happend in the the past few minutes or seconds - knowing what happened yesterday isn’t good enough. ETL and pre-processing pipelines often end up making decisions about what is and isn’t important. These decisions reflect priorities at time the pipeline is created, but can end up making it difficult to iterate and build new solutions. Working with \"cleaned\" tables usually means collaborating by sharing large datasets. The challenge comes when you need to understand the meaning of that data. Semantics often get lost when sharing a bucket of bits rather than the business logic used to generate it. Kaskada is designed to allow practitioners to describe the full set of cleaning operations needed to transform raw events into actionable data. Collaboration through code-sharing makes it easier to understand how outputs are defined, and makes it easier to iterate on those definitions.","title":"Frequently Asked Questions","component":"kaskada","version":"main","name":"faq","url":"/kaskada/main/overview/faq.html","titles":[{"text":"Why a new query language?","hash":"why-a-new-query-language","id":1},{"text":"How hard is it to learn the query language?","hash":"how-hard-is-it-to-learn-the-query-language","id":2},{"text":"How scalable is Kaskada?","hash":"how-scalable-is-kaskada","id":3},{"text":"How do Timelines relate to Timeseries?","hash":"how-do-timelines-relate-to-timeseries","id":4},{"text":"What are some examples of \"event data\"?","hash":"what-are-some-examples-of-event-data","id":5},{"text":"Why would I want to compute directly from events?","hash":"why-would-i-want-to-compute-directly-from-events","id":6}]},"28":{"id":28,"text":"Understanding and reacting to the world in real-time requires understanding what is happening now in the context of what happened in the past. You need the ability to understand if what just happened is unusual, how it relates to what happened previously, and how it relates to other things that are happening at the same time. Getting to this type of contextual real-time insight has historically been difficult, as it required bringing together incompatible tools designed for either bulk or streaming applications. Recent stream-processing frameworks make it easier to work across streams and bulk data sources, but force you to pick one: either you get the power of a low-level API or the convenience of a high-level query language. Kaskada provides a single, high-level, declarative query language. The power and convenience of Kaskada’s query language come from the fact that it’s built from a new abstraction: the timeline. Timelines give you the declarative transformations and aggregations of SQL without losing the ability to reason about temporal context, time travel, sequencing, timeseries, etc. Any query can be used, unchanged, in either batch or streaming mode. Having the right tool makes every job easier: different data-processing jobs benefit from different ways of thinking. Tables are useful for inter-related records, graphs are useful for thinking about networks - Kaskada was designed for thinking about changes over time, and is built on the idea of a timeline. Figure 1. Where I was at various times A timeline describes how a value changes over time. In the same way that SQL queries transform tables and graph queries transform nodes and edges, Kaskada queries transforms timelines. In comparison to a timeseries which is defined at fixed, periodic times (i.e., every minute), a timeline is defined at arbitrary times. Timelines simplify reasoning about time, change, and behavior. Timelines support SQL’s aggregations but extend them with sequential operations typically provided by complex event processing (CEP) systems. Let’s imagine you have two tables containing different kinds of events. One table contains an event for each time a user visits your web page: Table 1. Pageview table time user path 8:20 Alice /index.html 9:45 Alice /products.html 2:10 Alice /product/1923.html 8:52 Alice /checkout.html 11:03 Bob index.html Another table contains an event for each time a user makes a purchase: Table 2. Purchase table time user amount 7:02 Alice $3.99 10:47 Alice $5.00 We can do a lot with these tables with SQL - we can transform, filter, and aggregate them. But what if we want to answer questions that depend on time and order? We might want to know how a result changes over time, or aggregate over time-based groups, or detect when a condition is first met. Many of these things are possible with SQL, but they’re not always simple and/or easy. Reasoning about time using abstractions designed for tables forces you to carefully reflect temporal logic in your query code, for example to see how a simple sum changes over time you might write: SELECT sum(amount) OVER (PARTITION BY customer_id ORDER BY timestamp) FROM Purchase This uses a slightly arcane (and inconsistently supported) feature of SQL, windowed aggregations. Queries like this can get complex and unreadable quickly, because the abstractions do not easily facilitate these types of queries. For example, if you wanted to know how many times each user had visited your website since the last time they purchased something, you’d need to write something like this: WITH last_purchase AS( SELECT user_id, max(timestamp) FROM purchase GROUP BY user_id ) SELECT user_id, count(*) FROM pageview JOIN last_purchase ON pageview.user_id = last_purchase.user_id WHERE pageview.timestamp > last_purchase.timestamp GROUP BY user_id If you wanted to know how that value has changed over time you’d need to re-write the query from scratch, and the result would be too long to show in this quick introduction. Many time and sequence related questions end up being surprisingly hard to answer with SQL. This is where the notion of timelines can make your life much easier. Rather than thinking of each event as a row in a table, we can think of it as a point along a timeline. Kaskada provides many ways of transforming timelines, for example we can compute the simple sum we saw earlier: Purchase.amount | sum() Aggregating a timeline produces a new timeline - rather than computing a single answer, the timeline describes how the result of the aggregation changes over time. Since the value of a timeline is specific to a point in time, we can easily describe aggregations in a temporal context. See how easy it is to describe the earlier example of counting page views since the last purchase: Pageview | count(since(Purchase)) This timeline describes the result of a query at every point in time, so we can easily observe its value at specific points in time without making any changes to the query: Pageview | count(since(Purchase)) | when(daily()) Taking this a step further, we can re-aggregate the previous result. Here we compute the average of each day’s pageview-since-purchase count: Pageview | count(since(Purchase)) | when(daily()) | mean() Finally, we’re not limited to only thinking about a single point in time. By shifting timelines relative to each other we can easily describe how values change over time, for example how the previous result has changed hour-over-hour: let daily_average = Pageview | count(since(Purchase)) | when(daily()) | mean() in daily_average - (daily_average | shift_by(hours(1))) Writing these simple-seeming queries over timelines with SQL queries over tables would have been much harder, more verbose, and less maintainable due to the lack of alignment between the problem and the abstractions used to solve the problem. Aligning our mental model with the problem being solved makes reasoning about time and behavior much easier. A big reason for the power and persistence of SQL is that it’s a declarative language - you write what you want, not how to compute it. This allows you to focus on understanding your data, without having to think about query implementation details. Unfortunately, the rise of stream-based data processing has forced developers to spend a lot of time thinking about implementation details. SQL queries written against OLAP offline data stores often aren’t supported by streaming data processors. While some real-time systems support \"streaming SQL\", streams and tables are very different things and much of the power of stream processing is lost in translation. How a computation is described shouldn’t depend on where events are stored - streaming vs batch is an implementation detail. By building Kaskada’s query language on timelines, it brings the abstractions of streaming to bulk storage, rather than the other way around. Kaskada allows developers to focus on solving problems with event data by raising the abstraction level used to describe queries. Kaskada was built to be performant and easy to use and operate. We chose to build Kaskada in Rust because of it’s performance, safety, lack of garbage collection and support for columnar data formats. The implementation leverages Apache Arrow for event processing and takes advantage of modern CPU optimizations like SIMD, branch prediction, and caching. Computation is implemented as a single, chronological pass over the input events, so you can compute over datasets that are significantly larger than available memory. Internally, events are stored on disk as Parquet files. We find that most computations are bottlenecked on I/O, so using an efficient columnar file format lets us selectively read the columns and row ranges needed to produce a result. The result is a modern event processing engine that installs in seconds without any external dependencies and computes quickly and efficiently. To get started, you can follow one of our \"Hello World\" examples. These examples will guide you through installing Kaskada and making your first query. Hello world using Python Jupyter Hello world using the command line","title":"What Is Kaskada?","component":"kaskada","version":"main","name":"what-is-kaskada","url":"/kaskada/main/overview/what-is-kaskada.html","titles":[{"text":"What are Timelines?","hash":"what-are-timelines","id":1},{"text":"Current Challenges","hash":"current-challenges","id":2},{"text":"The solution offered by timelines","hash":"the-solution-offered-by-timelines","id":3},{"text":"The shift away from technology-specific solutions","hash":"the-shift-away-from-technology-specific-solutions","id":4},{"text":"Why Kaskada?","hash":"why-kaskada","id":5},{"text":"Next Steps","hash":"next-steps","id":6}]},"29":{"id":29,"text":"We’ll begin by laying out a simple modeling problem, based on the Fenl Quickstart guide. The goal will be to build a model predicting if a given purchase will result in a fraud report within the next 30 days given two event tables; a Purchase table and a FraudReport table. from kaskada import table import pandas import requests table.create_table( table_name = \"Purchase\", time_column_name = \"purchase_time\", entity_key_column_name = \"id\", subsort_column_name = \"subsort_id\", ) table.create_table( table_name = \"PurchaseByCustomer\", time_column_name = \"purchase_time\", entity_key_column_name = \"customer_id\", subsort_column_name = \"subsort_id\", ) purchases_url = \"https://drive.google.com/uc?export=download&id=1SLdIw9uc0RGHY-eKzS30UBhN0NJtslkk\" r = requests.get(purchases_url, allow_redirects=True) open('purchases.parquet', 'wb').write(r.content) table.load('Purchase', 'purchases.parquet') table.load('PurchaseByCustomer', 'purchases.parquet') table.create_table( table_name = \"FraudReport\", time_column_name = \"time\", entity_key_column_name = \"purchase_id\", subsort_column_name = \"subsort_id\", ) frauds_url = \"https://drive.google.com/uc?export=download&id=1WXRW1zt1EEPcbrw4nw9rCdhTqlatxTSR\" f = requests.get(frauds_url, allow_redirects=True) open('frauds.parquet', 'wb').write(r.content) table.load('FraudReporting', 'frauds.parquet') To train a model we must produce separate training and validation datasets. These datasets will be created by partitioning the full set of training examples into two time ranges, one spanning the years 2000-2015 and another spanning the years 2015-2020. We’ll execute the feature query twice, once to produce the training dataset and another time to produce the validation dataset. The training query will provide start and end times corresponding to the time interval 2000-2015, while the validation query will times corresponding to the time interval 2015-2020. Usage The fenlmagic extension is designed to make it easy to interactively explore your dataset. When you’re ready to train a model we recommend using the Python client. The python client exposes the full functionality of the Kaskada API and is better-suited to tasks such as managing Views, Tables, and making multiple queries with different query variables. %%fenl --var examples let average_purchase_by_customer = PurchaseByCustomer.amount | mean() let predictors = { entity: Purchase.id, purchase_total: Purchase.amount | last(), mean_purchase: lookup(Purchase.customer_id, average_purchase_by_customer), } let target = { target: count(FraudReport), } let shifted = predictors | shift_to(time_of($input) | add_time(days(30))) in shifted | extend(lookup($input.entity, target)) We’ve provided the fenl-magic flag --var examples which causes the query string to be assigned to a local variable named examples. We’ll use this variable to create a view we can re-use when we make the training and validation queries. from kaskada import view view.create_view( view_name = \"Examples\", expression = examples.query, ) Depending on the size of your training dataset and how you intend to train a model, you may want to copy the training features locally or transfer them to a remote data store. We’ll show the simple case of training locally. Begin by limiting the examples to the training time range. %%fenl Examples | when(time_of($input) > (\"2020-01-01T00:00:00Z\" as timestamp_ns)) and time_of($input) (\"2020-02-03T00:00:00Z\" as timestamp_ns)) and time_of($input) <= (\"2020-04-12T00:00:00Z\" as timestamp_ns)) We’re finally ready to train a model. This shows a simple linear regression model. from sklearn.linear_model import LogisticRegression from sklearn import preprocessing X_train = training.dataframe.drop(['_time', '_subsort', '_key', '_key_hash', 'entity', 'target'], axis = 1) y_train = training['target'] X_validation = validation.drop(['_time', '_subsort', '_key', '_key_hash', 'entity', 'target'], axis = 1) y_validation = validation['target'] scaler = preprocessing.StandardScaler().fit(X_train) X_train_scaled = scaler.transform(X_train) X_validation_scaled = scaler.transform(X_validation) model = LogisticRegression(max_iter=1000) model.fit(X_train_scaled, y_train) model.score(X_validation_scaled, y_validation)","title":"Example Modeling Problem","component":"kaskada","version":"main","name":"exporting-for-training","url":"/kaskada/main/tools-and-resources/exporting-for-training.html","titles":[{"text":"Setup","hash":"setup","id":1},{"text":"Feature Definitions","hash":"feature-definitions","id":2},{"text":"Training a Model Locally","hash":"training-a-model-locally","id":3}]},"30":{"id":30,"text":"Real-time ML is making predictions based on recent events - reacting to what’s happening now, rather than what happened yesterday. Many outcomes can’t be predicted accurately from features computed the day before. Real-time models can be difficult to build. Models must be trained from examples that each capture specific instants in time, computed over historical datasets spanning months or years. Once a model is trained those same features must be kept up-to-date as new events arrive. Let’s start with an example - imagine we’re trying to build a real-time model for a mobile game. We want to predict an outcome, for example, if a user will pay for an upgrade. We’re collecting and storing events about what users are doing. Figure 1. An example event These events describe when users win, when they lose, when they buy things, when they they talk to each other. To make predictions we must train a model using examples composed of input features and target labels. Each example must be computed from the events we’re collecting. Visualizing events chronologically allows us to understand the context of each event, and the story of what’s happening. The first player likes to brag about their victories The game was too hard for the second player The third player pays for upgrades when they get frustrated. We’d like to capture this type of time-based insight as feature values we can use to train a model. We can do this by drawing the result of feature computations as a timeline showing how the feature’s value changes as each event is observed. This timeline allows us to “observe” the value of the feature at any point in time, giving us a framework for training real-time ML models: Start with raw events and compute feature timelines Observe features at the points in time a prediction would be made to build a training example Move each example forward in time until the predicted outcome can be observed Compute the correct target value and append it to the example Implementing each of these four steps allows us to compute a set of training examples where each example captures the value of our model’s input features at a specific point in time as well as the model’s target label at a (potentially different) point in time. Let’s explore how Kaskada allows us to implement this framework for our example problem. Kaskada treats events as rows in tables - we’ll focus on two tables describing the result of users playing our game, GameVictory and GameDefeat. Table 1. GameVictory events time entity value 2:30 Alice {duration: 10s} 3:58 Bob {duration: 23s} 4:25 Bob {duration: 8s} 5:05 Alice {duration: 53s} 10:01 Alice {duration: 43s} Table 2. GameDefeat events time entity value 2:35 Bob {duration: 3s} 3:46 Bob {duration: 8s} 5:36 Alice {duration: 2s} 7:22 Bob {duration: 7s} 8:35 Alice {duration: 5s} We want to predict if a user will pay for an upgrade - step one is to compute features from events. As a first simple feature, we describe the amount of time a user as spent losing at the game - users who lose a lot are probably more likely to pay for upgrades. let features = { (1) loss_duration: sum(GameVictory.duration) } (2) 1 Construct a record containing a single field named loss_dur 2 Compute the sum of each victory event’s duration field time entity result 2:30 Alice { loss_dur: 10s } 3:58 Bob { loss_dur: 23s } 4:25 Bob { loss_dur: 31s } 5:05 Alice { loss_dur: 63s } 10:01 Alice { loss_dur: 106s } Notice that the result is a timeline describing the step function of how this feature has changed over time. We can “observe” the value of this step function at any time, regardless of the times at which the original events occurred. Another thing to notice is that these results are automatically grouped by user. We didn’t have to explicitly group by user because tables in Kaskada specify an \"entity\" associated with each row. The second step is to observe our feature at the times a prediction would have been made. Let’s assume that the game designers want to offer an upgrade any time a user loses the game twice in a row. We can construct a set of examples associated with this prediction time by observing our feature when the user loses twice in a row. let features = { loss_duration: sum(GameVictory.duration) } let examples = features (1) | when(count(GameDefeat, window=since(GameVictory)) == 2) (2) (3) 1 The feature record we created previously 2 Build a sequence of operations using the pipe operator 3 You can think of this query as walking over our events chronologically, counting how many GameDefeat events have bene seen since the most recent GameVictory event time entity result 3:46 Bob { loss_dur: 23s } 8:35 Alice { loss_dur: 63s } This query gives us a set of examples, each containing input features computed at the specific times we would like to make a prediction. The third step is to move each example to the time when the outcome we’re predicting can be observed. We want to give the user some time to see the upgrade offer, decide to accept it, and pay - let’s check to see if they accepted an hour after we make the offer. let features = { loss_duration: sum(GameVictory.duration) } let examples = features | when(count(GameDefeat, window=since(GameVictory)) == 2) (1) | shift_by(hours(1)) (2) 1 The examples we created previously 2 Shift the results of the last step forward in time by one hour - visually you could imagine dragging the examples forward in the timeline by one hour time entity result 4:46 Bob { loss_dur: 23s } 9:35 Alice { loss_dur: 63s } Our training examples have now moved to the point in time when the label we want to predict can be observed. Notice that the values in the time column are an hour later than the previous step. The final step is to see if a purchase happened after the prediction was made. This will be our target value and we’ll add it to the records that currently contain our feature. let features = { loss_duration: sum(GameVictory.duration), purchase_count: count(Purchase) } (1) let example = features | when(count(GameDefeat, window=since(GameVictory)) == 2) | shift_by(hours(1)) let target = count(Purchase) > example.purchase_count (2) in extend(example, {target}) (3) 1 Capture purchase count as a feature 2 Compare purchase count at prediction and label time. 3 Append the target value to each example time entity result 4:46 Bob { loss_dur: 23s, target: true } 9:35 Alice { loss_dur: 63s, target: false } We’re done! The result of this query is a training dataset ready to be used as input to a model algorithm. To review the process so far: We computed the time spent in loosing games from the events we collected We generated training examples each time the a user lost twice in a row We shifted those examples forward in time one hour Finally, we computed the target value by checking for purchases since the prediction was made.","title":"Training real-time ML models","component":"kaskada","version":"main","name":"training-realtime-ml-models","url":"/kaskada/main/tools-and-resources/training-realtime-ml-models.html","titles":[{"text":"What is real-time ML?","hash":"what-is-real-time-ml","id":1},{"text":"How does Kaskada help build real-time ML?","hash":"how-does-kaskada-help-build-real-time-ml","id":2},{"text":"A framework for training real-time ML models","hash":"a-framework-for-training-real-time-ml-models","id":3},{"text":"Step 1: Define features","hash":"step-1-define-features","id":4},{"text":"Step 2: Define prediction times","hash":"step-2-define-prediction-times","id":5},{"text":"Step 3: Shift examples","hash":"step-3-shift-examples","id":6},{"text":"Step 4: Label examples","hash":"step-4-label-examples","id":7}]},"31":{"id":31,"text":"The Kaskada engine and manager generate logs that can be used to troubleshoot issues with the Kaskada system. These logs contain valuable information about the state of the system and can be used to diagnose issues. Including relevant segments from the logs when you open an issue can greatly help others troubleshoot your problem. Log files are located in the user’s home folder ~/.cache/kaskada/logs. Each time the engine and/or manager is started, a new folder is created with a UUID as the folder name. Inside this folder you should be able to find 2 logs per application the standard output log and the standard error log. Here is an example with 2 folders from two separate runs of the engine and manager. /home/therapon/.cache/kaskada/logs ├── 1ed25c9e-8914-4527-92a9-9ee716a59847 │ ├── engine_stderr.txt │ ├── engine_stdout.txt │ ├── manager_stderr.txt │ └── manager_stdout.txt └── ff16bd01-5d19-4da2-b645-a959868ac681 ├── engine_stderr.txt ├── engine_stdout.txt ├── manager_stderr.txt └── manager_stdout.txt The standard output log contains the output of the application (info, warn etc.) and the standard error log contains any errors that occurred during the run. On Unix systems the tail command is very convenient for viewing the last few lines of multiple files at a time. For example, to view new lines of the standard output logs for the engine and manager you can run the following command from the logs folder: tail -f engine_stdout.txt manager_stdout.txt","title":"Engine and manager logs","component":"kaskada","version":"main","name":"logs","url":"/kaskada/main/troubleshooting/logs.html","titles":[]}},"components":{},"componentVersions":{"kaskada/main":{"displayVersion":"main","title":"Kaskada Documentation","version":"main","name":"kaskada","asciidoc":{"attributes":{"env":"site","env-site":"","site-gen":"antora","site-gen-antora":"","attribute-missing":"warn","data-uri":null,"icons":"font","sectanchors":"","source-highlighter":"highlight.js","site-title":"Kaskada Docs","site-url":"https://kaskada-ai.github.io/docs-site/","kroki-fetch-diagram":true,"page-pagination":"","sectlinks":"","idprefix":"","idseparator":"-","table-stripes":"even","listing-caption":"Listing"},"sourcemap":true,"extensions":[{},{},{}]},"url":"/kaskada/main/overview/what-is-kaskada.html","navigation":[{"items":[{"content":"Overview","items":[{"content":"What Is Kaskada?","url":"/kaskada/main/overview/what-is-kaskada.html","urlType":"internal"},{"content":"Frequently Asked Questions","url":"/kaskada/main/overview/faq.html","urlType":"internal"}]}],"root":true,"order":0},{"items":[{"content":"Getting Started","url":"/kaskada/main/getting-started/index.html","urlType":"internal","items":[{"content":"Hello World (Jupyter)","url":"/kaskada/main/getting-started/hello-world-jupyter.html","urlType":"internal"},{"content":"Hello World (CLI)","url":"/kaskada/main/getting-started/hello-world-cli.html","urlType":"internal"}]}],"root":true,"order":1},{"items":[{"content":"Installing","url":"/kaskada/main/installing.html","urlType":"internal"},{"content":"Loading Data","url":"/kaskada/main/loading-data.html","urlType":"internal"},{"content":"Examples","items":[{"content":"Overview Notebook","url":"https://github.com/kaskada-ai/kaskada/blob/main/examples/Kaskada%20Demo%20for%20Event%20Processing%20and%20Time-centric%20Calculations.ipynb","urlType":"external"},{"content":"Real-time ML Notebook","url":"https://github.com/kaskada-ai/kaskada/blob/main/examples/ML_example.ipynb","urlType":"external"},{"content":"Customer Retention Notebook","url":"https://github.com/kaskada-ai/kaskada/blob/main/examples/Customer_Retention_(OSS).ipynb","urlType":"external"},{"content":"Materializing to Pulsar Notebook","url":"https://github.com/kaskada-ai/kaskada/blob/main/examples/pulsar-materialize/notebooks/Materialize_to_Pulsar.ipynb","urlType":"external"}]}],"root":true,"order":2},{"items":[{"content":"Reference","items":[{"content":"Tables","url":"/kaskada/main/developing/tables.html","urlType":"internal"},{"content":"Queries","url":"/kaskada/main/developing/queries.html","urlType":"internal"},{"content":"Slices","url":"/kaskada/main/developing/slices.html","urlType":"internal"},{"content":"Views","url":"/kaskada/main/developing/views.html","urlType":"internal"},{"content":"Materializations","url":"/kaskada/main/developing/materializations.html","urlType":"internal"}]}],"root":true,"order":3},{"items":[{"content":"Integrating","items":[{"content":"Apache Pulsar","url":"/kaskada/main/integrating/apache-pulsar.html","urlType":"internal"},{"content":"Apache Cassandra","url":"/kaskada/main/integrating/apache-cassandra.html","urlType":"internal"},{"content":"Redis","url":"/kaskada/main/integrating/redis.html","urlType":"internal"},{"content":"AWS Redshift","url":"/kaskada/main/integrating/aws-redshift.html","urlType":"internal"},{"content":"Snowflake","url":"/kaskada/main/integrating/snowflake.html","urlType":"internal"}]}],"root":true,"order":4},{"items":[{"content":"Tools and Resources","items":[{"content":"Training real-time ML models","url":"/kaskada/main/tools-and-resources/training-realtime-ml-models.html","urlType":"internal"},{"content":"Example Modeling Problem","url":"/kaskada/main/tools-and-resources/exporting-for-training.html","urlType":"internal"}]}],"root":true,"order":5},{"items":[{"content":"Query Syntax (Fenl)","items":[{"content":"Fenl Quick Start","url":"/kaskada/main/fenl/fenl-quick-start.html","urlType":"internal"},{"content":"Fenl Language Guide","url":"/kaskada/main/fenl/language-guide.html","urlType":"internal","items":[{"content":"Data model","url":"/kaskada/main/fenl/data-model.html","urlType":"internal"},{"content":"Syntax","url":"/kaskada/main/fenl/syntax.html","urlType":"internal"},{"content":"Entities","url":"/kaskada/main/fenl/entities.html","urlType":"internal"},{"content":"Temporal Computation","url":"/kaskada/main/fenl/temporal-aggregation.html","urlType":"internal"},{"content":"Aggregation and Windowing","url":"/kaskada/main/fenl/aggregation-and-windowing.html","urlType":"internal"},{"content":"Continuity","url":"/kaskada/main/fenl/continuity.html","urlType":"internal"}]},{"content":"Fenl Catalog","url":"/kaskada/main/fenl/catalog.html","urlType":"internal"},{"content":"Fenl FAQ","url":"/kaskada/main/fenl/fenl-faq.html","urlType":"internal"},{"content":"Working with Records","url":"/kaskada/main/fenl/working-with-records.html","urlType":"internal"}]}],"root":true,"order":6},{"items":[{"content":"Troubleshooting","items":[{"content":"Engine and manager logs","url":"/kaskada/main/troubleshooting/logs.html","urlType":"internal"}]}],"root":true,"order":7}]}}}})